/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@amplitude/analytics-browser/lib/esm/browser-client-factory.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-browser/lib/esm/browser-client-factory.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createInstance": () => (/* binding */ createInstance),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @amplitude/analytics-core */ "./node_modules/@amplitude/analytics-core/lib/esm/utils/debug.js");
/* harmony import */ var _browser_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./browser-client */ "./node_modules/@amplitude/analytics-browser/lib/esm/browser-client.js");


var createInstance = function () {
    var client = new _browser_client__WEBPACK_IMPORTED_MODULE_0__.AmplitudeBrowser();
    return {
        init: (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.debugWrapper)(client.init.bind(client), 'init', (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientLogConfig)(client), (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientStates)(client, ['config'])),
        add: (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.debugWrapper)(client.add.bind(client), 'add', (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientLogConfig)(client), (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientStates)(client, ['config.apiKey', 'timeline.plugins'])),
        remove: (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.debugWrapper)(client.remove.bind(client), 'remove', (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientLogConfig)(client), (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientStates)(client, ['config.apiKey', 'timeline.plugins'])),
        track: (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.debugWrapper)(client.track.bind(client), 'track', (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientLogConfig)(client), (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientStates)(client, ['config.apiKey', 'timeline.queue.length'])),
        logEvent: (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.debugWrapper)(client.logEvent.bind(client), 'logEvent', (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientLogConfig)(client), (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientStates)(client, ['config.apiKey', 'timeline.queue.length'])),
        identify: (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.debugWrapper)(client.identify.bind(client), 'identify', (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientLogConfig)(client), (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientStates)(client, ['config.apiKey', 'timeline.queue.length'])),
        groupIdentify: (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.debugWrapper)(client.groupIdentify.bind(client), 'groupIdentify', (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientLogConfig)(client), (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientStates)(client, ['config.apiKey', 'timeline.queue.length'])),
        setGroup: (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.debugWrapper)(client.setGroup.bind(client), 'setGroup', (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientLogConfig)(client), (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientStates)(client, ['config.apiKey', 'timeline.queue.length'])),
        revenue: (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.debugWrapper)(client.revenue.bind(client), 'revenue', (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientLogConfig)(client), (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientStates)(client, ['config.apiKey', 'timeline.queue.length'])),
        flush: (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.debugWrapper)(client.flush.bind(client), 'flush', (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientLogConfig)(client), (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientStates)(client, ['config.apiKey', 'timeline.queue.length'])),
        getUserId: (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.debugWrapper)(client.getUserId.bind(client), 'getUserId', (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientLogConfig)(client), (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientStates)(client, ['config', 'config.userId'])),
        setUserId: (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.debugWrapper)(client.setUserId.bind(client), 'setUserId', (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientLogConfig)(client), (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientStates)(client, ['config', 'config.userId'])),
        getDeviceId: (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.debugWrapper)(client.getDeviceId.bind(client), 'getDeviceId', (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientLogConfig)(client), (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientStates)(client, ['config', 'config.deviceId'])),
        setDeviceId: (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.debugWrapper)(client.setDeviceId.bind(client), 'setDeviceId', (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientLogConfig)(client), (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientStates)(client, ['config', 'config.deviceId'])),
        reset: (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.debugWrapper)(client.reset.bind(client), 'reset', (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientLogConfig)(client), (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientStates)(client, ['config', 'config.userId', 'config.deviceId'])),
        getSessionId: (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.debugWrapper)(client.getSessionId.bind(client), 'getSessionId', (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientLogConfig)(client), (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientStates)(client, ['config'])),
        setSessionId: (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.debugWrapper)(client.setSessionId.bind(client), 'setSessionId', (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientLogConfig)(client), (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientStates)(client, ['config'])),
        extendSession: (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.debugWrapper)(client.extendSession.bind(client), 'extendSession', (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientLogConfig)(client), (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientStates)(client, ['config'])),
        setOptOut: (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.debugWrapper)(client.setOptOut.bind(client), 'setOptOut', (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientLogConfig)(client), (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientStates)(client, ['config'])),
        setTransport: (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.debugWrapper)(client.setTransport.bind(client), 'setTransport', (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientLogConfig)(client), (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.getClientStates)(client, ['config'])),
    };
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createInstance());
//# sourceMappingURL=browser-client-factory.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-browser/lib/esm/browser-client.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-browser/lib/esm/browser-client.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AmplitudeBrowser": () => (/* binding */ AmplitudeBrowser)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @amplitude/analytics-core */ "./node_modules/@amplitude/analytics-core/lib/esm/utils/return-wrapper.js");
/* harmony import */ var _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @amplitude/analytics-core */ "./node_modules/@amplitude/analytics-core/lib/esm/plugins/destination.js");
/* harmony import */ var _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @amplitude/analytics-core */ "./node_modules/@amplitude/analytics-core/lib/esm/utils/uuid.js");
/* harmony import */ var _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @amplitude/analytics-core */ "./node_modules/@amplitude/analytics-core/lib/esm/identify.js");
/* harmony import */ var _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @amplitude/analytics-core */ "./node_modules/@amplitude/analytics-core/lib/esm/revenue.js");
/* harmony import */ var _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @amplitude/analytics-core */ "./node_modules/@amplitude/analytics-core/lib/esm/core-client.js");
/* harmony import */ var _amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @amplitude/analytics-client-common */ "./node_modules/@amplitude/analytics-client-common/lib/esm/analytics-connector.js");
/* harmony import */ var _amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @amplitude/analytics-client-common */ "./node_modules/@amplitude/analytics-client-common/lib/esm/plugins/identity.js");
/* harmony import */ var _amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @amplitude/analytics-client-common */ "./node_modules/@amplitude/analytics-client-common/lib/esm/default-tracking.js");
/* harmony import */ var _utils_snippet_helper__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./utils/snippet-helper */ "./node_modules/@amplitude/analytics-browser/lib/esm/utils/snippet-helper.js");
/* harmony import */ var _plugins_context__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./plugins/context */ "./node_modules/@amplitude/analytics-browser/lib/esm/plugins/context.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config */ "./node_modules/@amplitude/analytics-browser/lib/esm/config.js");
/* harmony import */ var _amplitude_plugin_web_attribution_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @amplitude/plugin-web-attribution-browser */ "./node_modules/@amplitude/plugin-web-attribution-browser/lib/esm/web-attribution.js");
/* harmony import */ var _amplitude_plugin_page_view_tracking_browser__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @amplitude/plugin-page-view-tracking-browser */ "./node_modules/@amplitude/plugin-page-view-tracking-browser/lib/esm/page-view-tracking.js");
/* harmony import */ var _plugins_form_interaction_tracking__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./plugins/form-interaction-tracking */ "./node_modules/@amplitude/analytics-browser/lib/esm/plugins/form-interaction-tracking.js");
/* harmony import */ var _plugins_file_download_tracking__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./plugins/file-download-tracking */ "./node_modules/@amplitude/analytics-browser/lib/esm/plugins/file-download-tracking.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./constants */ "./node_modules/@amplitude/analytics-browser/lib/esm/constants.js");
/* harmony import */ var _det_notification__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./det-notification */ "./node_modules/@amplitude/analytics-browser/lib/esm/det-notification.js");












var AmplitudeBrowser = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(AmplitudeBrowser, _super);
    function AmplitudeBrowser() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AmplitudeBrowser.prototype.init = function (apiKey, userIdOrOptions, maybeOptions) {
        if (apiKey === void 0) { apiKey = ''; }
        var userId;
        var options;
        if (arguments.length > 2) {
            userId = userIdOrOptions;
            options = maybeOptions;
        }
        else {
            if (typeof userIdOrOptions === 'string') {
                userId = userIdOrOptions;
                options = undefined;
            }
            else {
                userId = userIdOrOptions === null || userIdOrOptions === void 0 ? void 0 : userIdOrOptions.userId;
                options = userIdOrOptions;
            }
        }
        return (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.returnWrapper)(this._init((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, options), { userId: userId, apiKey: apiKey })));
    };
    AmplitudeBrowser.prototype._init = function (options) {
        var _a, _b;
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var browserOptions, connector, attributionTrackingOptions, webAttribution;
            var _this = this;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        // Step 1: Block concurrent initialization
                        if (this.initializing) {
                            return [2 /*return*/];
                        }
                        this.initializing = true;
                        return [4 /*yield*/, (0,_config__WEBPACK_IMPORTED_MODULE_2__.useBrowserConfig)(options.apiKey, options, this)];
                    case 1:
                        browserOptions = _c.sent();
                        return [4 /*yield*/, _super.prototype._init.call(this, browserOptions)];
                    case 2:
                        _c.sent();
                        // Step 3: Set session ID
                        // Priority 1: `options.sessionId`
                        // Priority 2: last known sessionId from user identity storage
                        // Default: `Date.now()`
                        // Session ID is handled differently than device ID and user ID due to session events
                        this.setSessionId((_b = (_a = options.sessionId) !== null && _a !== void 0 ? _a : this.config.sessionId) !== null && _b !== void 0 ? _b : Date.now());
                        connector = (0,_amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_3__.getAnalyticsConnector)(options.instanceName);
                        connector.identityStore.setIdentity({
                            userId: this.config.userId,
                            deviceId: this.config.deviceId,
                        });
                        // Step 4: Install plugins
                        // Do not track any events before this
                        return [4 /*yield*/, this.add(new _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_4__.Destination()).promise];
                    case 3:
                        // Step 4: Install plugins
                        // Do not track any events before this
                        _c.sent();
                        return [4 /*yield*/, this.add(new _plugins_context__WEBPACK_IMPORTED_MODULE_5__.Context()).promise];
                    case 4:
                        _c.sent();
                        return [4 /*yield*/, this.add(new _amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_6__.IdentityEventSender()).promise];
                    case 5:
                        _c.sent();
                        // Notify if DET is enabled
                        (0,_det_notification__WEBPACK_IMPORTED_MODULE_7__.detNotify)(this.config);
                        if (!(0,_amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_8__.isFileDownloadTrackingEnabled)(this.config.defaultTracking)) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.add((0,_plugins_file_download_tracking__WEBPACK_IMPORTED_MODULE_9__.fileDownloadTracking)()).promise];
                    case 6:
                        _c.sent();
                        _c.label = 7;
                    case 7:
                        if (!(0,_amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_8__.isFormInteractionTrackingEnabled)(this.config.defaultTracking)) return [3 /*break*/, 9];
                        return [4 /*yield*/, this.add((0,_plugins_form_interaction_tracking__WEBPACK_IMPORTED_MODULE_10__.formInteractionTracking)()).promise];
                    case 8:
                        _c.sent();
                        _c.label = 9;
                    case 9:
                        if (!(0,_amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_8__.isAttributionTrackingEnabled)(this.config.defaultTracking)) return [3 /*break*/, 11];
                        attributionTrackingOptions = (0,_amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_8__.getAttributionTrackingConfig)(this.config);
                        webAttribution = (0,_amplitude_plugin_web_attribution_browser__WEBPACK_IMPORTED_MODULE_11__.webAttributionPlugin)(attributionTrackingOptions);
                        return [4 /*yield*/, this.add(webAttribution).promise];
                    case 10:
                        _c.sent();
                        _c.label = 11;
                    case 11: 
                    // Add page view plugin
                    return [4 /*yield*/, this.add((0,_amplitude_plugin_page_view_tracking_browser__WEBPACK_IMPORTED_MODULE_12__.pageViewTrackingPlugin)((0,_amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_8__.getPageViewTrackingConfig)(this.config))).promise];
                    case 12:
                        // Add page view plugin
                        _c.sent();
                        this.initializing = false;
                        // Step 6: Run queued dispatch functions
                        return [4 /*yield*/, this.runQueuedFunctions('dispatchQ')];
                    case 13:
                        // Step 6: Run queued dispatch functions
                        _c.sent();
                        // Step 7: Add the event receiver after running remaining queued functions.
                        connector.eventBridge.setEventReceiver(function (event) {
                            void _this.track(event.eventType, event.eventProperties);
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    AmplitudeBrowser.prototype.getUserId = function () {
        var _a;
        return (_a = this.config) === null || _a === void 0 ? void 0 : _a.userId;
    };
    AmplitudeBrowser.prototype.setUserId = function (userId) {
        if (!this.config) {
            this.q.push(this.setUserId.bind(this, userId));
            return;
        }
        if (userId !== this.config.userId || userId === undefined) {
            this.config.userId = userId;
            (0,_amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_3__.setConnectorUserId)(userId, this.config.instanceName);
        }
    };
    AmplitudeBrowser.prototype.getDeviceId = function () {
        var _a;
        return (_a = this.config) === null || _a === void 0 ? void 0 : _a.deviceId;
    };
    AmplitudeBrowser.prototype.setDeviceId = function (deviceId) {
        if (!this.config) {
            this.q.push(this.setDeviceId.bind(this, deviceId));
            return;
        }
        this.config.deviceId = deviceId;
        (0,_amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_3__.setConnectorDeviceId)(deviceId, this.config.instanceName);
    };
    AmplitudeBrowser.prototype.reset = function () {
        this.setDeviceId((0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_13__.UUID)());
        this.setUserId(undefined);
    };
    AmplitudeBrowser.prototype.getSessionId = function () {
        var _a;
        return (_a = this.config) === null || _a === void 0 ? void 0 : _a.sessionId;
    };
    AmplitudeBrowser.prototype.setSessionId = function (sessionId) {
        var _a;
        if (!this.config) {
            this.q.push(this.setSessionId.bind(this, sessionId));
            return;
        }
        // Prevents starting a new session with the same session ID
        if (sessionId === this.config.sessionId) {
            return;
        }
        var previousSessionId = this.getSessionId();
        var lastEventTime = this.config.lastEventTime;
        var lastEventId = (_a = this.config.lastEventId) !== null && _a !== void 0 ? _a : -1;
        this.config.sessionId = sessionId;
        this.config.lastEventTime = undefined;
        if ((0,_amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_8__.isSessionTrackingEnabled)(this.config.defaultTracking)) {
            if (previousSessionId && lastEventTime) {
                this.track(_constants__WEBPACK_IMPORTED_MODULE_14__.DEFAULT_SESSION_END_EVENT, undefined, {
                    device_id: this.previousSessionDeviceId,
                    event_id: ++lastEventId,
                    session_id: previousSessionId,
                    time: lastEventTime + 1,
                    user_id: this.previousSessionUserId,
                });
            }
            this.config.lastEventTime = this.config.sessionId;
            this.track(_constants__WEBPACK_IMPORTED_MODULE_14__.DEFAULT_SESSION_START_EVENT, undefined, {
                event_id: ++lastEventId,
                session_id: this.config.sessionId,
                time: this.config.lastEventTime,
            });
        }
        this.previousSessionDeviceId = this.config.deviceId;
        this.previousSessionUserId = this.config.userId;
    };
    AmplitudeBrowser.prototype.extendSession = function () {
        if (!this.config) {
            this.q.push(this.extendSession.bind(this));
            return;
        }
        this.config.lastEventTime = Date.now();
    };
    AmplitudeBrowser.prototype.setTransport = function (transport) {
        if (!this.config) {
            this.q.push(this.setTransport.bind(this, transport));
            return;
        }
        this.config.transportProvider = (0,_config__WEBPACK_IMPORTED_MODULE_2__.createTransport)(transport);
    };
    AmplitudeBrowser.prototype.identify = function (identify, eventOptions) {
        if ((0,_utils_snippet_helper__WEBPACK_IMPORTED_MODULE_15__.isInstanceProxy)(identify)) {
            var queue = identify._q;
            identify._q = [];
            identify = (0,_utils_snippet_helper__WEBPACK_IMPORTED_MODULE_15__.convertProxyObjectToRealObject)(new _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_16__.Identify(), queue);
        }
        if (eventOptions === null || eventOptions === void 0 ? void 0 : eventOptions.user_id) {
            this.setUserId(eventOptions.user_id);
        }
        if (eventOptions === null || eventOptions === void 0 ? void 0 : eventOptions.device_id) {
            this.setDeviceId(eventOptions.device_id);
        }
        return _super.prototype.identify.call(this, identify, eventOptions);
    };
    AmplitudeBrowser.prototype.groupIdentify = function (groupType, groupName, identify, eventOptions) {
        if ((0,_utils_snippet_helper__WEBPACK_IMPORTED_MODULE_15__.isInstanceProxy)(identify)) {
            var queue = identify._q;
            identify._q = [];
            identify = (0,_utils_snippet_helper__WEBPACK_IMPORTED_MODULE_15__.convertProxyObjectToRealObject)(new _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_16__.Identify(), queue);
        }
        return _super.prototype.groupIdentify.call(this, groupType, groupName, identify, eventOptions);
    };
    AmplitudeBrowser.prototype.revenue = function (revenue, eventOptions) {
        if ((0,_utils_snippet_helper__WEBPACK_IMPORTED_MODULE_15__.isInstanceProxy)(revenue)) {
            var queue = revenue._q;
            revenue._q = [];
            revenue = (0,_utils_snippet_helper__WEBPACK_IMPORTED_MODULE_15__.convertProxyObjectToRealObject)(new _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_17__.Revenue(), queue);
        }
        return _super.prototype.revenue.call(this, revenue, eventOptions);
    };
    AmplitudeBrowser.prototype.process = function (event) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var currentTime, lastEventTime, timeSinceLastEvent;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                currentTime = Date.now();
                lastEventTime = this.config.lastEventTime || Date.now();
                timeSinceLastEvent = currentTime - lastEventTime;
                if (event.event_type !== _constants__WEBPACK_IMPORTED_MODULE_14__.DEFAULT_SESSION_START_EVENT &&
                    event.event_type !== _constants__WEBPACK_IMPORTED_MODULE_14__.DEFAULT_SESSION_END_EVENT &&
                    (!event.session_id || event.session_id === this.getSessionId()) &&
                    timeSinceLastEvent > this.config.sessionTimeout) {
                    this.setSessionId(currentTime);
                }
                return [2 /*return*/, _super.prototype.process.call(this, event)];
            });
        });
    };
    return AmplitudeBrowser;
}(_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_18__.AmplitudeCore));

//# sourceMappingURL=browser-client.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-browser/lib/esm/config.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-browser/lib/esm/config.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BrowserConfig": () => (/* binding */ BrowserConfig),
/* harmony export */   "createCookieStorage": () => (/* binding */ createCookieStorage),
/* harmony export */   "createTransport": () => (/* binding */ createTransport),
/* harmony export */   "getTopLevelDomain": () => (/* binding */ getTopLevelDomain),
/* harmony export */   "useBrowserConfig": () => (/* binding */ useBrowserConfig)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @amplitude/analytics-types */ "./node_modules/@amplitude/analytics-types/lib/esm/logger.js");
/* harmony import */ var _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @amplitude/analytics-core */ "./node_modules/@amplitude/analytics-core/lib/esm/storage/memory.js");
/* harmony import */ var _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @amplitude/analytics-core */ "./node_modules/@amplitude/analytics-core/lib/esm/logger.js");
/* harmony import */ var _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @amplitude/analytics-core */ "./node_modules/@amplitude/analytics-core/lib/esm/config.js");
/* harmony import */ var _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @amplitude/analytics-core */ "./node_modules/@amplitude/analytics-core/lib/esm/utils/uuid.js");
/* harmony import */ var _amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @amplitude/analytics-client-common */ "./node_modules/@amplitude/analytics-client-common/lib/esm/cookie-name.js");
/* harmony import */ var _amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @amplitude/analytics-client-common */ "./node_modules/@amplitude/analytics-client-common/lib/esm/query-params.js");
/* harmony import */ var _amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @amplitude/analytics-client-common */ "./node_modules/@amplitude/analytics-client-common/lib/esm/storage/cookie.js");
/* harmony import */ var _amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @amplitude/analytics-client-common */ "./node_modules/@amplitude/analytics-client-common/lib/esm/transports/fetch.js");
/* harmony import */ var _storage_local_storage__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./storage/local-storage */ "./node_modules/@amplitude/analytics-browser/lib/esm/storage/local-storage.js");
/* harmony import */ var _storage_session_storage__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./storage/session-storage */ "./node_modules/@amplitude/analytics-browser/lib/esm/storage/session-storage.js");
/* harmony import */ var _transports_xhr__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./transports/xhr */ "./node_modules/@amplitude/analytics-browser/lib/esm/transports/xhr.js");
/* harmony import */ var _transports_send_beacon__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./transports/send-beacon */ "./node_modules/@amplitude/analytics-browser/lib/esm/transports/send-beacon.js");
/* harmony import */ var _cookie_migration__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./cookie-migration */ "./node_modules/@amplitude/analytics-browser/lib/esm/cookie-migration/index.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./node_modules/@amplitude/analytics-browser/lib/esm/constants.js");










// Exported for testing purposes only. Do not expose to public interface.
var BrowserConfig = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(BrowserConfig, _super);
    function BrowserConfig(apiKey, appVersion, cookieStorage, cookieOptions, defaultTracking, deviceId, flushIntervalMillis, flushMaxRetries, flushQueueSize, identityStorage, ingestionMetadata, instanceName, lastEventId, lastEventTime, loggerProvider, logLevel, minIdLength, optOut, partnerId, plan, serverUrl, serverZone, sessionId, sessionTimeout, storageProvider, trackingOptions, transport, useBatch, userId) {
        if (cookieStorage === void 0) { cookieStorage = new _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.MemoryStorage(); }
        if (cookieOptions === void 0) { cookieOptions = {
            domain: '',
            expiration: 365,
            sameSite: 'Lax',
            secure: false,
            upgrade: true,
        }; }
        if (defaultTracking === void 0) { defaultTracking = true; }
        if (flushIntervalMillis === void 0) { flushIntervalMillis = 1000; }
        if (flushMaxRetries === void 0) { flushMaxRetries = 5; }
        if (flushQueueSize === void 0) { flushQueueSize = 30; }
        if (identityStorage === void 0) { identityStorage = _constants__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_IDENTITY_STORAGE; }
        if (loggerProvider === void 0) { loggerProvider = new _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_3__.Logger(); }
        if (logLevel === void 0) { logLevel = _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_4__.LogLevel.Warn; }
        if (optOut === void 0) { optOut = false; }
        if (serverUrl === void 0) { serverUrl = ''; }
        if (serverZone === void 0) { serverZone = _constants__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_SERVER_ZONE; }
        if (sessionTimeout === void 0) { sessionTimeout = 30 * 60 * 1000; }
        if (storageProvider === void 0) { storageProvider = new _storage_local_storage__WEBPACK_IMPORTED_MODULE_5__.LocalStorage({ loggerProvider: loggerProvider }); }
        if (trackingOptions === void 0) { trackingOptions = {
            ipAddress: true,
            language: true,
            platform: true,
        }; }
        if (transport === void 0) { transport = 'fetch'; }
        if (useBatch === void 0) { useBatch = false; }
        var _this = _super.call(this, { apiKey: apiKey, storageProvider: storageProvider, transportProvider: createTransport(transport) }) || this;
        _this.apiKey = apiKey;
        _this.appVersion = appVersion;
        _this.cookieOptions = cookieOptions;
        _this.defaultTracking = defaultTracking;
        _this.flushIntervalMillis = flushIntervalMillis;
        _this.flushMaxRetries = flushMaxRetries;
        _this.flushQueueSize = flushQueueSize;
        _this.identityStorage = identityStorage;
        _this.ingestionMetadata = ingestionMetadata;
        _this.instanceName = instanceName;
        _this.loggerProvider = loggerProvider;
        _this.logLevel = logLevel;
        _this.minIdLength = minIdLength;
        _this.partnerId = partnerId;
        _this.plan = plan;
        _this.serverUrl = serverUrl;
        _this.serverZone = serverZone;
        _this.sessionTimeout = sessionTimeout;
        _this.storageProvider = storageProvider;
        _this.trackingOptions = trackingOptions;
        _this.transport = transport;
        _this.useBatch = useBatch;
        _this._optOut = false;
        _this._cookieStorage = cookieStorage;
        _this.deviceId = deviceId;
        _this.lastEventId = lastEventId;
        _this.lastEventTime = lastEventTime;
        _this.optOut = optOut;
        _this.sessionId = sessionId;
        _this.userId = userId;
        _this.loggerProvider.enable(_this.logLevel);
        return _this;
    }
    Object.defineProperty(BrowserConfig.prototype, "cookieStorage", {
        get: function () {
            return this._cookieStorage;
        },
        set: function (cookieStorage) {
            if (this._cookieStorage !== cookieStorage) {
                this._cookieStorage = cookieStorage;
                this.updateStorage();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserConfig.prototype, "deviceId", {
        get: function () {
            return this._deviceId;
        },
        set: function (deviceId) {
            if (this._deviceId !== deviceId) {
                this._deviceId = deviceId;
                this.updateStorage();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserConfig.prototype, "userId", {
        get: function () {
            return this._userId;
        },
        set: function (userId) {
            if (this._userId !== userId) {
                this._userId = userId;
                this.updateStorage();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserConfig.prototype, "sessionId", {
        get: function () {
            return this._sessionId;
        },
        set: function (sessionId) {
            if (this._sessionId !== sessionId) {
                this._sessionId = sessionId;
                this.updateStorage();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserConfig.prototype, "optOut", {
        get: function () {
            return this._optOut;
        },
        set: function (optOut) {
            if (this._optOut !== optOut) {
                this._optOut = optOut;
                this.updateStorage();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserConfig.prototype, "lastEventTime", {
        get: function () {
            return this._lastEventTime;
        },
        set: function (lastEventTime) {
            if (this._lastEventTime !== lastEventTime) {
                this._lastEventTime = lastEventTime;
                this.updateStorage();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserConfig.prototype, "lastEventId", {
        get: function () {
            return this._lastEventId;
        },
        set: function (lastEventId) {
            if (this._lastEventId !== lastEventId) {
                this._lastEventId = lastEventId;
                this.updateStorage();
            }
        },
        enumerable: false,
        configurable: true
    });
    BrowserConfig.prototype.updateStorage = function () {
        var cache = {
            deviceId: this._deviceId,
            userId: this._userId,
            sessionId: this._sessionId,
            optOut: this._optOut,
            lastEventTime: this._lastEventTime,
            lastEventId: this._lastEventId,
        };
        void this.cookieStorage.set((0,_amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_6__.getCookieName)(this.apiKey), cache);
    };
    return BrowserConfig;
}(_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_7__.Config));

var useBrowserConfig = function (apiKey, options, amplitudeInstance) {
    if (options === void 0) { options = {}; }
    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(void 0, void 0, void 0, function () {
        var identityStorage, cookieOptions, _a, _b, _c, cookieStorage, legacyCookies, previousCookies, queryParams, deviceId, lastEventId, lastEventTime, optOut, sessionId, userId, trackingOptions;
        var _d;
        var _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_3) {
            switch (_3.label) {
                case 0:
                    identityStorage = options.identityStorage || _constants__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_IDENTITY_STORAGE;
                    _a = [(0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, options.cookieOptions)];
                    _d = {};
                    if (!(identityStorage !== _constants__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_IDENTITY_STORAGE)) return [3 /*break*/, 1];
                    _b = '';
                    return [3 /*break*/, 5];
                case 1:
                    if (!((_f = (_e = options.cookieOptions) === null || _e === void 0 ? void 0 : _e.domain) !== null && _f !== void 0)) return [3 /*break*/, 2];
                    _c = _f;
                    return [3 /*break*/, 4];
                case 2: return [4 /*yield*/, getTopLevelDomain()];
                case 3:
                    _c = (_3.sent());
                    _3.label = 4;
                case 4:
                    _b = _c;
                    _3.label = 5;
                case 5:
                    cookieOptions = tslib__WEBPACK_IMPORTED_MODULE_0__.__assign.apply(void 0, _a.concat([(_d.domain = _b, _d.expiration = 365, _d.sameSite = 'Lax', _d.secure = false, _d.upgrade = true, _d)]));
                    cookieStorage = createCookieStorage(options.identityStorage, cookieOptions);
                    return [4 /*yield*/, (0,_cookie_migration__WEBPACK_IMPORTED_MODULE_8__.parseLegacyCookies)(apiKey, cookieStorage, (_h = (_g = options.cookieOptions) === null || _g === void 0 ? void 0 : _g.upgrade) !== null && _h !== void 0 ? _h : true)];
                case 6:
                    legacyCookies = _3.sent();
                    return [4 /*yield*/, cookieStorage.get((0,_amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_6__.getCookieName)(apiKey))];
                case 7:
                    previousCookies = _3.sent();
                    queryParams = (0,_amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_9__.getQueryParams)();
                    deviceId = (_m = (_l = (_k = (_j = options.deviceId) !== null && _j !== void 0 ? _j : queryParams.deviceId) !== null && _k !== void 0 ? _k : previousCookies === null || previousCookies === void 0 ? void 0 : previousCookies.deviceId) !== null && _l !== void 0 ? _l : legacyCookies.deviceId) !== null && _m !== void 0 ? _m : (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_10__.UUID)();
                    lastEventId = (_o = previousCookies === null || previousCookies === void 0 ? void 0 : previousCookies.lastEventId) !== null && _o !== void 0 ? _o : legacyCookies.lastEventId;
                    lastEventTime = (_p = previousCookies === null || previousCookies === void 0 ? void 0 : previousCookies.lastEventTime) !== null && _p !== void 0 ? _p : legacyCookies.lastEventTime;
                    optOut = (_r = (_q = options.optOut) !== null && _q !== void 0 ? _q : previousCookies === null || previousCookies === void 0 ? void 0 : previousCookies.optOut) !== null && _r !== void 0 ? _r : legacyCookies.optOut;
                    sessionId = (_s = previousCookies === null || previousCookies === void 0 ? void 0 : previousCookies.sessionId) !== null && _s !== void 0 ? _s : legacyCookies.sessionId;
                    userId = (_u = (_t = options.userId) !== null && _t !== void 0 ? _t : previousCookies === null || previousCookies === void 0 ? void 0 : previousCookies.userId) !== null && _u !== void 0 ? _u : legacyCookies.userId;
                    amplitudeInstance.previousSessionDeviceId = (_v = previousCookies === null || previousCookies === void 0 ? void 0 : previousCookies.deviceId) !== null && _v !== void 0 ? _v : legacyCookies.deviceId;
                    amplitudeInstance.previousSessionUserId = (_w = previousCookies === null || previousCookies === void 0 ? void 0 : previousCookies.userId) !== null && _w !== void 0 ? _w : legacyCookies.userId;
                    trackingOptions = {
                        ipAddress: (_y = (_x = options.trackingOptions) === null || _x === void 0 ? void 0 : _x.ipAddress) !== null && _y !== void 0 ? _y : true,
                        language: (_0 = (_z = options.trackingOptions) === null || _z === void 0 ? void 0 : _z.language) !== null && _0 !== void 0 ? _0 : true,
                        platform: (_2 = (_1 = options.trackingOptions) === null || _1 === void 0 ? void 0 : _1.platform) !== null && _2 !== void 0 ? _2 : true,
                    };
                    return [2 /*return*/, new BrowserConfig(apiKey, options.appVersion, cookieStorage, cookieOptions, options.defaultTracking, deviceId, options.flushIntervalMillis, options.flushMaxRetries, options.flushQueueSize, identityStorage, options.ingestionMetadata, options.instanceName, lastEventId, lastEventTime, options.loggerProvider, options.logLevel, options.minIdLength, optOut, options.partnerId, options.plan, options.serverUrl, options.serverZone, sessionId, options.sessionTimeout, options.storageProvider, trackingOptions, options.transport, options.useBatch, userId)];
            }
        });
    });
};
var createCookieStorage = function (identityStorage, cookieOptions) {
    if (identityStorage === void 0) { identityStorage = _constants__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_IDENTITY_STORAGE; }
    if (cookieOptions === void 0) { cookieOptions = {}; }
    switch (identityStorage) {
        case 'localStorage':
            return new _storage_local_storage__WEBPACK_IMPORTED_MODULE_5__.LocalStorage();
        case 'sessionStorage':
            return new _storage_session_storage__WEBPACK_IMPORTED_MODULE_11__.SessionStorage();
        case 'none':
            return new _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.MemoryStorage();
        case 'cookie':
        default:
            return new _amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_12__.CookieStorage((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, cookieOptions), { expirationDays: cookieOptions.expiration }));
    }
};
var createTransport = function (transport) {
    if (transport === 'xhr') {
        return new _transports_xhr__WEBPACK_IMPORTED_MODULE_13__.XHRTransport();
    }
    if (transport === 'beacon') {
        return new _transports_send_beacon__WEBPACK_IMPORTED_MODULE_14__.SendBeaconTransport();
    }
    return new _amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_15__.FetchTransport();
};
var getTopLevelDomain = function (url) { return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(void 0, void 0, void 0, function () {
    var host, parts, levels, storageKey, i, i, domain, options, storage, value;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, new _amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_12__.CookieStorage().isEnabled()];
            case 1:
                if (!(_a.sent()) || (!url && typeof location === 'undefined')) {
                    return [2 /*return*/, ''];
                }
                host = url !== null && url !== void 0 ? url : location.hostname;
                parts = host.split('.');
                levels = [];
                storageKey = 'AMP_TLDTEST';
                for (i = parts.length - 2; i >= 0; --i) {
                    levels.push(parts.slice(i).join('.'));
                }
                i = 0;
                _a.label = 2;
            case 2:
                if (!(i < levels.length)) return [3 /*break*/, 7];
                domain = levels[i];
                options = { domain: '.' + domain };
                storage = new _amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_12__.CookieStorage(options);
                return [4 /*yield*/, storage.set(storageKey, 1)];
            case 3:
                _a.sent();
                return [4 /*yield*/, storage.get(storageKey)];
            case 4:
                value = _a.sent();
                if (!value) return [3 /*break*/, 6];
                return [4 /*yield*/, storage.remove(storageKey)];
            case 5:
                _a.sent();
                return [2 /*return*/, '.' + domain];
            case 6:
                i++;
                return [3 /*break*/, 2];
            case 7: return [2 /*return*/, ''];
        }
    });
}); };
//# sourceMappingURL=config.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-browser/lib/esm/constants.js":
/*!************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-browser/lib/esm/constants.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DEFAULT_EVENT_PREFIX": () => (/* binding */ DEFAULT_EVENT_PREFIX),
/* harmony export */   "DEFAULT_FILE_DOWNLOAD_EVENT": () => (/* binding */ DEFAULT_FILE_DOWNLOAD_EVENT),
/* harmony export */   "DEFAULT_FORM_START_EVENT": () => (/* binding */ DEFAULT_FORM_START_EVENT),
/* harmony export */   "DEFAULT_FORM_SUBMIT_EVENT": () => (/* binding */ DEFAULT_FORM_SUBMIT_EVENT),
/* harmony export */   "DEFAULT_IDENTITY_STORAGE": () => (/* binding */ DEFAULT_IDENTITY_STORAGE),
/* harmony export */   "DEFAULT_PAGE_VIEW_EVENT": () => (/* binding */ DEFAULT_PAGE_VIEW_EVENT),
/* harmony export */   "DEFAULT_SERVER_ZONE": () => (/* binding */ DEFAULT_SERVER_ZONE),
/* harmony export */   "DEFAULT_SESSION_END_EVENT": () => (/* binding */ DEFAULT_SESSION_END_EVENT),
/* harmony export */   "DEFAULT_SESSION_START_EVENT": () => (/* binding */ DEFAULT_SESSION_START_EVENT),
/* harmony export */   "FILE_EXTENSION": () => (/* binding */ FILE_EXTENSION),
/* harmony export */   "FILE_NAME": () => (/* binding */ FILE_NAME),
/* harmony export */   "FORM_DESTINATION": () => (/* binding */ FORM_DESTINATION),
/* harmony export */   "FORM_ID": () => (/* binding */ FORM_ID),
/* harmony export */   "FORM_NAME": () => (/* binding */ FORM_NAME),
/* harmony export */   "LINK_ID": () => (/* binding */ LINK_ID),
/* harmony export */   "LINK_TEXT": () => (/* binding */ LINK_TEXT),
/* harmony export */   "LINK_URL": () => (/* binding */ LINK_URL)
/* harmony export */ });
var DEFAULT_EVENT_PREFIX = '[Amplitude]';
var DEFAULT_PAGE_VIEW_EVENT = "".concat(DEFAULT_EVENT_PREFIX, " Page Viewed");
var DEFAULT_FORM_START_EVENT = "".concat(DEFAULT_EVENT_PREFIX, " Form Started");
var DEFAULT_FORM_SUBMIT_EVENT = "".concat(DEFAULT_EVENT_PREFIX, " Form Submitted");
var DEFAULT_FILE_DOWNLOAD_EVENT = "".concat(DEFAULT_EVENT_PREFIX, " File Downloaded");
var DEFAULT_SESSION_START_EVENT = 'session_start';
var DEFAULT_SESSION_END_EVENT = 'session_end';
var FILE_EXTENSION = "".concat(DEFAULT_EVENT_PREFIX, " File Extension");
var FILE_NAME = "".concat(DEFAULT_EVENT_PREFIX, " File Name");
var LINK_ID = "".concat(DEFAULT_EVENT_PREFIX, " Link ID");
var LINK_TEXT = "".concat(DEFAULT_EVENT_PREFIX, " Link Text");
var LINK_URL = "".concat(DEFAULT_EVENT_PREFIX, " Link URL");
var FORM_ID = "".concat(DEFAULT_EVENT_PREFIX, " Form ID");
var FORM_NAME = "".concat(DEFAULT_EVENT_PREFIX, " Form Name");
var FORM_DESTINATION = "".concat(DEFAULT_EVENT_PREFIX, " Form Destination");
var DEFAULT_IDENTITY_STORAGE = 'cookie';
var DEFAULT_SERVER_ZONE = 'US';
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-browser/lib/esm/cookie-migration/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-browser/lib/esm/cookie-migration/index.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "decode": () => (/* binding */ decode),
/* harmony export */   "parseLegacyCookies": () => (/* binding */ parseLegacyCookies),
/* harmony export */   "parseTime": () => (/* binding */ parseTime)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @amplitude/analytics-client-common */ "./node_modules/@amplitude/analytics-client-common/lib/esm/cookie-name.js");


var parseLegacyCookies = function (apiKey, cookieStorage, deleteLegacyCookies) {
    if (deleteLegacyCookies === void 0) { deleteLegacyCookies = true; }
    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(void 0, void 0, void 0, function () {
        var cookieName, cookies, _a, deviceId, userId, optOut, sessionId, lastEventTime, lastEventId;
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_b) {
            switch (_b.label) {
                case 0:
                    cookieName = (0,_amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_1__.getOldCookieName)(apiKey);
                    return [4 /*yield*/, cookieStorage.getRaw(cookieName)];
                case 1:
                    cookies = _b.sent();
                    if (!cookies) {
                        return [2 /*return*/, {
                                optOut: false,
                            }];
                    }
                    if (!deleteLegacyCookies) return [3 /*break*/, 3];
                    return [4 /*yield*/, cookieStorage.remove(cookieName)];
                case 2:
                    _b.sent();
                    _b.label = 3;
                case 3:
                    _a = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(cookies.split('.'), 6), deviceId = _a[0], userId = _a[1], optOut = _a[2], sessionId = _a[3], lastEventTime = _a[4], lastEventId = _a[5];
                    return [2 /*return*/, {
                            deviceId: deviceId,
                            userId: decode(userId),
                            sessionId: parseTime(sessionId),
                            lastEventId: parseTime(lastEventId),
                            lastEventTime: parseTime(lastEventTime),
                            optOut: Boolean(optOut),
                        }];
            }
        });
    });
};
var parseTime = function (num) {
    var integer = parseInt(num, 32);
    if (isNaN(integer)) {
        return undefined;
    }
    return integer;
};
var decode = function (value) {
    if (!atob || !escape || !value) {
        return undefined;
    }
    try {
        return decodeURIComponent(escape(atob(value)));
    }
    catch (_a) {
        return undefined;
    }
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-browser/lib/esm/det-notification.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-browser/lib/esm/det-notification.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "detNotify": () => (/* binding */ detNotify),
/* harmony export */   "resetNotify": () => (/* binding */ resetNotify)
/* harmony export */ });
/* harmony import */ var _amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @amplitude/analytics-client-common */ "./node_modules/@amplitude/analytics-client-common/lib/esm/default-tracking.js");
/* harmony import */ var _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @amplitude/analytics-types */ "./node_modules/@amplitude/analytics-types/lib/esm/logger.js");


var notified = false;
var detNotify = function (config) {
    if (notified) {
        return;
    }
    var enabledTracking = [
        (0,_amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_0__.isPageViewTrackingEnabled)(config.defaultTracking) ? 'Page Views' : '',
        (0,_amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_0__.isSessionTrackingEnabled)(config.defaultTracking) ? 'Sessions' : '',
        (0,_amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_0__.isFileDownloadTrackingEnabled)(config.defaultTracking) ? 'File Downloads' : '',
        (0,_amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_0__.isFormInteractionTrackingEnabled)(config.defaultTracking) ? 'Form Interactions' : '',
    ].filter(Boolean);
    var enabledTrackingString = enabledTracking.join(', ');
    if (enabledTracking.length) {
        var message = "Your Amplitude instance is configured to track ".concat(enabledTrackingString, ". Visit https://www.docs.developers.amplitude.com/data/sdks/browser-2/#tracking-default-events for more details.");
        config.loggerProvider.log(message);
        /* istanbul ignore if */
        if (config.logLevel < _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.Verbose) {
            console.log(message);
        }
    }
    notified = true;
};
/**
 * @private
 * This function is meant for testing purposes only
 */
var resetNotify = function () {
    notified = false;
};
//# sourceMappingURL=det-notification.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-browser/lib/esm/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-browser/lib/esm/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Identify": () => (/* reexport safe */ _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_3__.Identify),
/* harmony export */   "Revenue": () => (/* reexport safe */ _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_2__.Revenue),
/* harmony export */   "Types": () => (/* reexport module object */ _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_4__),
/* harmony export */   "add": () => (/* binding */ add),
/* harmony export */   "createInstance": () => (/* reexport safe */ _browser_client_factory__WEBPACK_IMPORTED_MODULE_0__.createInstance),
/* harmony export */   "extendSession": () => (/* binding */ extendSession),
/* harmony export */   "flush": () => (/* binding */ flush),
/* harmony export */   "getDeviceId": () => (/* binding */ getDeviceId),
/* harmony export */   "getSessionId": () => (/* binding */ getSessionId),
/* harmony export */   "getUserId": () => (/* binding */ getUserId),
/* harmony export */   "groupIdentify": () => (/* binding */ groupIdentify),
/* harmony export */   "identify": () => (/* binding */ identify),
/* harmony export */   "init": () => (/* binding */ init),
/* harmony export */   "logEvent": () => (/* binding */ logEvent),
/* harmony export */   "remove": () => (/* binding */ remove),
/* harmony export */   "reset": () => (/* binding */ reset),
/* harmony export */   "revenue": () => (/* binding */ revenue),
/* harmony export */   "runQueuedFunctions": () => (/* reexport safe */ _utils_snippet_helper__WEBPACK_IMPORTED_MODULE_1__.runQueuedFunctions),
/* harmony export */   "setDeviceId": () => (/* binding */ setDeviceId),
/* harmony export */   "setGroup": () => (/* binding */ setGroup),
/* harmony export */   "setOptOut": () => (/* binding */ setOptOut),
/* harmony export */   "setSessionId": () => (/* binding */ setSessionId),
/* harmony export */   "setTransport": () => (/* binding */ setTransport),
/* harmony export */   "setUserId": () => (/* binding */ setUserId),
/* harmony export */   "track": () => (/* binding */ track)
/* harmony export */ });
/* harmony import */ var _browser_client_factory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./browser-client-factory */ "./node_modules/@amplitude/analytics-browser/lib/esm/browser-client-factory.js");
/* harmony import */ var _utils_snippet_helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/snippet-helper */ "./node_modules/@amplitude/analytics-browser/lib/esm/utils/snippet-helper.js");
/* harmony import */ var _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @amplitude/analytics-core */ "./node_modules/@amplitude/analytics-core/lib/esm/revenue.js");
/* harmony import */ var _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @amplitude/analytics-core */ "./node_modules/@amplitude/analytics-core/lib/esm/identify.js");
/* harmony import */ var _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @amplitude/analytics-types */ "./node_modules/@amplitude/analytics-types/lib/esm/index.js");
/* eslint-disable @typescript-eslint/unbound-method */


var add = _browser_client_factory__WEBPACK_IMPORTED_MODULE_0__["default"].add, extendSession = _browser_client_factory__WEBPACK_IMPORTED_MODULE_0__["default"].extendSession, flush = _browser_client_factory__WEBPACK_IMPORTED_MODULE_0__["default"].flush, getDeviceId = _browser_client_factory__WEBPACK_IMPORTED_MODULE_0__["default"].getDeviceId, getSessionId = _browser_client_factory__WEBPACK_IMPORTED_MODULE_0__["default"].getSessionId, getUserId = _browser_client_factory__WEBPACK_IMPORTED_MODULE_0__["default"].getUserId, groupIdentify = _browser_client_factory__WEBPACK_IMPORTED_MODULE_0__["default"].groupIdentify, identify = _browser_client_factory__WEBPACK_IMPORTED_MODULE_0__["default"].identify, init = _browser_client_factory__WEBPACK_IMPORTED_MODULE_0__["default"].init, logEvent = _browser_client_factory__WEBPACK_IMPORTED_MODULE_0__["default"].logEvent, remove = _browser_client_factory__WEBPACK_IMPORTED_MODULE_0__["default"].remove, reset = _browser_client_factory__WEBPACK_IMPORTED_MODULE_0__["default"].reset, revenue = _browser_client_factory__WEBPACK_IMPORTED_MODULE_0__["default"].revenue, setDeviceId = _browser_client_factory__WEBPACK_IMPORTED_MODULE_0__["default"].setDeviceId, setGroup = _browser_client_factory__WEBPACK_IMPORTED_MODULE_0__["default"].setGroup, setOptOut = _browser_client_factory__WEBPACK_IMPORTED_MODULE_0__["default"].setOptOut, setSessionId = _browser_client_factory__WEBPACK_IMPORTED_MODULE_0__["default"].setSessionId, setTransport = _browser_client_factory__WEBPACK_IMPORTED_MODULE_0__["default"].setTransport, setUserId = _browser_client_factory__WEBPACK_IMPORTED_MODULE_0__["default"].setUserId, track = _browser_client_factory__WEBPACK_IMPORTED_MODULE_0__["default"].track;




//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-browser/lib/esm/plugins/context.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-browser/lib/esm/plugins/context.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Context": () => (/* binding */ Context)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @amplitude/analytics-core */ "./node_modules/@amplitude/analytics-core/lib/esm/utils/uuid.js");
/* harmony import */ var _amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @amplitude/analytics-client-common */ "./node_modules/@amplitude/analytics-client-common/lib/esm/language.js");
/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../version */ "./node_modules/@amplitude/analytics-browser/lib/esm/version.js");




var BROWSER_PLATFORM = 'Web';
var IP_ADDRESS = '$remote';
var Context = /** @class */ (function () {
    function Context() {
        this.name = '@amplitude/plugin-context-browser';
        this.type = 'before';
        this.library = "amplitude-ts/".concat(_version__WEBPACK_IMPORTED_MODULE_0__.VERSION);
        /* istanbul ignore else */
        if (typeof navigator !== 'undefined') {
            this.userAgent = navigator.userAgent;
        }
    }
    Context.prototype.setup = function (config) {
        this.config = config;
        return Promise.resolve(undefined);
    };
    Context.prototype.execute = function (context) {
        var _a, _b;
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            var time, lastEventId, nextEventId, event;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_c) {
                time = new Date().getTime();
                lastEventId = (_a = this.config.lastEventId) !== null && _a !== void 0 ? _a : -1;
                nextEventId = (_b = context.event_id) !== null && _b !== void 0 ? _b : lastEventId + 1;
                this.config.lastEventId = nextEventId;
                if (!context.time) {
                    this.config.lastEventTime = time;
                }
                event = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({ user_id: this.config.userId, device_id: this.config.deviceId, session_id: this.config.sessionId, time: time }, (this.config.appVersion && { app_version: this.config.appVersion })), (this.config.trackingOptions.platform && { platform: BROWSER_PLATFORM })), (this.config.trackingOptions.language && { language: (0,_amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_2__.getLanguage)() })), (this.config.trackingOptions.ipAddress && { ip: IP_ADDRESS })), { insert_id: (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_3__.UUID)(), partner_id: this.config.partnerId, plan: this.config.plan }), (this.config.ingestionMetadata && {
                    ingestion_metadata: {
                        source_name: this.config.ingestionMetadata.sourceName,
                        source_version: this.config.ingestionMetadata.sourceVersion,
                    },
                })), context), { event_id: nextEventId, library: this.library, user_agent: this.userAgent });
                return [2 /*return*/, event];
            });
        });
    };
    return Context;
}());

//# sourceMappingURL=context.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-browser/lib/esm/plugins/file-download-tracking.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-browser/lib/esm/plugins/file-download-tracking.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fileDownloadTracking": () => (/* binding */ fileDownloadTracking)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants */ "./node_modules/@amplitude/analytics-browser/lib/esm/constants.js");


var fileDownloadTracking = function () {
    var observer;
    var eventListeners = [];
    var addEventListener = function (element, type, handler) {
        element.addEventListener(type, handler);
        eventListeners.push({
            element: element,
            type: type,
            handler: handler,
        });
    };
    var removeClickListeners = function () {
        eventListeners.forEach(function (_a) {
            var element = _a.element, type = _a.type, handler = _a.handler;
            /* istanbul ignore next */
            element === null || element === void 0 ? void 0 : element.removeEventListener(type, handler);
        });
        eventListeners = [];
    };
    var name = '@amplitude/plugin-file-download-tracking-browser';
    var type = 'enrichment';
    var setup = function (config, amplitude) { return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(void 0, void 0, void 0, function () {
        var addFileDownloadListener, ext, links;
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
            /* istanbul ignore if */
            if (!amplitude) {
                // TODO: Add required minimum version of @amplitude/analytics-browser
                config.loggerProvider.warn('File download tracking requires a later version of @amplitude/analytics-browser. File download events are not tracked.');
                return [2 /*return*/];
            }
            /* istanbul ignore if */
            if (typeof document === 'undefined') {
                return [2 /*return*/];
            }
            addFileDownloadListener = function (a) {
                var url;
                try {
                    // eslint-disable-next-line no-restricted-globals
                    url = new URL(a.href, window.location.href);
                }
                catch (_a) {
                    /* istanbul ignore next */
                    return;
                }
                var result = ext.exec(url.href);
                var fileExtension = result === null || result === void 0 ? void 0 : result[1];
                if (fileExtension) {
                    addEventListener(a, 'click', function () {
                        var _a;
                        if (fileExtension) {
                            amplitude.track(_constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_FILE_DOWNLOAD_EVENT, (_a = {},
                                _a[_constants__WEBPACK_IMPORTED_MODULE_1__.FILE_EXTENSION] = fileExtension,
                                _a[_constants__WEBPACK_IMPORTED_MODULE_1__.FILE_NAME] = url.pathname,
                                _a[_constants__WEBPACK_IMPORTED_MODULE_1__.LINK_ID] = a.id,
                                _a[_constants__WEBPACK_IMPORTED_MODULE_1__.LINK_TEXT] = a.text,
                                _a[_constants__WEBPACK_IMPORTED_MODULE_1__.LINK_URL] = a.href,
                                _a));
                        }
                    });
                }
            };
            ext = /\.(pdf|xlsx?|docx?|txt|rtf|csv|exe|key|pp(s|t|tx)|7z|pkg|rar|gz|zip|avi|mov|mp4|mpe?g|wmv|midi?|mp3|wav|wma)$/;
            links = Array.from(document.getElementsByTagName('a'));
            links.forEach(addFileDownloadListener);
            // Adds listener to anchor tags added after initial load
            /* istanbul ignore else */
            if (typeof MutationObserver !== 'undefined') {
                observer = new MutationObserver(function (mutations) {
                    mutations.forEach(function (mutation) {
                        mutation.addedNodes.forEach(function (node) {
                            if (node.nodeName === 'A') {
                                addFileDownloadListener(node);
                            }
                            if ('querySelectorAll' in node && typeof node.querySelectorAll === 'function') {
                                Array.from(node.querySelectorAll('a')).map(addFileDownloadListener);
                            }
                        });
                    });
                });
                observer.observe(document.body, {
                    subtree: true,
                    childList: true,
                });
            }
            return [2 /*return*/];
        });
    }); };
    var execute = function (event) { return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(void 0, void 0, void 0, function () { return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
        return [2 /*return*/, event];
    }); }); };
    var teardown = function () { return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(void 0, void 0, void 0, function () {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
            observer === null || observer === void 0 ? void 0 : observer.disconnect();
            removeClickListeners();
            return [2 /*return*/];
        });
    }); };
    return {
        name: name,
        type: type,
        setup: setup,
        execute: execute,
        teardown: teardown,
    };
};
//# sourceMappingURL=file-download-tracking.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-browser/lib/esm/plugins/form-interaction-tracking.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-browser/lib/esm/plugins/form-interaction-tracking.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "formInteractionTracking": () => (/* binding */ formInteractionTracking)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants */ "./node_modules/@amplitude/analytics-browser/lib/esm/constants.js");


var formInteractionTracking = function () {
    var observer;
    var eventListeners = [];
    var addEventListener = function (element, type, handler) {
        element.addEventListener(type, handler);
        eventListeners.push({
            element: element,
            type: type,
            handler: handler,
        });
    };
    var removeClickListeners = function () {
        eventListeners.forEach(function (_a) {
            var element = _a.element, type = _a.type, handler = _a.handler;
            /* istanbul ignore next */
            element === null || element === void 0 ? void 0 : element.removeEventListener(type, handler);
        });
        eventListeners = [];
    };
    var name = '@amplitude/plugin-form-interaction-tracking-browser';
    var type = 'enrichment';
    var setup = function (config, amplitude) { return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(void 0, void 0, void 0, function () {
        var addFormInteractionListener, forms;
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
            /* istanbul ignore if */
            if (!amplitude) {
                // TODO: Add required minimum version of @amplitude/analytics-browser
                config.loggerProvider.warn('Form interaction tracking requires a later version of @amplitude/analytics-browser. Form interaction events are not tracked.');
                return [2 /*return*/];
            }
            /* istanbul ignore if */
            if (typeof document === 'undefined') {
                return [2 /*return*/];
            }
            addFormInteractionListener = function (form) {
                var hasFormChanged = false;
                addEventListener(form, 'change', function () {
                    var _a;
                    if (!hasFormChanged) {
                        amplitude.track(_constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_FORM_START_EVENT, (_a = {},
                            _a[_constants__WEBPACK_IMPORTED_MODULE_1__.FORM_ID] = form.id,
                            _a[_constants__WEBPACK_IMPORTED_MODULE_1__.FORM_NAME] = form.name,
                            _a[_constants__WEBPACK_IMPORTED_MODULE_1__.FORM_DESTINATION] = form.action,
                            _a));
                    }
                    hasFormChanged = true;
                });
                addEventListener(form, 'submit', function () {
                    var _a, _b;
                    if (!hasFormChanged) {
                        amplitude.track(_constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_FORM_START_EVENT, (_a = {},
                            _a[_constants__WEBPACK_IMPORTED_MODULE_1__.FORM_ID] = form.id,
                            _a[_constants__WEBPACK_IMPORTED_MODULE_1__.FORM_NAME] = form.name,
                            _a[_constants__WEBPACK_IMPORTED_MODULE_1__.FORM_DESTINATION] = form.action,
                            _a));
                    }
                    amplitude.track(_constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_FORM_SUBMIT_EVENT, (_b = {},
                        _b[_constants__WEBPACK_IMPORTED_MODULE_1__.FORM_ID] = form.id,
                        _b[_constants__WEBPACK_IMPORTED_MODULE_1__.FORM_NAME] = form.name,
                        _b[_constants__WEBPACK_IMPORTED_MODULE_1__.FORM_DESTINATION] = form.action,
                        _b));
                    hasFormChanged = false;
                });
            };
            forms = Array.from(document.getElementsByTagName('form'));
            forms.forEach(addFormInteractionListener);
            // Adds listener to anchor tags added after initial load
            /* istanbul ignore else */
            if (typeof MutationObserver !== 'undefined') {
                observer = new MutationObserver(function (mutations) {
                    mutations.forEach(function (mutation) {
                        mutation.addedNodes.forEach(function (node) {
                            if (node.nodeName === 'FORM') {
                                addFormInteractionListener(node);
                            }
                            if ('querySelectorAll' in node && typeof node.querySelectorAll === 'function') {
                                Array.from(node.querySelectorAll('form')).map(addFormInteractionListener);
                            }
                        });
                    });
                });
                observer.observe(document.body, {
                    subtree: true,
                    childList: true,
                });
            }
            return [2 /*return*/];
        });
    }); };
    var execute = function (event) { return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(void 0, void 0, void 0, function () { return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
        return [2 /*return*/, event];
    }); }); };
    var teardown = function () { return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(void 0, void 0, void 0, function () {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
            observer === null || observer === void 0 ? void 0 : observer.disconnect();
            removeClickListeners();
            return [2 /*return*/];
        });
    }); };
    return {
        name: name,
        type: type,
        setup: setup,
        execute: execute,
        teardown: teardown,
    };
};
//# sourceMappingURL=form-interaction-tracking.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-browser/lib/esm/storage/browser-storage.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-browser/lib/esm/storage/browser-storage.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BrowserStorage": () => (/* binding */ BrowserStorage)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");

var BrowserStorage = /** @class */ (function () {
    function BrowserStorage(storage) {
        this.storage = storage;
    }
    BrowserStorage.prototype.isEnabled = function () {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var random, testStorage, testKey, value, _a;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        /* istanbul ignore if */
                        if (!this.storage) {
                            return [2 /*return*/, false];
                        }
                        random = String(Date.now());
                        testStorage = new BrowserStorage(this.storage);
                        testKey = 'AMP_TEST';
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 4, 5, 7]);
                        return [4 /*yield*/, testStorage.set(testKey, random)];
                    case 2:
                        _b.sent();
                        return [4 /*yield*/, testStorage.get(testKey)];
                    case 3:
                        value = _b.sent();
                        return [2 /*return*/, value === random];
                    case 4:
                        _a = _b.sent();
                        /* istanbul ignore next */
                        return [2 /*return*/, false];
                    case 5: return [4 /*yield*/, testStorage.remove(testKey)];
                    case 6:
                        _b.sent();
                        return [7 /*endfinally*/];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    BrowserStorage.prototype.get = function (key) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var value, _a;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.getRaw(key)];
                    case 1:
                        value = _b.sent();
                        if (!value) {
                            return [2 /*return*/, undefined];
                        }
                        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
                        return [2 /*return*/, JSON.parse(value)];
                    case 2:
                        _a = _b.sent();
                        console.error("[Amplitude] Error: Could not get value from storage");
                        return [2 /*return*/, undefined];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    BrowserStorage.prototype.getRaw = function (key) {
        var _a;
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_b) {
                return [2 /*return*/, ((_a = this.storage) === null || _a === void 0 ? void 0 : _a.getItem(key)) || undefined];
            });
        });
    };
    BrowserStorage.prototype.set = function (key, value) {
        var _a;
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_b) {
                try {
                    (_a = this.storage) === null || _a === void 0 ? void 0 : _a.setItem(key, JSON.stringify(value));
                }
                catch (_c) {
                    //
                }
                return [2 /*return*/];
            });
        });
    };
    BrowserStorage.prototype.remove = function (key) {
        var _a;
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_b) {
                try {
                    (_a = this.storage) === null || _a === void 0 ? void 0 : _a.removeItem(key);
                }
                catch (_c) {
                    //
                }
                return [2 /*return*/];
            });
        });
    };
    BrowserStorage.prototype.reset = function () {
        var _a;
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_b) {
                try {
                    (_a = this.storage) === null || _a === void 0 ? void 0 : _a.clear();
                }
                catch (_c) {
                    //
                }
                return [2 /*return*/];
            });
        });
    };
    return BrowserStorage;
}());

//# sourceMappingURL=browser-storage.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-browser/lib/esm/storage/local-storage.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-browser/lib/esm/storage/local-storage.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LocalStorage": () => (/* binding */ LocalStorage)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @amplitude/analytics-client-common */ "./node_modules/@amplitude/analytics-client-common/lib/esm/global-scope.js");
/* harmony import */ var _browser_storage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./browser-storage */ "./node_modules/@amplitude/analytics-browser/lib/esm/storage/browser-storage.js");



var MAX_ARRAY_LENGTH = 1000;
var LocalStorage = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(LocalStorage, _super);
    function LocalStorage(config) {
        var _this = this;
        var _a;
        _this = _super.call(this, (_a = (0,_amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_1__.getGlobalScope)()) === null || _a === void 0 ? void 0 : _a.localStorage) || this;
        _this.loggerProvider = config === null || config === void 0 ? void 0 : config.loggerProvider;
        return _this;
    }
    LocalStorage.prototype.set = function (key, value) {
        var _a;
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var droppedEventsCount;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(Array.isArray(value) && value.length > MAX_ARRAY_LENGTH)) return [3 /*break*/, 2];
                        droppedEventsCount = value.length - MAX_ARRAY_LENGTH;
                        return [4 /*yield*/, _super.prototype.set.call(this, key, value.slice(0, MAX_ARRAY_LENGTH))];
                    case 1:
                        _b.sent();
                        (_a = this.loggerProvider) === null || _a === void 0 ? void 0 : _a.error("Failed to save ".concat(droppedEventsCount, " events because the queue length exceeded ").concat(MAX_ARRAY_LENGTH, "."));
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, _super.prototype.set.call(this, key, value)];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return LocalStorage;
}(_browser_storage__WEBPACK_IMPORTED_MODULE_2__.BrowserStorage));

//# sourceMappingURL=local-storage.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-browser/lib/esm/storage/session-storage.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-browser/lib/esm/storage/session-storage.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SessionStorage": () => (/* binding */ SessionStorage)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @amplitude/analytics-client-common */ "./node_modules/@amplitude/analytics-client-common/lib/esm/global-scope.js");
/* harmony import */ var _browser_storage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./browser-storage */ "./node_modules/@amplitude/analytics-browser/lib/esm/storage/browser-storage.js");



var SessionStorage = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(SessionStorage, _super);
    function SessionStorage() {
        var _a;
        return _super.call(this, (_a = (0,_amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_1__.getGlobalScope)()) === null || _a === void 0 ? void 0 : _a.sessionStorage) || this;
    }
    return SessionStorage;
}(_browser_storage__WEBPACK_IMPORTED_MODULE_2__.BrowserStorage));

//# sourceMappingURL=session-storage.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-browser/lib/esm/transports/send-beacon.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-browser/lib/esm/transports/send-beacon.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SendBeaconTransport": () => (/* binding */ SendBeaconTransport)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @amplitude/analytics-client-common */ "./node_modules/@amplitude/analytics-client-common/lib/esm/global-scope.js");
/* harmony import */ var _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @amplitude/analytics-core */ "./node_modules/@amplitude/analytics-core/lib/esm/transports/base.js");



var SendBeaconTransport = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(SendBeaconTransport, _super);
    function SendBeaconTransport() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SendBeaconTransport.prototype.send = function (serverUrl, payload) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var _this = this;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var globalScope = (0,_amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_1__.getGlobalScope)();
                        /* istanbul ignore if */
                        if (!(globalScope === null || globalScope === void 0 ? void 0 : globalScope.navigator.sendBeacon)) {
                            throw new Error('SendBeaconTransport is not supported');
                        }
                        try {
                            var data = JSON.stringify(payload);
                            var success = globalScope.navigator.sendBeacon(serverUrl, JSON.stringify(payload));
                            if (success) {
                                return resolve(_this.buildResponse({
                                    code: 200,
                                    events_ingested: payload.events.length,
                                    payload_size_bytes: data.length,
                                    server_upload_time: Date.now(),
                                }));
                            }
                            return resolve(_this.buildResponse({ code: 500 }));
                        }
                        catch (e) {
                            reject(e);
                        }
                    })];
            });
        });
    };
    return SendBeaconTransport;
}(_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_2__.BaseTransport));

//# sourceMappingURL=send-beacon.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-browser/lib/esm/transports/xhr.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-browser/lib/esm/transports/xhr.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "XHRTransport": () => (/* binding */ XHRTransport)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @amplitude/analytics-core */ "./node_modules/@amplitude/analytics-core/lib/esm/transports/base.js");


var XHRTransport = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(XHRTransport, _super);
    function XHRTransport() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            done: 4,
        };
        return _this;
    }
    XHRTransport.prototype.send = function (serverUrl, payload) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var _this = this;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        /* istanbul ignore if */
                        if (typeof XMLHttpRequest === 'undefined') {
                            reject(new Error('XHRTransport is not supported.'));
                        }
                        var xhr = new XMLHttpRequest();
                        xhr.open('POST', serverUrl, true);
                        xhr.onreadystatechange = function () {
                            if (xhr.readyState === _this.state.done) {
                                try {
                                    var responsePayload = xhr.responseText;
                                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                                    var parsedResponsePayload = JSON.parse(responsePayload);
                                    var result = _this.buildResponse(parsedResponsePayload);
                                    resolve(result);
                                }
                                catch (e) {
                                    reject(e);
                                }
                            }
                        };
                        xhr.setRequestHeader('Content-Type', 'application/json');
                        xhr.setRequestHeader('Accept', '*/*');
                        xhr.send(JSON.stringify(payload));
                    })];
            });
        });
    };
    return XHRTransport;
}(_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.BaseTransport));

//# sourceMappingURL=xhr.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-browser/lib/esm/utils/snippet-helper.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-browser/lib/esm/utils/snippet-helper.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "convertProxyObjectToRealObject": () => (/* binding */ convertProxyObjectToRealObject),
/* harmony export */   "isInstanceProxy": () => (/* binding */ isInstanceProxy),
/* harmony export */   "runQueuedFunctions": () => (/* binding */ runQueuedFunctions)
/* harmony export */ });
/**
 * Applies the proxied functions on the proxied amplitude snippet to an instance of the real object.
 * @ignore
 */
var runQueuedFunctions = function (instance, queue) {
    convertProxyObjectToRealObject(instance, queue);
};
/**
 * Applies the proxied functions on the proxied object to an instance of the real object.
 * Used to convert proxied Identify and Revenue objects.
 */
var convertProxyObjectToRealObject = function (instance, queue) {
    for (var i = 0; i < queue.length; i++) {
        var _a = queue[i], name_1 = _a.name, args = _a.args, resolve = _a.resolve;
        var fn = instance && instance[name_1];
        if (typeof fn === 'function') {
            var result = fn.apply(instance, args);
            if (typeof resolve === 'function') {
                resolve(result === null || result === void 0 ? void 0 : result.promise);
            }
        }
    }
    return instance;
};
/**
 * Check if the param is snippet proxy
 */
var isInstanceProxy = function (instance) {
    var instanceProxy = instance;
    return instanceProxy && instanceProxy._q !== undefined;
};
//# sourceMappingURL=snippet-helper.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-browser/lib/esm/version.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-browser/lib/esm/version.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VERSION": () => (/* binding */ VERSION)
/* harmony export */ });
var VERSION = '2.2.0';
//# sourceMappingURL=version.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-client-common/lib/esm/analytics-connector.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-client-common/lib/esm/analytics-connector.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getAnalyticsConnector": () => (/* binding */ getAnalyticsConnector),
/* harmony export */   "setConnectorDeviceId": () => (/* binding */ setConnectorDeviceId),
/* harmony export */   "setConnectorUserId": () => (/* binding */ setConnectorUserId)
/* harmony export */ });
/* harmony import */ var _amplitude_analytics_connector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @amplitude/analytics-connector */ "./node_modules/@amplitude/analytics-connector/dist/analytics-connector.esm.js");

var getAnalyticsConnector = function (instanceName) {
    if (instanceName === void 0) { instanceName = '$default_instance'; }
    return _amplitude_analytics_connector__WEBPACK_IMPORTED_MODULE_0__.AnalyticsConnector.getInstance(instanceName);
};
var setConnectorUserId = function (userId, instanceName) {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    getAnalyticsConnector(instanceName).identityStore.editIdentity().setUserId(userId).commit();
};
var setConnectorDeviceId = function (deviceId, instanceName) {
    getAnalyticsConnector(instanceName).identityStore.editIdentity().setDeviceId(deviceId).commit();
};
//# sourceMappingURL=analytics-connector.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-client-common/lib/esm/attribution/campaign-parser.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-client-common/lib/esm/attribution/campaign-parser.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CampaignParser": () => (/* binding */ CampaignParser)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _query_params__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../query-params */ "./node_modules/@amplitude/analytics-client-common/lib/esm/query-params.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ "./node_modules/@amplitude/analytics-client-common/lib/esm/attribution/constants.js");



var CampaignParser = /** @class */ (function () {
    function CampaignParser() {
    }
    CampaignParser.prototype.parse = function () {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                return [2 /*return*/, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, _constants__WEBPACK_IMPORTED_MODULE_1__.BASE_CAMPAIGN), this.getUtmParam()), this.getReferrer()), this.getClickIds())];
            });
        });
    };
    CampaignParser.prototype.getUtmParam = function () {
        var params = (0,_query_params__WEBPACK_IMPORTED_MODULE_2__.getQueryParams)();
        var utmCampaign = params[_constants__WEBPACK_IMPORTED_MODULE_1__.UTM_CAMPAIGN];
        var utmContent = params[_constants__WEBPACK_IMPORTED_MODULE_1__.UTM_CONTENT];
        var utmId = params[_constants__WEBPACK_IMPORTED_MODULE_1__.UTM_ID];
        var utmMedium = params[_constants__WEBPACK_IMPORTED_MODULE_1__.UTM_MEDIUM];
        var utmSource = params[_constants__WEBPACK_IMPORTED_MODULE_1__.UTM_SOURCE];
        var utmTerm = params[_constants__WEBPACK_IMPORTED_MODULE_1__.UTM_TERM];
        return {
            utm_campaign: utmCampaign,
            utm_content: utmContent,
            utm_id: utmId,
            utm_medium: utmMedium,
            utm_source: utmSource,
            utm_term: utmTerm,
        };
    };
    CampaignParser.prototype.getReferrer = function () {
        var _a, _b;
        var data = {
            referrer: undefined,
            referring_domain: undefined,
        };
        try {
            data.referrer = document.referrer || undefined;
            data.referring_domain = (_b = (_a = data.referrer) === null || _a === void 0 ? void 0 : _a.split('/')[2]) !== null && _b !== void 0 ? _b : undefined;
        }
        catch (_c) {
            // nothing to track
        }
        return data;
    };
    CampaignParser.prototype.getClickIds = function () {
        var _a;
        var params = (0,_query_params__WEBPACK_IMPORTED_MODULE_2__.getQueryParams)();
        return _a = {},
            _a[_constants__WEBPACK_IMPORTED_MODULE_1__.DCLID] = params[_constants__WEBPACK_IMPORTED_MODULE_1__.DCLID],
            _a[_constants__WEBPACK_IMPORTED_MODULE_1__.FBCLID] = params[_constants__WEBPACK_IMPORTED_MODULE_1__.FBCLID],
            _a[_constants__WEBPACK_IMPORTED_MODULE_1__.GBRAID] = params[_constants__WEBPACK_IMPORTED_MODULE_1__.GBRAID],
            _a[_constants__WEBPACK_IMPORTED_MODULE_1__.GCLID] = params[_constants__WEBPACK_IMPORTED_MODULE_1__.GCLID],
            _a[_constants__WEBPACK_IMPORTED_MODULE_1__.KO_CLICK_ID] = params[_constants__WEBPACK_IMPORTED_MODULE_1__.KO_CLICK_ID],
            _a[_constants__WEBPACK_IMPORTED_MODULE_1__.LI_FAT_ID] = params[_constants__WEBPACK_IMPORTED_MODULE_1__.LI_FAT_ID],
            _a[_constants__WEBPACK_IMPORTED_MODULE_1__.MSCLKID] = params[_constants__WEBPACK_IMPORTED_MODULE_1__.MSCLKID],
            _a[_constants__WEBPACK_IMPORTED_MODULE_1__.RDT_CID] = params[_constants__WEBPACK_IMPORTED_MODULE_1__.RDT_CID],
            _a[_constants__WEBPACK_IMPORTED_MODULE_1__.TTCLID] = params[_constants__WEBPACK_IMPORTED_MODULE_1__.TTCLID],
            _a[_constants__WEBPACK_IMPORTED_MODULE_1__.TWCLID] = params[_constants__WEBPACK_IMPORTED_MODULE_1__.TWCLID],
            _a[_constants__WEBPACK_IMPORTED_MODULE_1__.WBRAID] = params[_constants__WEBPACK_IMPORTED_MODULE_1__.WBRAID],
            _a;
    };
    return CampaignParser;
}());

//# sourceMappingURL=campaign-parser.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-client-common/lib/esm/attribution/constants.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-client-common/lib/esm/attribution/constants.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BASE_CAMPAIGN": () => (/* binding */ BASE_CAMPAIGN),
/* harmony export */   "DCLID": () => (/* binding */ DCLID),
/* harmony export */   "EMPTY_VALUE": () => (/* binding */ EMPTY_VALUE),
/* harmony export */   "FBCLID": () => (/* binding */ FBCLID),
/* harmony export */   "GBRAID": () => (/* binding */ GBRAID),
/* harmony export */   "GCLID": () => (/* binding */ GCLID),
/* harmony export */   "KO_CLICK_ID": () => (/* binding */ KO_CLICK_ID),
/* harmony export */   "LI_FAT_ID": () => (/* binding */ LI_FAT_ID),
/* harmony export */   "MKTG": () => (/* binding */ MKTG),
/* harmony export */   "MSCLKID": () => (/* binding */ MSCLKID),
/* harmony export */   "RDT_CID": () => (/* binding */ RDT_CID),
/* harmony export */   "TTCLID": () => (/* binding */ TTCLID),
/* harmony export */   "TWCLID": () => (/* binding */ TWCLID),
/* harmony export */   "UTM_CAMPAIGN": () => (/* binding */ UTM_CAMPAIGN),
/* harmony export */   "UTM_CONTENT": () => (/* binding */ UTM_CONTENT),
/* harmony export */   "UTM_ID": () => (/* binding */ UTM_ID),
/* harmony export */   "UTM_MEDIUM": () => (/* binding */ UTM_MEDIUM),
/* harmony export */   "UTM_SOURCE": () => (/* binding */ UTM_SOURCE),
/* harmony export */   "UTM_TERM": () => (/* binding */ UTM_TERM),
/* harmony export */   "WBRAID": () => (/* binding */ WBRAID)
/* harmony export */ });
var UTM_CAMPAIGN = 'utm_campaign';
var UTM_CONTENT = 'utm_content';
var UTM_ID = 'utm_id';
var UTM_MEDIUM = 'utm_medium';
var UTM_SOURCE = 'utm_source';
var UTM_TERM = 'utm_term';
var DCLID = 'dclid';
var FBCLID = 'fbclid';
var GBRAID = 'gbraid';
var GCLID = 'gclid';
var KO_CLICK_ID = 'ko_click_id';
var LI_FAT_ID = 'li_fat_id';
var MSCLKID = 'msclkid';
var RDT_CID = 'rtd_cid';
var TTCLID = 'ttclid';
var TWCLID = 'twclid';
var WBRAID = 'wbraid';
var EMPTY_VALUE = 'EMPTY';
var BASE_CAMPAIGN = {
    utm_campaign: undefined,
    utm_content: undefined,
    utm_id: undefined,
    utm_medium: undefined,
    utm_source: undefined,
    utm_term: undefined,
    referrer: undefined,
    referring_domain: undefined,
    dclid: undefined,
    gbraid: undefined,
    gclid: undefined,
    fbclid: undefined,
    ko_click_id: undefined,
    li_fat_id: undefined,
    msclkid: undefined,
    rtd_cid: undefined,
    ttclid: undefined,
    twclid: undefined,
    wbraid: undefined,
};
var MKTG = 'MKTG';
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-client-common/lib/esm/cookie-name.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-client-common/lib/esm/cookie-name.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getCookieName": () => (/* binding */ getCookieName),
/* harmony export */   "getOldCookieName": () => (/* binding */ getOldCookieName)
/* harmony export */ });
/* harmony import */ var _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @amplitude/analytics-core */ "./node_modules/@amplitude/analytics-core/lib/esm/constants.js");

var getCookieName = function (apiKey, postKey, limit) {
    if (postKey === void 0) { postKey = ''; }
    if (limit === void 0) { limit = 10; }
    return [_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_0__.AMPLITUDE_PREFIX, postKey, apiKey.substring(0, limit)].filter(Boolean).join('_');
};
var getOldCookieName = function (apiKey) {
    return "".concat(_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_0__.AMPLITUDE_PREFIX.toLowerCase(), "_").concat(apiKey.substring(0, 6));
};
//# sourceMappingURL=cookie-name.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-client-common/lib/esm/default-tracking.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-client-common/lib/esm/default-tracking.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getAttributionTrackingConfig": () => (/* binding */ getAttributionTrackingConfig),
/* harmony export */   "getPageViewTrackingConfig": () => (/* binding */ getPageViewTrackingConfig),
/* harmony export */   "isAttributionTrackingEnabled": () => (/* binding */ isAttributionTrackingEnabled),
/* harmony export */   "isFileDownloadTrackingEnabled": () => (/* binding */ isFileDownloadTrackingEnabled),
/* harmony export */   "isFormInteractionTrackingEnabled": () => (/* binding */ isFormInteractionTrackingEnabled),
/* harmony export */   "isPageViewTrackingEnabled": () => (/* binding */ isPageViewTrackingEnabled),
/* harmony export */   "isSessionTrackingEnabled": () => (/* binding */ isSessionTrackingEnabled)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");

/**
 * Returns false if defaultTracking === false or if defaultTracking[event],
 * otherwise returns true
 */
var isTrackingEnabled = function (defaultTracking, event) {
    if (typeof defaultTracking === 'boolean') {
        return defaultTracking;
    }
    if ((defaultTracking === null || defaultTracking === void 0 ? void 0 : defaultTracking[event]) === false) {
        return false;
    }
    return true;
};
var isAttributionTrackingEnabled = function (defaultTracking) {
    return isTrackingEnabled(defaultTracking, 'attribution');
};
var isFileDownloadTrackingEnabled = function (defaultTracking) {
    return isTrackingEnabled(defaultTracking, 'fileDownloads');
};
var isFormInteractionTrackingEnabled = function (defaultTracking) {
    return isTrackingEnabled(defaultTracking, 'formInteractions');
};
var isPageViewTrackingEnabled = function (defaultTracking) {
    return isTrackingEnabled(defaultTracking, 'pageViews');
};
var isSessionTrackingEnabled = function (defaultTracking) {
    return isTrackingEnabled(defaultTracking, 'sessions');
};
var getPageViewTrackingConfig = function (config) {
    var trackOn = function () { return false; };
    var trackHistoryChanges = undefined;
    var eventType;
    var isDefaultPageViewTrackingEnabled = isPageViewTrackingEnabled(config.defaultTracking);
    if (isDefaultPageViewTrackingEnabled) {
        trackOn = undefined;
        eventType = undefined;
        if (config.defaultTracking &&
            typeof config.defaultTracking === 'object' &&
            config.defaultTracking.pageViews &&
            typeof config.defaultTracking.pageViews === 'object') {
            if ('trackOn' in config.defaultTracking.pageViews) {
                trackOn = config.defaultTracking.pageViews.trackOn;
            }
            if ('trackHistoryChanges' in config.defaultTracking.pageViews) {
                trackHistoryChanges = config.defaultTracking.pageViews.trackHistoryChanges;
            }
            if ('eventType' in config.defaultTracking.pageViews && config.defaultTracking.pageViews.eventType) {
                eventType = config.defaultTracking.pageViews.eventType;
            }
        }
    }
    return {
        trackOn: trackOn,
        trackHistoryChanges: trackHistoryChanges,
        eventType: eventType,
    };
};
var getAttributionTrackingConfig = function (config) {
    if (isAttributionTrackingEnabled(config.defaultTracking) &&
        config.defaultTracking &&
        typeof config.defaultTracking === 'object' &&
        config.defaultTracking.attribution &&
        typeof config.defaultTracking.attribution === 'object') {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, config.defaultTracking.attribution);
    }
    return {};
};
//# sourceMappingURL=default-tracking.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-client-common/lib/esm/global-scope.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-client-common/lib/esm/global-scope.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getGlobalScope": () => (/* binding */ getGlobalScope)
/* harmony export */ });
/* eslint-disable no-restricted-globals */
/* Only file allowed to access to globalThis, window, self */
var getGlobalScope = function () {
    if (typeof globalThis !== 'undefined') {
        return globalThis;
    }
    if (typeof window !== 'undefined') {
        return window;
    }
    if (typeof self !== 'undefined') {
        return self;
    }
    if (typeof __webpack_require__.g !== 'undefined') {
        return __webpack_require__.g;
    }
    return undefined;
};
//# sourceMappingURL=global-scope.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-client-common/lib/esm/language.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-client-common/lib/esm/language.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getLanguage": () => (/* binding */ getLanguage)
/* harmony export */ });
var getLanguage = function () {
    var _a, _b, _c, _d;
    if (typeof navigator === 'undefined')
        return '';
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    var userLanguage = navigator.userLanguage;
    return (_d = (_c = (_b = (_a = navigator.languages) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : navigator.language) !== null && _c !== void 0 ? _c : userLanguage) !== null && _d !== void 0 ? _d : '';
};
//# sourceMappingURL=language.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-client-common/lib/esm/plugins/identity.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-client-common/lib/esm/plugins/identity.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IdentityEventSender": () => (/* binding */ IdentityEventSender)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _analytics_connector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../analytics-connector */ "./node_modules/@amplitude/analytics-client-common/lib/esm/analytics-connector.js");


var IdentityEventSender = /** @class */ (function () {
    function IdentityEventSender() {
        this.name = 'identity';
        this.type = 'before';
        this.identityStore = (0,_analytics_connector__WEBPACK_IMPORTED_MODULE_0__.getAnalyticsConnector)().identityStore;
    }
    IdentityEventSender.prototype.execute = function (context) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            var userProperties;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                userProperties = context.user_properties;
                if (userProperties) {
                    this.identityStore.editIdentity().updateUserProperties(userProperties).commit();
                }
                return [2 /*return*/, context];
            });
        });
    };
    IdentityEventSender.prototype.setup = function (config) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                if (config.instanceName) {
                    this.identityStore = (0,_analytics_connector__WEBPACK_IMPORTED_MODULE_0__.getAnalyticsConnector)(config.instanceName).identityStore;
                }
                return [2 /*return*/];
            });
        });
    };
    return IdentityEventSender;
}());

//# sourceMappingURL=identity.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-client-common/lib/esm/query-params.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-client-common/lib/esm/query-params.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getQueryParams": () => (/* binding */ getQueryParams),
/* harmony export */   "tryDecodeURIComponent": () => (/* binding */ tryDecodeURIComponent)
/* harmony export */ });
/* harmony import */ var _global_scope__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./global-scope */ "./node_modules/@amplitude/analytics-client-common/lib/esm/global-scope.js");

var getQueryParams = function () {
    var _a;
    var globalScope = (0,_global_scope__WEBPACK_IMPORTED_MODULE_0__.getGlobalScope)();
    /* istanbul ignore if */
    if (!((_a = globalScope === null || globalScope === void 0 ? void 0 : globalScope.location) === null || _a === void 0 ? void 0 : _a.search)) {
        return {};
    }
    var pairs = globalScope.location.search.substring(1).split('&').filter(Boolean);
    var params = pairs.reduce(function (acc, curr) {
        var query = curr.split('=', 2);
        var key = tryDecodeURIComponent(query[0]);
        var value = tryDecodeURIComponent(query[1]);
        if (!value) {
            return acc;
        }
        acc[key] = value;
        return acc;
    }, {});
    return params;
};
var tryDecodeURIComponent = function (value) {
    if (value === void 0) { value = ''; }
    try {
        return decodeURIComponent(value);
    }
    catch (_a) {
        return '';
    }
};
//# sourceMappingURL=query-params.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-client-common/lib/esm/storage/cookie.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-client-common/lib/esm/storage/cookie.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CookieStorage": () => (/* binding */ CookieStorage)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _global_scope__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../global-scope */ "./node_modules/@amplitude/analytics-client-common/lib/esm/global-scope.js");


var CookieStorage = /** @class */ (function () {
    function CookieStorage(options) {
        this.options = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, options);
    }
    CookieStorage.prototype.isEnabled = function () {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var testStrorage, testKey, value, _a;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        /* istanbul ignore if */
                        if (!(0,_global_scope__WEBPACK_IMPORTED_MODULE_1__.getGlobalScope)()) {
                            return [2 /*return*/, false];
                        }
                        CookieStorage.testValue = String(Date.now());
                        testStrorage = new CookieStorage(this.options);
                        testKey = 'AMP_TEST';
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 4, 5, 7]);
                        return [4 /*yield*/, testStrorage.set(testKey, CookieStorage.testValue)];
                    case 2:
                        _b.sent();
                        return [4 /*yield*/, testStrorage.get(testKey)];
                    case 3:
                        value = _b.sent();
                        return [2 /*return*/, value === CookieStorage.testValue];
                    case 4:
                        _a = _b.sent();
                        /* istanbul ignore next */
                        return [2 /*return*/, false];
                    case 5: return [4 /*yield*/, testStrorage.remove(testKey)];
                    case 6:
                        _b.sent();
                        return [7 /*endfinally*/];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    CookieStorage.prototype.get = function (key) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var value;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getRaw(key)];
                    case 1:
                        value = _a.sent();
                        if (!value) {
                            return [2 /*return*/, undefined];
                        }
                        try {
                            try {
                                value = decodeURIComponent(atob(value));
                            }
                            catch (_b) {
                                // value not encoded
                            }
                            // eslint-disable-next-line @typescript-eslint/no-unsafe-return
                            return [2 /*return*/, JSON.parse(value)];
                        }
                        catch (_c) {
                            /* istanbul ignore next */
                            return [2 /*return*/, undefined];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    CookieStorage.prototype.getRaw = function (key) {
        var _a, _b;
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var globalScope, cookie, match;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_c) {
                globalScope = (0,_global_scope__WEBPACK_IMPORTED_MODULE_1__.getGlobalScope)();
                cookie = (_b = (_a = globalScope === null || globalScope === void 0 ? void 0 : globalScope.document) === null || _a === void 0 ? void 0 : _a.cookie.split('; ')) !== null && _b !== void 0 ? _b : [];
                match = cookie.find(function (c) { return c.indexOf(key + '=') === 0; });
                if (!match) {
                    return [2 /*return*/, undefined];
                }
                return [2 /*return*/, match.substring(key.length + 1)];
            });
        });
    };
    CookieStorage.prototype.set = function (key, value) {
        var _a;
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var expirationDays, expires, expireDate, date, str, globalScope;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_b) {
                try {
                    expirationDays = (_a = this.options.expirationDays) !== null && _a !== void 0 ? _a : 0;
                    expires = value !== null ? expirationDays : -1;
                    expireDate = undefined;
                    if (expires) {
                        date = new Date();
                        date.setTime(date.getTime() + expires * 24 * 60 * 60 * 1000);
                        expireDate = date;
                    }
                    str = "".concat(key, "=").concat(btoa(encodeURIComponent(JSON.stringify(value))));
                    if (expireDate) {
                        str += "; expires=".concat(expireDate.toUTCString());
                    }
                    str += '; path=/';
                    if (this.options.domain) {
                        str += "; domain=".concat(this.options.domain);
                    }
                    if (this.options.secure) {
                        str += '; Secure';
                    }
                    if (this.options.sameSite) {
                        str += "; SameSite=".concat(this.options.sameSite);
                    }
                    globalScope = (0,_global_scope__WEBPACK_IMPORTED_MODULE_1__.getGlobalScope)();
                    if (globalScope) {
                        globalScope.document.cookie = str;
                    }
                }
                catch (_c) {
                    //
                }
                return [2 /*return*/];
            });
        });
    };
    CookieStorage.prototype.remove = function (key) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.set(key, null)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    CookieStorage.prototype.reset = function () {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    return CookieStorage;
}());

//# sourceMappingURL=cookie.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-client-common/lib/esm/transports/fetch.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-client-common/lib/esm/transports/fetch.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FetchTransport": () => (/* binding */ FetchTransport)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @amplitude/analytics-core */ "./node_modules/@amplitude/analytics-core/lib/esm/transports/base.js");


var FetchTransport = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(FetchTransport, _super);
    function FetchTransport() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FetchTransport.prototype.send = function (serverUrl, payload) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var options, response, responsePayload;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        /* istanbul ignore if */
                        if (typeof fetch === 'undefined') {
                            throw new Error('FetchTransport is not supported');
                        }
                        options = {
                            headers: {
                                'Content-Type': 'application/json',
                                Accept: '*/*',
                            },
                            body: JSON.stringify(payload),
                            method: 'POST',
                        };
                        return [4 /*yield*/, fetch(serverUrl, options)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 2:
                        responsePayload = _a.sent();
                        return [2 /*return*/, this.buildResponse(responsePayload)];
                }
            });
        });
    };
    return FetchTransport;
}(_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_1__.BaseTransport));

//# sourceMappingURL=fetch.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-connector/dist/analytics-connector.esm.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-connector/dist/analytics-connector.esm.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AnalyticsConnector": () => (/* binding */ AnalyticsConnector)
/* harmony export */ });
var ApplicationContextProviderImpl = /** @class */ (function () {
    function ApplicationContextProviderImpl() {
    }
    ApplicationContextProviderImpl.prototype.getApplicationContext = function () {
        return {
            versionName: this.versionName,
            language: getLanguage(),
            platform: 'Web',
            os: undefined,
            deviceModel: undefined,
        };
    };
    return ApplicationContextProviderImpl;
}());
var getLanguage = function () {
    return ((typeof navigator !== 'undefined' &&
        ((navigator.languages && navigator.languages[0]) ||
            navigator.language)) ||
        '');
};

var EventBridgeImpl = /** @class */ (function () {
    function EventBridgeImpl() {
        this.queue = [];
    }
    EventBridgeImpl.prototype.logEvent = function (event) {
        if (!this.receiver) {
            if (this.queue.length < 512) {
                this.queue.push(event);
            }
        }
        else {
            this.receiver(event);
        }
    };
    EventBridgeImpl.prototype.setEventReceiver = function (receiver) {
        this.receiver = receiver;
        if (this.queue.length > 0) {
            this.queue.forEach(function (event) {
                receiver(event);
            });
            this.queue = [];
        }
    };
    return EventBridgeImpl;
}());

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
var isEqual = function (obj1, obj2) {
    var primitive = ['string', 'number', 'boolean', 'undefined'];
    var typeA = typeof obj1;
    var typeB = typeof obj2;
    if (typeA !== typeB) {
        return false;
    }
    for (var _i = 0, primitive_1 = primitive; _i < primitive_1.length; _i++) {
        var p = primitive_1[_i];
        if (p === typeA) {
            return obj1 === obj2;
        }
    }
    // check null
    if (obj1 == null && obj2 == null) {
        return true;
    }
    else if (obj1 == null || obj2 == null) {
        return false;
    }
    // if got here - objects
    if (obj1.length !== obj2.length) {
        return false;
    }
    //check if arrays
    var isArrayA = Array.isArray(obj1);
    var isArrayB = Array.isArray(obj2);
    if (isArrayA !== isArrayB) {
        return false;
    }
    if (isArrayA && isArrayB) {
        //arrays
        for (var i = 0; i < obj1.length; i++) {
            if (!isEqual(obj1[i], obj2[i])) {
                return false;
            }
        }
    }
    else {
        //objects
        var sorted1 = Object.keys(obj1).sort();
        var sorted2 = Object.keys(obj2).sort();
        if (!isEqual(sorted1, sorted2)) {
            return false;
        }
        //compare object values
        var result_1 = true;
        Object.keys(obj1).forEach(function (key) {
            if (!isEqual(obj1[key], obj2[key])) {
                result_1 = false;
            }
        });
        return result_1;
    }
    return true;
};

var ID_OP_SET = '$set';
var ID_OP_UNSET = '$unset';
var ID_OP_CLEAR_ALL = '$clearAll';
// Polyfill for Object.entries
if (!Object.entries) {
    Object.entries = function (obj) {
        var ownProps = Object.keys(obj);
        var i = ownProps.length;
        var resArray = new Array(i);
        while (i--) {
            resArray[i] = [ownProps[i], obj[ownProps[i]]];
        }
        return resArray;
    };
}
var IdentityStoreImpl = /** @class */ (function () {
    function IdentityStoreImpl() {
        this.identity = { userProperties: {} };
        this.listeners = new Set();
    }
    IdentityStoreImpl.prototype.editIdentity = function () {
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        var self = this;
        var actingUserProperties = __assign({}, this.identity.userProperties);
        var actingIdentity = __assign(__assign({}, this.identity), { userProperties: actingUserProperties });
        return {
            setUserId: function (userId) {
                actingIdentity.userId = userId;
                return this;
            },
            setDeviceId: function (deviceId) {
                actingIdentity.deviceId = deviceId;
                return this;
            },
            setUserProperties: function (userProperties) {
                actingIdentity.userProperties = userProperties;
                return this;
            },
            updateUserProperties: function (actions) {
                var actingProperties = actingIdentity.userProperties || {};
                for (var _i = 0, _a = Object.entries(actions); _i < _a.length; _i++) {
                    var _b = _a[_i], action = _b[0], properties = _b[1];
                    switch (action) {
                        case ID_OP_SET:
                            for (var _c = 0, _d = Object.entries(properties); _c < _d.length; _c++) {
                                var _e = _d[_c], key = _e[0], value = _e[1];
                                actingProperties[key] = value;
                            }
                            break;
                        case ID_OP_UNSET:
                            for (var _f = 0, _g = Object.keys(properties); _f < _g.length; _f++) {
                                var key = _g[_f];
                                delete actingProperties[key];
                            }
                            break;
                        case ID_OP_CLEAR_ALL:
                            actingProperties = {};
                            break;
                    }
                }
                actingIdentity.userProperties = actingProperties;
                return this;
            },
            commit: function () {
                self.setIdentity(actingIdentity);
                return this;
            },
        };
    };
    IdentityStoreImpl.prototype.getIdentity = function () {
        return __assign({}, this.identity);
    };
    IdentityStoreImpl.prototype.setIdentity = function (identity) {
        var originalIdentity = __assign({}, this.identity);
        this.identity = __assign({}, identity);
        if (!isEqual(originalIdentity, this.identity)) {
            this.listeners.forEach(function (listener) {
                listener(identity);
            });
        }
    };
    IdentityStoreImpl.prototype.addIdentityListener = function (listener) {
        this.listeners.add(listener);
    };
    IdentityStoreImpl.prototype.removeIdentityListener = function (listener) {
        this.listeners.delete(listener);
    };
    return IdentityStoreImpl;
}());

var safeGlobal = typeof globalThis !== 'undefined'
    ? globalThis
    : typeof __webpack_require__.g !== 'undefined'
        ? __webpack_require__.g
        : self;

var AnalyticsConnector = /** @class */ (function () {
    function AnalyticsConnector() {
        this.identityStore = new IdentityStoreImpl();
        this.eventBridge = new EventBridgeImpl();
        this.applicationContextProvider = new ApplicationContextProviderImpl();
    }
    AnalyticsConnector.getInstance = function (instanceName) {
        if (!safeGlobal['analyticsConnectorInstances']) {
            safeGlobal['analyticsConnectorInstances'] = {};
        }
        if (!safeGlobal['analyticsConnectorInstances'][instanceName]) {
            safeGlobal['analyticsConnectorInstances'][instanceName] =
                new AnalyticsConnector();
        }
        return safeGlobal['analyticsConnectorInstances'][instanceName];
    };
    return AnalyticsConnector;
}());




/***/ }),

/***/ "./node_modules/@amplitude/analytics-core/lib/esm/config.js":
/*!******************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-core/lib/esm/config.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Config": () => (/* binding */ Config),
/* harmony export */   "createServerConfig": () => (/* binding */ createServerConfig),
/* harmony export */   "getDefaultConfig": () => (/* binding */ getDefaultConfig),
/* harmony export */   "getServerUrl": () => (/* binding */ getServerUrl)
/* harmony export */ });
/* harmony import */ var _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @amplitude/analytics-types */ "./node_modules/@amplitude/analytics-types/lib/esm/logger.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./node_modules/@amplitude/analytics-core/lib/esm/constants.js");
/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logger */ "./node_modules/@amplitude/analytics-core/lib/esm/logger.js");



var getDefaultConfig = function () { return ({
    flushMaxRetries: 12,
    flushQueueSize: 200,
    flushIntervalMillis: 10000,
    instanceName: '$default_instance',
    logLevel: _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Warn,
    loggerProvider: new _logger__WEBPACK_IMPORTED_MODULE_1__.Logger(),
    optOut: false,
    serverUrl: _constants__WEBPACK_IMPORTED_MODULE_2__.AMPLITUDE_SERVER_URL,
    serverZone: 'US',
    useBatch: false,
}); };
var Config = /** @class */ (function () {
    function Config(options) {
        var _a, _b, _c, _d;
        this._optOut = false;
        var defaultConfig = getDefaultConfig();
        this.apiKey = options.apiKey;
        this.flushIntervalMillis = (_a = options.flushIntervalMillis) !== null && _a !== void 0 ? _a : defaultConfig.flushIntervalMillis;
        this.flushMaxRetries = options.flushMaxRetries || defaultConfig.flushMaxRetries;
        this.flushQueueSize = options.flushQueueSize || defaultConfig.flushQueueSize;
        this.instanceName = options.instanceName || defaultConfig.instanceName;
        this.loggerProvider = options.loggerProvider || defaultConfig.loggerProvider;
        this.logLevel = (_b = options.logLevel) !== null && _b !== void 0 ? _b : defaultConfig.logLevel;
        this.minIdLength = options.minIdLength;
        this.plan = options.plan;
        this.ingestionMetadata = options.ingestionMetadata;
        this.optOut = (_c = options.optOut) !== null && _c !== void 0 ? _c : defaultConfig.optOut;
        this.serverUrl = options.serverUrl;
        this.serverZone = options.serverZone || defaultConfig.serverZone;
        this.storageProvider = options.storageProvider;
        this.transportProvider = options.transportProvider;
        this.useBatch = (_d = options.useBatch) !== null && _d !== void 0 ? _d : defaultConfig.useBatch;
        this.loggerProvider.enable(this.logLevel);
        var serverConfig = createServerConfig(options.serverUrl, options.serverZone, options.useBatch);
        this.serverZone = serverConfig.serverZone;
        this.serverUrl = serverConfig.serverUrl;
    }
    Object.defineProperty(Config.prototype, "optOut", {
        get: function () {
            return this._optOut;
        },
        set: function (optOut) {
            this._optOut = optOut;
        },
        enumerable: false,
        configurable: true
    });
    return Config;
}());

var getServerUrl = function (serverZone, useBatch) {
    if (serverZone === 'EU') {
        return useBatch ? _constants__WEBPACK_IMPORTED_MODULE_2__.EU_AMPLITUDE_BATCH_SERVER_URL : _constants__WEBPACK_IMPORTED_MODULE_2__.EU_AMPLITUDE_SERVER_URL;
    }
    return useBatch ? _constants__WEBPACK_IMPORTED_MODULE_2__.AMPLITUDE_BATCH_SERVER_URL : _constants__WEBPACK_IMPORTED_MODULE_2__.AMPLITUDE_SERVER_URL;
};
var createServerConfig = function (serverUrl, serverZone, useBatch) {
    if (serverUrl === void 0) { serverUrl = ''; }
    if (serverZone === void 0) { serverZone = getDefaultConfig().serverZone; }
    if (useBatch === void 0) { useBatch = getDefaultConfig().useBatch; }
    if (serverUrl) {
        return { serverUrl: serverUrl, serverZone: undefined };
    }
    var _serverZone = ['US', 'EU'].includes(serverZone) ? serverZone : getDefaultConfig().serverZone;
    return {
        serverZone: _serverZone,
        serverUrl: getServerUrl(_serverZone, useBatch),
    };
};
//# sourceMappingURL=config.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-core/lib/esm/constants.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-core/lib/esm/constants.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AMPLITUDE_BATCH_SERVER_URL": () => (/* binding */ AMPLITUDE_BATCH_SERVER_URL),
/* harmony export */   "AMPLITUDE_PREFIX": () => (/* binding */ AMPLITUDE_PREFIX),
/* harmony export */   "AMPLITUDE_SERVER_URL": () => (/* binding */ AMPLITUDE_SERVER_URL),
/* harmony export */   "EU_AMPLITUDE_BATCH_SERVER_URL": () => (/* binding */ EU_AMPLITUDE_BATCH_SERVER_URL),
/* harmony export */   "EU_AMPLITUDE_SERVER_URL": () => (/* binding */ EU_AMPLITUDE_SERVER_URL),
/* harmony export */   "STORAGE_PREFIX": () => (/* binding */ STORAGE_PREFIX),
/* harmony export */   "UNSET_VALUE": () => (/* binding */ UNSET_VALUE)
/* harmony export */ });
var UNSET_VALUE = '-';
var AMPLITUDE_PREFIX = 'AMP';
var STORAGE_PREFIX = "".concat(AMPLITUDE_PREFIX, "_unsent");
var AMPLITUDE_SERVER_URL = 'https://api2.amplitude.com/2/httpapi';
var EU_AMPLITUDE_SERVER_URL = 'https://api.eu.amplitude.com/2/httpapi';
var AMPLITUDE_BATCH_SERVER_URL = 'https://api2.amplitude.com/batch';
var EU_AMPLITUDE_BATCH_SERVER_URL = 'https://api.eu.amplitude.com/batch';
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-core/lib/esm/core-client.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-core/lib/esm/core-client.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AmplitudeCore": () => (/* binding */ AmplitudeCore)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _utils_event_builder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/event-builder */ "./node_modules/@amplitude/analytics-core/lib/esm/utils/event-builder.js");
/* harmony import */ var _timeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./timeline */ "./node_modules/@amplitude/analytics-core/lib/esm/timeline.js");
/* harmony import */ var _utils_result_builder__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/result-builder */ "./node_modules/@amplitude/analytics-core/lib/esm/utils/result-builder.js");
/* harmony import */ var _messages__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./messages */ "./node_modules/@amplitude/analytics-core/lib/esm/messages.js");
/* harmony import */ var _utils_return_wrapper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/return-wrapper */ "./node_modules/@amplitude/analytics-core/lib/esm/utils/return-wrapper.js");






var AmplitudeCore = /** @class */ (function () {
    function AmplitudeCore(name) {
        if (name === void 0) { name = '$default'; }
        this.initializing = false;
        this.q = [];
        this.dispatchQ = [];
        this.logEvent = this.track.bind(this);
        this.timeline = new _timeline__WEBPACK_IMPORTED_MODULE_0__.Timeline(this);
        this.name = name;
    }
    AmplitudeCore.prototype._init = function (config) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.config = config;
                        this.timeline.reset(this);
                        return [4 /*yield*/, this.runQueuedFunctions('q')];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    AmplitudeCore.prototype.runQueuedFunctions = function (queueName) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            var queuedFunctions, queuedFunctions_1, queuedFunctions_1_1, queuedFunction, e_1_1;
            var e_1, _a;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        queuedFunctions = this[queueName];
                        this[queueName] = [];
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 6, 7, 8]);
                        queuedFunctions_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__values)(queuedFunctions), queuedFunctions_1_1 = queuedFunctions_1.next();
                        _b.label = 2;
                    case 2:
                        if (!!queuedFunctions_1_1.done) return [3 /*break*/, 5];
                        queuedFunction = queuedFunctions_1_1.value;
                        return [4 /*yield*/, queuedFunction()];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4:
                        queuedFunctions_1_1 = queuedFunctions_1.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_1_1 = _b.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (queuedFunctions_1_1 && !queuedFunctions_1_1.done && (_a = queuedFunctions_1.return)) _a.call(queuedFunctions_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    AmplitudeCore.prototype.track = function (eventInput, eventProperties, eventOptions) {
        var event = (0,_utils_event_builder__WEBPACK_IMPORTED_MODULE_2__.createTrackEvent)(eventInput, eventProperties, eventOptions);
        return (0,_utils_return_wrapper__WEBPACK_IMPORTED_MODULE_3__.returnWrapper)(this.dispatch(event));
    };
    AmplitudeCore.prototype.identify = function (identify, eventOptions) {
        var event = (0,_utils_event_builder__WEBPACK_IMPORTED_MODULE_2__.createIdentifyEvent)(identify, eventOptions);
        return (0,_utils_return_wrapper__WEBPACK_IMPORTED_MODULE_3__.returnWrapper)(this.dispatch(event));
    };
    AmplitudeCore.prototype.groupIdentify = function (groupType, groupName, identify, eventOptions) {
        var event = (0,_utils_event_builder__WEBPACK_IMPORTED_MODULE_2__.createGroupIdentifyEvent)(groupType, groupName, identify, eventOptions);
        return (0,_utils_return_wrapper__WEBPACK_IMPORTED_MODULE_3__.returnWrapper)(this.dispatch(event));
    };
    AmplitudeCore.prototype.setGroup = function (groupType, groupName, eventOptions) {
        var event = (0,_utils_event_builder__WEBPACK_IMPORTED_MODULE_2__.createGroupEvent)(groupType, groupName, eventOptions);
        return (0,_utils_return_wrapper__WEBPACK_IMPORTED_MODULE_3__.returnWrapper)(this.dispatch(event));
    };
    AmplitudeCore.prototype.revenue = function (revenue, eventOptions) {
        var event = (0,_utils_event_builder__WEBPACK_IMPORTED_MODULE_2__.createRevenueEvent)(revenue, eventOptions);
        return (0,_utils_return_wrapper__WEBPACK_IMPORTED_MODULE_3__.returnWrapper)(this.dispatch(event));
    };
    AmplitudeCore.prototype.add = function (plugin) {
        if (!this.config) {
            this.q.push(this.add.bind(this, plugin));
            return (0,_utils_return_wrapper__WEBPACK_IMPORTED_MODULE_3__.returnWrapper)();
        }
        return (0,_utils_return_wrapper__WEBPACK_IMPORTED_MODULE_3__.returnWrapper)(this.timeline.register(plugin, this.config));
    };
    AmplitudeCore.prototype.remove = function (pluginName) {
        if (!this.config) {
            this.q.push(this.remove.bind(this, pluginName));
            return (0,_utils_return_wrapper__WEBPACK_IMPORTED_MODULE_3__.returnWrapper)();
        }
        return (0,_utils_return_wrapper__WEBPACK_IMPORTED_MODULE_3__.returnWrapper)(this.timeline.deregister(pluginName));
    };
    AmplitudeCore.prototype.dispatchWithCallback = function (event, callback) {
        if (!this.config) {
            return callback((0,_utils_result_builder__WEBPACK_IMPORTED_MODULE_4__.buildResult)(event, 0, _messages__WEBPACK_IMPORTED_MODULE_5__.CLIENT_NOT_INITIALIZED));
        }
        void this.process(event).then(callback);
    };
    AmplitudeCore.prototype.dispatch = function (event) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            var _this = this;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                if (!this.config) {
                    return [2 /*return*/, new Promise(function (resolve) {
                            _this.dispatchQ.push(_this.dispatchWithCallback.bind(_this, event, resolve));
                        })];
                }
                return [2 /*return*/, this.process(event)];
            });
        });
    };
    AmplitudeCore.prototype.process = function (event) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            var result, e_2, message, result;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        // skip event processing if opt out
                        if (this.config.optOut) {
                            return [2 /*return*/, (0,_utils_result_builder__WEBPACK_IMPORTED_MODULE_4__.buildResult)(event, 0, _messages__WEBPACK_IMPORTED_MODULE_5__.OPT_OUT_MESSAGE)];
                        }
                        return [4 /*yield*/, this.timeline.push(event)];
                    case 1:
                        result = _a.sent();
                        result.code === 200
                            ? this.config.loggerProvider.log(result.message)
                            : this.config.loggerProvider.error(result.message);
                        return [2 /*return*/, result];
                    case 2:
                        e_2 = _a.sent();
                        message = String(e_2);
                        this.config.loggerProvider.error(message);
                        result = (0,_utils_result_builder__WEBPACK_IMPORTED_MODULE_4__.buildResult)(event, 0, message);
                        return [2 /*return*/, result];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    AmplitudeCore.prototype.setOptOut = function (optOut) {
        if (!this.config) {
            this.q.push(this.setOptOut.bind(this, Boolean(optOut)));
            return;
        }
        this.config.optOut = Boolean(optOut);
    };
    AmplitudeCore.prototype.flush = function () {
        return (0,_utils_return_wrapper__WEBPACK_IMPORTED_MODULE_3__.returnWrapper)(this.timeline.flush());
    };
    return AmplitudeCore;
}());

//# sourceMappingURL=core-client.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-core/lib/esm/identify.js":
/*!********************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-core/lib/esm/identify.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Identify": () => (/* binding */ Identify)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @amplitude/analytics-types */ "./node_modules/@amplitude/analytics-types/lib/esm/event.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./node_modules/@amplitude/analytics-core/lib/esm/constants.js");
/* harmony import */ var _utils_valid_properties__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/valid-properties */ "./node_modules/@amplitude/analytics-core/lib/esm/utils/valid-properties.js");




var Identify = /** @class */ (function () {
    function Identify() {
        this._propertySet = new Set();
        this._properties = {};
    }
    Identify.prototype.getUserProperties = function () {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, this._properties);
    };
    Identify.prototype.set = function (property, value) {
        this._safeSet(_amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_1__.IdentifyOperation.SET, property, value);
        return this;
    };
    Identify.prototype.setOnce = function (property, value) {
        this._safeSet(_amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_1__.IdentifyOperation.SET_ONCE, property, value);
        return this;
    };
    Identify.prototype.append = function (property, value) {
        this._safeSet(_amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_1__.IdentifyOperation.APPEND, property, value);
        return this;
    };
    Identify.prototype.prepend = function (property, value) {
        this._safeSet(_amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_1__.IdentifyOperation.PREPEND, property, value);
        return this;
    };
    Identify.prototype.postInsert = function (property, value) {
        this._safeSet(_amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_1__.IdentifyOperation.POSTINSERT, property, value);
        return this;
    };
    Identify.prototype.preInsert = function (property, value) {
        this._safeSet(_amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_1__.IdentifyOperation.PREINSERT, property, value);
        return this;
    };
    Identify.prototype.remove = function (property, value) {
        this._safeSet(_amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_1__.IdentifyOperation.REMOVE, property, value);
        return this;
    };
    Identify.prototype.add = function (property, value) {
        this._safeSet(_amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_1__.IdentifyOperation.ADD, property, value);
        return this;
    };
    Identify.prototype.unset = function (property) {
        this._safeSet(_amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_1__.IdentifyOperation.UNSET, property, _constants__WEBPACK_IMPORTED_MODULE_2__.UNSET_VALUE);
        return this;
    };
    Identify.prototype.clearAll = function () {
        // When clear all happens, all properties are unset. Reset the entire object.
        this._properties = {};
        this._properties[_amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_1__.IdentifyOperation.CLEAR_ALL] = _constants__WEBPACK_IMPORTED_MODULE_2__.UNSET_VALUE;
        return this;
    };
    // Returns whether or not this set actually worked.
    Identify.prototype._safeSet = function (operation, property, value) {
        if (this._validate(operation, property, value)) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            var userPropertyMap = this._properties[operation];
            if (userPropertyMap === undefined) {
                userPropertyMap = {};
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                this._properties[operation] = userPropertyMap;
            }
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            userPropertyMap[property] = value;
            this._propertySet.add(property);
            return true;
        }
        return false;
    };
    Identify.prototype._validate = function (operation, property, value) {
        if (this._properties[_amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_1__.IdentifyOperation.CLEAR_ALL] !== undefined) {
            // clear all already set. Skipping operation;
            return false;
        }
        if (this._propertySet.has(property)) {
            // Property already used. Skipping operation
            return false;
        }
        if (operation === _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_1__.IdentifyOperation.ADD) {
            return typeof value === 'number';
        }
        if (operation !== _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_1__.IdentifyOperation.UNSET && operation !== _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_1__.IdentifyOperation.REMOVE) {
            return (0,_utils_valid_properties__WEBPACK_IMPORTED_MODULE_3__.isValidProperties)(property, value);
        }
        return true;
    };
    return Identify;
}());

//# sourceMappingURL=identify.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-core/lib/esm/logger.js":
/*!******************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-core/lib/esm/logger.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Logger": () => (/* binding */ Logger)
/* harmony export */ });
/* harmony import */ var _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @amplitude/analytics-types */ "./node_modules/@amplitude/analytics-types/lib/esm/logger.js");

var PREFIX = 'Amplitude Logger ';
var Logger = /** @class */ (function () {
    function Logger() {
        this.logLevel = _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.None;
    }
    Logger.prototype.disable = function () {
        this.logLevel = _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.None;
    };
    Logger.prototype.enable = function (logLevel) {
        if (logLevel === void 0) { logLevel = _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Warn; }
        this.logLevel = logLevel;
    };
    Logger.prototype.log = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (this.logLevel < _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Verbose) {
            return;
        }
        console.log("".concat(PREFIX, "[Log]: ").concat(args.join(' ')));
    };
    Logger.prototype.warn = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (this.logLevel < _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Warn) {
            return;
        }
        console.warn("".concat(PREFIX, "[Warn]: ").concat(args.join(' ')));
    };
    Logger.prototype.error = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (this.logLevel < _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Error) {
            return;
        }
        console.error("".concat(PREFIX, "[Error]: ").concat(args.join(' ')));
    };
    Logger.prototype.debug = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (this.logLevel < _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Debug) {
            return;
        }
        // console.debug output is hidden by default in chrome
        console.log("".concat(PREFIX, "[Debug]: ").concat(args.join(' ')));
    };
    return Logger;
}());

//# sourceMappingURL=logger.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-core/lib/esm/messages.js":
/*!********************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-core/lib/esm/messages.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CLIENT_NOT_INITIALIZED": () => (/* binding */ CLIENT_NOT_INITIALIZED),
/* harmony export */   "INVALID_API_KEY": () => (/* binding */ INVALID_API_KEY),
/* harmony export */   "MAX_RETRIES_EXCEEDED_MESSAGE": () => (/* binding */ MAX_RETRIES_EXCEEDED_MESSAGE),
/* harmony export */   "MISSING_API_KEY_MESSAGE": () => (/* binding */ MISSING_API_KEY_MESSAGE),
/* harmony export */   "OPT_OUT_MESSAGE": () => (/* binding */ OPT_OUT_MESSAGE),
/* harmony export */   "SUCCESS_MESSAGE": () => (/* binding */ SUCCESS_MESSAGE),
/* harmony export */   "UNEXPECTED_ERROR_MESSAGE": () => (/* binding */ UNEXPECTED_ERROR_MESSAGE)
/* harmony export */ });
var SUCCESS_MESSAGE = 'Event tracked successfully';
var UNEXPECTED_ERROR_MESSAGE = 'Unexpected error occurred';
var MAX_RETRIES_EXCEEDED_MESSAGE = 'Event rejected due to exceeded retry count';
var OPT_OUT_MESSAGE = 'Event skipped due to optOut config';
var MISSING_API_KEY_MESSAGE = 'Event rejected due to missing API key';
var INVALID_API_KEY = 'Invalid API key';
var CLIENT_NOT_INITIALIZED = 'Client not initialized';
//# sourceMappingURL=messages.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-core/lib/esm/plugins/destination.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-core/lib/esm/plugins/destination.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Destination": () => (/* binding */ Destination),
/* harmony export */   "getResponseBodyString": () => (/* binding */ getResponseBodyString)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @amplitude/analytics-types */ "./node_modules/@amplitude/analytics-types/lib/esm/status.js");
/* harmony import */ var _messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../messages */ "./node_modules/@amplitude/analytics-core/lib/esm/messages.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants */ "./node_modules/@amplitude/analytics-core/lib/esm/constants.js");
/* harmony import */ var _utils_chunk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/chunk */ "./node_modules/@amplitude/analytics-core/lib/esm/utils/chunk.js");
/* harmony import */ var _utils_result_builder__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/result-builder */ "./node_modules/@amplitude/analytics-core/lib/esm/utils/result-builder.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../config */ "./node_modules/@amplitude/analytics-core/lib/esm/config.js");







function getErrorMessage(error) {
    if (error instanceof Error)
        return error.message;
    return String(error);
}
function getResponseBodyString(res) {
    var responseBodyString = '';
    try {
        if ('body' in res) {
            responseBodyString = JSON.stringify(res.body, null, 2);
        }
    }
    catch (_a) {
        // to avoid crash, but don't care about the error, add comment to avoid empty block lint error
    }
    return responseBodyString;
}
var Destination = /** @class */ (function () {
    function Destination() {
        this.name = 'amplitude';
        this.type = 'destination';
        this.retryTimeout = 1000;
        this.throttleTimeout = 30000;
        this.storageKey = '';
        this.scheduled = null;
        this.queue = [];
    }
    Destination.prototype.setup = function (config) {
        var _a;
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var unsent;
            var _this = this;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.config = config;
                        this.storageKey = "".concat(_constants__WEBPACK_IMPORTED_MODULE_1__.STORAGE_PREFIX, "_").concat(this.config.apiKey.substring(0, 10));
                        return [4 /*yield*/, ((_a = this.config.storageProvider) === null || _a === void 0 ? void 0 : _a.get(this.storageKey))];
                    case 1:
                        unsent = _b.sent();
                        this.saveEvents(); // sets storage to '[]'
                        if (unsent && unsent.length > 0) {
                            void Promise.all(unsent.map(function (event) { return _this.execute(event); })).catch();
                        }
                        return [2 /*return*/, Promise.resolve(undefined)];
                }
            });
        });
    };
    Destination.prototype.execute = function (event) {
        var _this = this;
        return new Promise(function (resolve) {
            var context = {
                event: event,
                attempts: 0,
                callback: function (result) { return resolve(result); },
                timeout: 0,
            };
            void _this.addToQueue(context);
        });
    };
    Destination.prototype.addToQueue = function () {
        var _this = this;
        var list = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            list[_i] = arguments[_i];
        }
        var tryable = list.filter(function (context) {
            if (context.attempts < _this.config.flushMaxRetries) {
                context.attempts += 1;
                return true;
            }
            void _this.fulfillRequest([context], 500, _messages__WEBPACK_IMPORTED_MODULE_2__.MAX_RETRIES_EXCEEDED_MESSAGE);
            return false;
        });
        tryable.forEach(function (context) {
            _this.queue = _this.queue.concat(context);
            if (context.timeout === 0) {
                _this.schedule(_this.config.flushIntervalMillis);
                return;
            }
            setTimeout(function () {
                context.timeout = 0;
                _this.schedule(0);
            }, context.timeout);
        });
        this.saveEvents();
    };
    Destination.prototype.schedule = function (timeout) {
        var _this = this;
        if (this.scheduled)
            return;
        this.scheduled = setTimeout(function () {
            void _this.flush(true).then(function () {
                if (_this.queue.length > 0) {
                    _this.schedule(timeout);
                }
            });
        }, timeout);
    };
    Destination.prototype.flush = function (useRetry) {
        if (useRetry === void 0) { useRetry = false; }
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var list, later, batches;
            var _this = this;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        list = [];
                        later = [];
                        this.queue.forEach(function (context) { return (context.timeout === 0 ? list.push(context) : later.push(context)); });
                        this.queue = later;
                        if (this.scheduled) {
                            clearTimeout(this.scheduled);
                            this.scheduled = null;
                        }
                        batches = (0,_utils_chunk__WEBPACK_IMPORTED_MODULE_3__.chunk)(list, this.config.flushQueueSize);
                        return [4 /*yield*/, Promise.all(batches.map(function (batch) { return _this.send(batch, useRetry); }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Destination.prototype.send = function (list, useRetry) {
        if (useRetry === void 0) { useRetry = true; }
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var payload, serverUrl, res, e_1, errorMessage;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.config.apiKey) {
                            return [2 /*return*/, this.fulfillRequest(list, 400, _messages__WEBPACK_IMPORTED_MODULE_2__.MISSING_API_KEY_MESSAGE)];
                        }
                        payload = {
                            api_key: this.config.apiKey,
                            events: list.map(function (context) {
                                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                                var _a = context.event, extra = _a.extra, eventWithoutExtra = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__rest)(_a, ["extra"]);
                                return eventWithoutExtra;
                            }),
                            options: {
                                min_id_length: this.config.minIdLength,
                            },
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        serverUrl = (0,_config__WEBPACK_IMPORTED_MODULE_4__.createServerConfig)(this.config.serverUrl, this.config.serverZone, this.config.useBatch).serverUrl;
                        return [4 /*yield*/, this.config.transportProvider.send(serverUrl, payload)];
                    case 2:
                        res = _a.sent();
                        if (res === null) {
                            this.fulfillRequest(list, 0, _messages__WEBPACK_IMPORTED_MODULE_2__.UNEXPECTED_ERROR_MESSAGE);
                            return [2 /*return*/];
                        }
                        if (!useRetry) {
                            if ('body' in res) {
                                this.fulfillRequest(list, res.statusCode, "".concat(res.status, ": ").concat(getResponseBodyString(res)));
                            }
                            else {
                                this.fulfillRequest(list, res.statusCode, res.status);
                            }
                            return [2 /*return*/];
                        }
                        this.handleResponse(res, list);
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        errorMessage = getErrorMessage(e_1);
                        this.config.loggerProvider.error(errorMessage);
                        this.fulfillRequest(list, 0, errorMessage);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Destination.prototype.handleResponse = function (res, list) {
        var status = res.status;
        switch (status) {
            case _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_5__.Status.Success: {
                this.handleSuccessResponse(res, list);
                break;
            }
            case _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_5__.Status.Invalid: {
                this.handleInvalidResponse(res, list);
                break;
            }
            case _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_5__.Status.PayloadTooLarge: {
                this.handlePayloadTooLargeResponse(res, list);
                break;
            }
            case _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_5__.Status.RateLimit: {
                this.handleRateLimitResponse(res, list);
                break;
            }
            default: {
                // log intermediate event status before retry
                this.config.loggerProvider.warn("{code: 0, error: \"Status '".concat(status, "' provided for ").concat(list.length, " events\"}"));
                this.handleOtherResponse(list);
                break;
            }
        }
    };
    Destination.prototype.handleSuccessResponse = function (res, list) {
        this.fulfillRequest(list, res.statusCode, _messages__WEBPACK_IMPORTED_MODULE_2__.SUCCESS_MESSAGE);
    };
    Destination.prototype.handleInvalidResponse = function (res, list) {
        var _this = this;
        if (res.body.missingField || res.body.error.startsWith(_messages__WEBPACK_IMPORTED_MODULE_2__.INVALID_API_KEY)) {
            this.fulfillRequest(list, res.statusCode, res.body.error);
            return;
        }
        var dropIndex = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(Object.values(res.body.eventsWithInvalidFields)), false), (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(Object.values(res.body.eventsWithMissingFields)), false), (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(Object.values(res.body.eventsWithInvalidIdLengths)), false), (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(res.body.silencedEvents), false).flat();
        var dropIndexSet = new Set(dropIndex);
        var retry = list.filter(function (context, index) {
            if (dropIndexSet.has(index)) {
                _this.fulfillRequest([context], res.statusCode, res.body.error);
                return;
            }
            return true;
        });
        if (retry.length > 0) {
            // log intermediate event status before retry
            this.config.loggerProvider.warn(getResponseBodyString(res));
        }
        this.addToQueue.apply(this, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(retry), false));
    };
    Destination.prototype.handlePayloadTooLargeResponse = function (res, list) {
        if (list.length === 1) {
            this.fulfillRequest(list, res.statusCode, res.body.error);
            return;
        }
        // log intermediate event status before retry
        this.config.loggerProvider.warn(getResponseBodyString(res));
        this.config.flushQueueSize /= 2;
        this.addToQueue.apply(this, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(list), false));
    };
    Destination.prototype.handleRateLimitResponse = function (res, list) {
        var _this = this;
        var dropUserIds = Object.keys(res.body.exceededDailyQuotaUsers);
        var dropDeviceIds = Object.keys(res.body.exceededDailyQuotaDevices);
        var throttledIndex = res.body.throttledEvents;
        var dropUserIdsSet = new Set(dropUserIds);
        var dropDeviceIdsSet = new Set(dropDeviceIds);
        var throttledIndexSet = new Set(throttledIndex);
        var retry = list.filter(function (context, index) {
            if ((context.event.user_id && dropUserIdsSet.has(context.event.user_id)) ||
                (context.event.device_id && dropDeviceIdsSet.has(context.event.device_id))) {
                _this.fulfillRequest([context], res.statusCode, res.body.error);
                return;
            }
            if (throttledIndexSet.has(index)) {
                context.timeout = _this.throttleTimeout;
            }
            return true;
        });
        if (retry.length > 0) {
            // log intermediate event status before retry
            this.config.loggerProvider.warn(getResponseBodyString(res));
        }
        this.addToQueue.apply(this, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(retry), false));
    };
    Destination.prototype.handleOtherResponse = function (list) {
        var _this = this;
        this.addToQueue.apply(this, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(list.map(function (context) {
            context.timeout = context.attempts * _this.retryTimeout;
            return context;
        })), false));
    };
    Destination.prototype.fulfillRequest = function (list, code, message) {
        this.saveEvents();
        list.forEach(function (context) { return context.callback((0,_utils_result_builder__WEBPACK_IMPORTED_MODULE_6__.buildResult)(context.event, code, message)); });
    };
    /**
     * Saves events to storage
     * This is called on
     * 1) new events are added to queue; or
     * 2) response comes back for a request
     */
    Destination.prototype.saveEvents = function () {
        if (!this.config.storageProvider) {
            return;
        }
        var events = Array.from(this.queue.map(function (context) { return context.event; }));
        void this.config.storageProvider.set(this.storageKey, events);
    };
    return Destination;
}());

//# sourceMappingURL=destination.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-core/lib/esm/revenue.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-core/lib/esm/revenue.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Revenue": () => (/* binding */ Revenue)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @amplitude/analytics-types */ "./node_modules/@amplitude/analytics-types/lib/esm/event.js");
/* harmony import */ var _utils_valid_properties__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/valid-properties */ "./node_modules/@amplitude/analytics-core/lib/esm/utils/valid-properties.js");



var Revenue = /** @class */ (function () {
    function Revenue() {
        this.productId = '';
        this.quantity = 1;
        this.price = 0.0;
    }
    Revenue.prototype.setProductId = function (productId) {
        this.productId = productId;
        return this;
    };
    Revenue.prototype.setQuantity = function (quantity) {
        if (quantity > 0) {
            this.quantity = quantity;
        }
        return this;
    };
    Revenue.prototype.setPrice = function (price) {
        this.price = price;
        return this;
    };
    Revenue.prototype.setRevenueType = function (revenueType) {
        this.revenueType = revenueType;
        return this;
    };
    Revenue.prototype.setRevenue = function (revenue) {
        this.revenue = revenue;
        return this;
    };
    Revenue.prototype.setEventProperties = function (properties) {
        if ((0,_utils_valid_properties__WEBPACK_IMPORTED_MODULE_0__.isValidObject)(properties)) {
            this.properties = properties;
        }
        return this;
    };
    Revenue.prototype.getEventProperties = function () {
        var eventProperties = this.properties ? (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, this.properties) : {};
        eventProperties[_amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_2__.RevenueProperty.REVENUE_PRODUCT_ID] = this.productId;
        eventProperties[_amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_2__.RevenueProperty.REVENUE_QUANTITY] = this.quantity;
        eventProperties[_amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_2__.RevenueProperty.REVENUE_PRICE] = this.price;
        eventProperties[_amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_2__.RevenueProperty.REVENUE_TYPE] = this.revenueType;
        eventProperties[_amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_2__.RevenueProperty.REVENUE] = this.revenue;
        return eventProperties;
    };
    return Revenue;
}());

//# sourceMappingURL=revenue.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-core/lib/esm/storage/memory.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-core/lib/esm/storage/memory.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MemoryStorage": () => (/* binding */ MemoryStorage)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");

var MemoryStorage = /** @class */ (function () {
    function MemoryStorage() {
        this.memoryStorage = new Map();
    }
    MemoryStorage.prototype.isEnabled = function () {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                return [2 /*return*/, true];
            });
        });
    };
    MemoryStorage.prototype.get = function (key) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                return [2 /*return*/, this.memoryStorage.get(key)];
            });
        });
    };
    MemoryStorage.prototype.getRaw = function (key) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var value;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.get(key)];
                    case 1:
                        value = _a.sent();
                        return [2 /*return*/, value ? JSON.stringify(value) : undefined];
                }
            });
        });
    };
    MemoryStorage.prototype.set = function (key, value) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                this.memoryStorage.set(key, value);
                return [2 /*return*/];
            });
        });
    };
    MemoryStorage.prototype.remove = function (key) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                this.memoryStorage.delete(key);
                return [2 /*return*/];
            });
        });
    };
    MemoryStorage.prototype.reset = function () {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                this.memoryStorage.clear();
                return [2 /*return*/];
            });
        });
    };
    return MemoryStorage;
}());

//# sourceMappingURL=memory.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-core/lib/esm/timeline.js":
/*!********************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-core/lib/esm/timeline.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Timeline": () => (/* binding */ Timeline)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _utils_result_builder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/result-builder */ "./node_modules/@amplitude/analytics-core/lib/esm/utils/result-builder.js");
/* harmony import */ var _utils_uuid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/uuid */ "./node_modules/@amplitude/analytics-core/lib/esm/utils/uuid.js");



var Timeline = /** @class */ (function () {
    function Timeline(client) {
        this.client = client;
        this.queue = [];
        // Flag to guarantee one schedule apply is running
        this.applying = false;
        // Flag indicates whether timeline is ready to process event
        // Events collected before timeline is ready will stay in the queue to be processed later
        this.plugins = [];
    }
    Timeline.prototype.register = function (plugin, config) {
        var _a, _b, _c;
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        plugin.name = (_a = plugin.name) !== null && _a !== void 0 ? _a : (0,_utils_uuid__WEBPACK_IMPORTED_MODULE_1__.UUID)();
                        plugin.type = (_b = plugin.type) !== null && _b !== void 0 ? _b : 'enrichment';
                        return [4 /*yield*/, ((_c = plugin.setup) === null || _c === void 0 ? void 0 : _c.call(plugin, config, this.client))];
                    case 1:
                        _d.sent();
                        this.plugins.push(plugin);
                        return [2 /*return*/];
                }
            });
        });
    };
    Timeline.prototype.deregister = function (pluginName) {
        var _a;
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var index, plugin;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        index = this.plugins.findIndex(function (plugin) { return plugin.name === pluginName; });
                        plugin = this.plugins[index];
                        this.plugins.splice(index, 1);
                        return [4 /*yield*/, ((_a = plugin.teardown) === null || _a === void 0 ? void 0 : _a.call(plugin))];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Timeline.prototype.reset = function (client) {
        this.applying = false;
        var plugins = this.plugins;
        plugins.map(function (plugin) { var _a; return (_a = plugin.teardown) === null || _a === void 0 ? void 0 : _a.call(plugin); });
        this.plugins = [];
        this.client = client;
    };
    Timeline.prototype.push = function (event) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.queue.push([event, resolve]);
            _this.scheduleApply(0);
        });
    };
    Timeline.prototype.scheduleApply = function (timeout) {
        var _this = this;
        if (this.applying)
            return;
        this.applying = true;
        setTimeout(function () {
            void _this.apply(_this.queue.shift()).then(function () {
                _this.applying = false;
                if (_this.queue.length > 0) {
                    _this.scheduleApply(0);
                }
            });
        }, timeout);
    };
    Timeline.prototype.apply = function (item) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var _a, event, _b, resolve, before, before_1, before_1_1, plugin, e, e_1_1, enrichment, enrichment_1, enrichment_1_1, plugin, e, e_2_1, destination, executeDestinations;
            var e_1, _c, e_2, _d;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        if (!item) {
                            return [2 /*return*/];
                        }
                        _a = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(item, 1), event = _a[0];
                        _b = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(item, 2), resolve = _b[1];
                        before = this.plugins.filter(function (plugin) { return plugin.type === 'before'; });
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 6, 7, 8]);
                        before_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__values)(before), before_1_1 = before_1.next();
                        _e.label = 2;
                    case 2:
                        if (!!before_1_1.done) return [3 /*break*/, 5];
                        plugin = before_1_1.value;
                        /* istanbul ignore if */
                        if (!plugin.execute) {
                            // do nothing
                            return [3 /*break*/, 4];
                        }
                        return [4 /*yield*/, plugin.execute((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, event))];
                    case 3:
                        e = _e.sent();
                        if (e === null) {
                            resolve({ event: event, code: 0, message: '' });
                            return [2 /*return*/];
                        }
                        else {
                            event = e;
                        }
                        _e.label = 4;
                    case 4:
                        before_1_1 = before_1.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_1_1 = _e.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (before_1_1 && !before_1_1.done && (_c = before_1.return)) _c.call(before_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 8:
                        enrichment = this.plugins.filter(function (plugin) { return plugin.type === 'enrichment' || plugin.type === undefined; });
                        _e.label = 9;
                    case 9:
                        _e.trys.push([9, 14, 15, 16]);
                        enrichment_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__values)(enrichment), enrichment_1_1 = enrichment_1.next();
                        _e.label = 10;
                    case 10:
                        if (!!enrichment_1_1.done) return [3 /*break*/, 13];
                        plugin = enrichment_1_1.value;
                        /* istanbul ignore if */
                        if (!plugin.execute) {
                            // do nothing
                            return [3 /*break*/, 12];
                        }
                        return [4 /*yield*/, plugin.execute((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, event))];
                    case 11:
                        e = _e.sent();
                        if (e === null) {
                            resolve({ event: event, code: 0, message: '' });
                            return [2 /*return*/];
                        }
                        else {
                            event = e;
                        }
                        _e.label = 12;
                    case 12:
                        enrichment_1_1 = enrichment_1.next();
                        return [3 /*break*/, 10];
                    case 13: return [3 /*break*/, 16];
                    case 14:
                        e_2_1 = _e.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 16];
                    case 15:
                        try {
                            if (enrichment_1_1 && !enrichment_1_1.done && (_d = enrichment_1.return)) _d.call(enrichment_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 16:
                        destination = this.plugins.filter(function (plugin) { return plugin.type === 'destination'; });
                        executeDestinations = destination.map(function (plugin) {
                            var eventClone = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, event);
                            return plugin.execute(eventClone).catch(function (e) { return (0,_utils_result_builder__WEBPACK_IMPORTED_MODULE_2__.buildResult)(eventClone, 0, String(e)); });
                        });
                        void Promise.all(executeDestinations).then(function (_a) {
                            var _b = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(_a, 1), result = _b[0];
                            resolve(result);
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    Timeline.prototype.flush = function () {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var queue, destination, executeDestinations;
            var _this = this;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queue = this.queue;
                        this.queue = [];
                        return [4 /*yield*/, Promise.all(queue.map(function (item) { return _this.apply(item); }))];
                    case 1:
                        _a.sent();
                        destination = this.plugins.filter(function (plugin) { return plugin.type === 'destination'; });
                        executeDestinations = destination.map(function (plugin) {
                            return plugin.flush && plugin.flush();
                        });
                        return [4 /*yield*/, Promise.all(executeDestinations)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return Timeline;
}());

//# sourceMappingURL=timeline.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-core/lib/esm/transports/base.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-core/lib/esm/transports/base.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseTransport": () => (/* binding */ BaseTransport)
/* harmony export */ });
/* harmony import */ var _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @amplitude/analytics-types */ "./node_modules/@amplitude/analytics-types/lib/esm/status.js");
/* eslint-disable @typescript-eslint/no-unsafe-argument */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-call */

var BaseTransport = /** @class */ (function () {
    function BaseTransport() {
    }
    BaseTransport.prototype.send = function (_serverUrl, _payload) {
        return Promise.resolve(null);
    };
    BaseTransport.prototype.buildResponse = function (responseJSON) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;
        if (typeof responseJSON !== 'object') {
            return null;
        }
        var statusCode = responseJSON.code || 0;
        var status = this.buildStatus(statusCode);
        switch (status) {
            case _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_0__.Status.Success:
                return {
                    status: status,
                    statusCode: statusCode,
                    body: {
                        eventsIngested: (_a = responseJSON.events_ingested) !== null && _a !== void 0 ? _a : 0,
                        payloadSizeBytes: (_b = responseJSON.payload_size_bytes) !== null && _b !== void 0 ? _b : 0,
                        serverUploadTime: (_c = responseJSON.server_upload_time) !== null && _c !== void 0 ? _c : 0,
                    },
                };
            case _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_0__.Status.Invalid:
                return {
                    status: status,
                    statusCode: statusCode,
                    body: {
                        error: (_d = responseJSON.error) !== null && _d !== void 0 ? _d : '',
                        missingField: (_e = responseJSON.missing_field) !== null && _e !== void 0 ? _e : '',
                        eventsWithInvalidFields: (_f = responseJSON.events_with_invalid_fields) !== null && _f !== void 0 ? _f : {},
                        eventsWithMissingFields: (_g = responseJSON.events_with_missing_fields) !== null && _g !== void 0 ? _g : {},
                        eventsWithInvalidIdLengths: (_h = responseJSON.events_with_invalid_id_lengths) !== null && _h !== void 0 ? _h : {},
                        epsThreshold: (_j = responseJSON.eps_threshold) !== null && _j !== void 0 ? _j : 0,
                        exceededDailyQuotaDevices: (_k = responseJSON.exceeded_daily_quota_devices) !== null && _k !== void 0 ? _k : {},
                        silencedDevices: (_l = responseJSON.silenced_devices) !== null && _l !== void 0 ? _l : [],
                        silencedEvents: (_m = responseJSON.silenced_events) !== null && _m !== void 0 ? _m : [],
                        throttledDevices: (_o = responseJSON.throttled_devices) !== null && _o !== void 0 ? _o : {},
                        throttledEvents: (_p = responseJSON.throttled_events) !== null && _p !== void 0 ? _p : [],
                    },
                };
            case _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_0__.Status.PayloadTooLarge:
                return {
                    status: status,
                    statusCode: statusCode,
                    body: {
                        error: (_q = responseJSON.error) !== null && _q !== void 0 ? _q : '',
                    },
                };
            case _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_0__.Status.RateLimit:
                return {
                    status: status,
                    statusCode: statusCode,
                    body: {
                        error: (_r = responseJSON.error) !== null && _r !== void 0 ? _r : '',
                        epsThreshold: (_s = responseJSON.eps_threshold) !== null && _s !== void 0 ? _s : 0,
                        throttledDevices: (_t = responseJSON.throttled_devices) !== null && _t !== void 0 ? _t : {},
                        throttledUsers: (_u = responseJSON.throttled_users) !== null && _u !== void 0 ? _u : {},
                        exceededDailyQuotaDevices: (_v = responseJSON.exceeded_daily_quota_devices) !== null && _v !== void 0 ? _v : {},
                        exceededDailyQuotaUsers: (_w = responseJSON.exceeded_daily_quota_users) !== null && _w !== void 0 ? _w : {},
                        throttledEvents: (_x = responseJSON.throttled_events) !== null && _x !== void 0 ? _x : [],
                    },
                };
            case _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_0__.Status.Timeout:
            default:
                return {
                    status: status,
                    statusCode: statusCode,
                };
        }
    };
    BaseTransport.prototype.buildStatus = function (code) {
        if (code >= 200 && code < 300) {
            return _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_0__.Status.Success;
        }
        if (code === 429) {
            return _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_0__.Status.RateLimit;
        }
        if (code === 413) {
            return _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_0__.Status.PayloadTooLarge;
        }
        if (code === 408) {
            return _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_0__.Status.Timeout;
        }
        if (code >= 400 && code < 500) {
            return _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_0__.Status.Invalid;
        }
        if (code >= 500) {
            return _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_0__.Status.Failed;
        }
        return _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_0__.Status.Unknown;
    };
    return BaseTransport;
}());

//# sourceMappingURL=base.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-core/lib/esm/utils/chunk.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-core/lib/esm/utils/chunk.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "chunk": () => (/* binding */ chunk)
/* harmony export */ });
// Creates an array of elements split into groups the length of size.
// If array can't be split evenly, the final chunk will be the remaining elements.
// Works similary as https://lodash.com/docs/4.17.15#chunk
var chunk = function (arr, size) {
    var chunkSize = Math.max(size, 1);
    return arr.reduce(function (chunks, element, index) {
        var chunkIndex = Math.floor(index / chunkSize);
        if (!chunks[chunkIndex]) {
            chunks[chunkIndex] = [];
        }
        chunks[chunkIndex].push(element);
        return chunks;
    }, []);
};
//# sourceMappingURL=chunk.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-core/lib/esm/utils/debug.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-core/lib/esm/utils/debug.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "debugWrapper": () => (/* binding */ debugWrapper),
/* harmony export */   "getClientLogConfig": () => (/* binding */ getClientLogConfig),
/* harmony export */   "getClientStates": () => (/* binding */ getClientStates),
/* harmony export */   "getStacktrace": () => (/* binding */ getStacktrace),
/* harmony export */   "getValueByStringPath": () => (/* binding */ getValueByStringPath)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @amplitude/analytics-types */ "./node_modules/@amplitude/analytics-types/lib/esm/logger.js");

/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-non-null-assertion */

var getStacktrace = function (ignoreDepth) {
    if (ignoreDepth === void 0) { ignoreDepth = 0; }
    var trace = new Error().stack || '';
    return trace
        .split('\n')
        .slice(2 + ignoreDepth)
        .map(function (text) { return text.trim(); });
};
// This hook makes sure we always get the latest logger and logLevel.
var getClientLogConfig = function (client) { return function () {
    var _a = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, client.config), logger = _a.loggerProvider, logLevel = _a.logLevel;
    return {
        logger: logger,
        logLevel: logLevel,
    };
}; };
// This is a convenient function to get the attribute from object with string path, similar to lodash '#get'.
var getValueByStringPath = function (obj, path) {
    var e_1, _a;
    path = path.replace(/\[(\w+)\]/g, '.$1'); // convert indexes to properties
    path = path.replace(/^\./, ''); // strip a leading dot
    try {
        for (var _b = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__values)(path.split('.')), _c = _b.next(); !_c.done; _c = _b.next()) {
            var attr = _c.value;
            if (attr in obj) {
                obj = obj[attr];
            }
            else {
                return;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return obj;
};
var getClientStates = function (client, paths) { return function () {
    var e_2, _a;
    var res = {};
    try {
        for (var paths_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__values)(paths), paths_1_1 = paths_1.next(); !paths_1_1.done; paths_1_1 = paths_1.next()) {
            var path = paths_1_1.value;
            res[path] = getValueByStringPath(client, path);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (paths_1_1 && !paths_1_1.done && (_a = paths_1.return)) _a.call(paths_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return res;
}; };
var debugWrapper = function (fn, fnName, getLogConfig, getStates, fnContext) {
    if (fnContext === void 0) { fnContext = null; }
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _a = getLogConfig(), logger = _a.logger, logLevel = _a.logLevel;
        // return early if possible to reduce overhead
        if ((logLevel && logLevel < _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.Debug) || !logLevel || !logger) {
            return fn.apply(fnContext, args);
        }
        var debugContext = {
            type: 'invoke public method',
            name: fnName,
            args: args,
            stacktrace: getStacktrace(1),
            time: {
                start: new Date().toISOString(),
            },
            states: {},
        };
        if (getStates && debugContext.states) {
            debugContext.states.before = getStates();
        }
        var result = fn.apply(fnContext, args);
        if (result && result.promise) {
            // if result is a promise, add the callback
            result.promise.then(function () {
                if (getStates && debugContext.states) {
                    debugContext.states.after = getStates();
                }
                if (debugContext.time) {
                    debugContext.time.end = new Date().toISOString();
                }
                logger.debug(JSON.stringify(debugContext, null, 2));
            });
        }
        else {
            if (getStates && debugContext.states) {
                debugContext.states.after = getStates();
            }
            if (debugContext.time) {
                debugContext.time.end = new Date().toISOString();
            }
            logger.debug(JSON.stringify(debugContext, null, 2));
        }
        return result;
    };
};
//# sourceMappingURL=debug.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-core/lib/esm/utils/event-builder.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-core/lib/esm/utils/event-builder.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createGroupEvent": () => (/* binding */ createGroupEvent),
/* harmony export */   "createGroupIdentifyEvent": () => (/* binding */ createGroupIdentifyEvent),
/* harmony export */   "createIdentifyEvent": () => (/* binding */ createIdentifyEvent),
/* harmony export */   "createRevenueEvent": () => (/* binding */ createRevenueEvent),
/* harmony export */   "createTrackEvent": () => (/* binding */ createTrackEvent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @amplitude/analytics-types */ "./node_modules/@amplitude/analytics-types/lib/esm/event.js");
/* harmony import */ var _identify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../identify */ "./node_modules/@amplitude/analytics-core/lib/esm/identify.js");



var createTrackEvent = function (eventInput, eventProperties, eventOptions) {
    var baseEvent = typeof eventInput === 'string' ? { event_type: eventInput } : eventInput;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, baseEvent), eventOptions), (eventProperties && { event_properties: eventProperties }));
};
var createIdentifyEvent = function (identify, eventOptions) {
    var identifyEvent = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, eventOptions), { event_type: _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_1__.SpecialEventType.IDENTIFY, user_properties: identify.getUserProperties() });
    return identifyEvent;
};
var createGroupIdentifyEvent = function (groupType, groupName, identify, eventOptions) {
    var _a;
    var groupIdentify = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, eventOptions), { event_type: _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_1__.SpecialEventType.GROUP_IDENTIFY, group_properties: identify.getUserProperties(), groups: (_a = {},
            _a[groupType] = groupName,
            _a) });
    return groupIdentify;
};
var createGroupEvent = function (groupType, groupName, eventOptions) {
    var _a;
    var identify = new _identify__WEBPACK_IMPORTED_MODULE_2__.Identify();
    identify.set(groupType, groupName);
    var groupEvent = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, eventOptions), { event_type: _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_1__.SpecialEventType.IDENTIFY, user_properties: identify.getUserProperties(), groups: (_a = {},
            _a[groupType] = groupName,
            _a) });
    return groupEvent;
};
var createRevenueEvent = function (revenue, eventOptions) {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, eventOptions), { event_type: _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_1__.SpecialEventType.REVENUE, event_properties: revenue.getEventProperties() });
};
//# sourceMappingURL=event-builder.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-core/lib/esm/utils/result-builder.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-core/lib/esm/utils/result-builder.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "buildResult": () => (/* binding */ buildResult)
/* harmony export */ });
/* harmony import */ var _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @amplitude/analytics-types */ "./node_modules/@amplitude/analytics-types/lib/esm/status.js");

var buildResult = function (event, code, message) {
    if (code === void 0) { code = 0; }
    if (message === void 0) { message = _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_0__.Status.Unknown; }
    return { event: event, code: code, message: message };
};
//# sourceMappingURL=result-builder.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-core/lib/esm/utils/return-wrapper.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-core/lib/esm/utils/return-wrapper.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "returnWrapper": () => (/* binding */ returnWrapper)
/* harmony export */ });
var returnWrapper = function (awaitable) { return ({
    promise: awaitable || Promise.resolve(),
}); };
//# sourceMappingURL=return-wrapper.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-core/lib/esm/utils/uuid.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-core/lib/esm/utils/uuid.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UUID": () => (/* binding */ UUID)
/* harmony export */ });
/**
 * Source: [jed's gist]{@link https://gist.github.com/982883}.
 * Returns a random v4 UUID of the form xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx,
 * where each x is replaced with a random hexadecimal digit from 0 to f, and
 * y is replaced with a random hexadecimal digit from 8 to b.
 * Used to generate UUIDs for deviceIds.
 * @private
 */
var UUID = function (a) {
    return a // if the placeholder was passed, return
        ? // a random number from 0 to 15
            (a ^ // unless b is 8,
                ((Math.random() * // in which case
                    16) >> // a random number from
                    (a / 4))) // 8 to 11
                .toString(16) // in hexadecimal
        : // or otherwise a concatenated string:
            (String(1e7) + // 10000000 +
                String(-1e3) + // -1000 +
                String(-4e3) + // -4000 +
                String(-8e3) + // -80000000 +
                String(-1e11)) // -100000000000,
                .replace(
            // replacing
            /[018]/g, // zeroes, ones, and eights with
            UUID);
};
//# sourceMappingURL=uuid.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-core/lib/esm/utils/valid-properties.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-core/lib/esm/utils/valid-properties.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isValidObject": () => (/* binding */ isValidObject),
/* harmony export */   "isValidProperties": () => (/* binding */ isValidProperties)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");

var MAX_PROPERTY_KEYS = 1000;
var isValidObject = function (properties) {
    if (Object.keys(properties).length > MAX_PROPERTY_KEYS) {
        return false;
    }
    for (var key in properties) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        var value = properties[key];
        if (!isValidProperties(key, value))
            return false;
    }
    return true;
};
var isValidProperties = function (property, value) {
    var e_1, _a;
    if (typeof property !== 'string')
        return false;
    if (Array.isArray(value)) {
        var isValid = true;
        try {
            for (var value_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__values)(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
                var valueElement = value_1_1.value;
                if (Array.isArray(valueElement)) {
                    return false;
                }
                else if (typeof valueElement === 'object') {
                    isValid = isValid && isValidObject(valueElement);
                }
                else if (!['number', 'string'].includes(typeof valueElement)) {
                    return false;
                }
                if (!isValid) {
                    return false;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (value_1_1 && !value_1_1.done && (_a = value_1.return)) _a.call(value_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    else if (value === null || value === undefined) {
        return false;
    }
    else if (typeof value === 'object') {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        return isValidObject(value);
    }
    else if (!['number', 'string', 'boolean'].includes(typeof value)) {
        return false;
    }
    return true;
};
//# sourceMappingURL=valid-properties.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-types/lib/esm/event.js":
/*!******************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-types/lib/esm/event.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IdentifyOperation": () => (/* binding */ IdentifyOperation),
/* harmony export */   "RevenueProperty": () => (/* binding */ RevenueProperty),
/* harmony export */   "SpecialEventType": () => (/* binding */ SpecialEventType)
/* harmony export */ });
var IdentifyOperation;
(function (IdentifyOperation) {
    // Base Operations to set values
    IdentifyOperation["SET"] = "$set";
    IdentifyOperation["SET_ONCE"] = "$setOnce";
    // Operations around modifying existing values
    IdentifyOperation["ADD"] = "$add";
    IdentifyOperation["APPEND"] = "$append";
    IdentifyOperation["PREPEND"] = "$prepend";
    IdentifyOperation["REMOVE"] = "$remove";
    // Operations around appending values *if* they aren't present
    IdentifyOperation["PREINSERT"] = "$preInsert";
    IdentifyOperation["POSTINSERT"] = "$postInsert";
    // Operations around removing properties/values
    IdentifyOperation["UNSET"] = "$unset";
    IdentifyOperation["CLEAR_ALL"] = "$clearAll";
})(IdentifyOperation || (IdentifyOperation = {}));
var RevenueProperty;
(function (RevenueProperty) {
    RevenueProperty["REVENUE_PRODUCT_ID"] = "$productId";
    RevenueProperty["REVENUE_QUANTITY"] = "$quantity";
    RevenueProperty["REVENUE_PRICE"] = "$price";
    RevenueProperty["REVENUE_TYPE"] = "$revenueType";
    RevenueProperty["REVENUE"] = "$revenue";
})(RevenueProperty || (RevenueProperty = {}));
/**
 * Strings that have special meaning when used as an event's type
 * and have different specifications.
 */
var SpecialEventType;
(function (SpecialEventType) {
    SpecialEventType["IDENTIFY"] = "$identify";
    SpecialEventType["GROUP_IDENTIFY"] = "$groupidentify";
    SpecialEventType["REVENUE"] = "revenue_amount";
})(SpecialEventType || (SpecialEventType = {}));
//# sourceMappingURL=event.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-types/lib/esm/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-types/lib/esm/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IdentifyOperation": () => (/* reexport safe */ _event__WEBPACK_IMPORTED_MODULE_0__.IdentifyOperation),
/* harmony export */   "LogLevel": () => (/* reexport safe */ _logger__WEBPACK_IMPORTED_MODULE_1__.LogLevel),
/* harmony export */   "RevenueProperty": () => (/* reexport safe */ _event__WEBPACK_IMPORTED_MODULE_0__.RevenueProperty),
/* harmony export */   "ServerZone": () => (/* reexport safe */ _server_zone__WEBPACK_IMPORTED_MODULE_2__.ServerZone),
/* harmony export */   "SpecialEventType": () => (/* reexport safe */ _event__WEBPACK_IMPORTED_MODULE_0__.SpecialEventType),
/* harmony export */   "Status": () => (/* reexport safe */ _status__WEBPACK_IMPORTED_MODULE_3__.Status)
/* harmony export */ });
/* harmony import */ var _event__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./event */ "./node_modules/@amplitude/analytics-types/lib/esm/event.js");
/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logger */ "./node_modules/@amplitude/analytics-types/lib/esm/logger.js");
/* harmony import */ var _server_zone__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./server-zone */ "./node_modules/@amplitude/analytics-types/lib/esm/server-zone.js");
/* harmony import */ var _status__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./status */ "./node_modules/@amplitude/analytics-types/lib/esm/status.js");




//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-types/lib/esm/logger.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-types/lib/esm/logger.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LogLevel": () => (/* binding */ LogLevel)
/* harmony export */ });
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["None"] = 0] = "None";
    LogLevel[LogLevel["Error"] = 1] = "Error";
    LogLevel[LogLevel["Warn"] = 2] = "Warn";
    LogLevel[LogLevel["Verbose"] = 3] = "Verbose";
    LogLevel[LogLevel["Debug"] = 4] = "Debug";
})(LogLevel || (LogLevel = {}));
//# sourceMappingURL=logger.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-types/lib/esm/server-zone.js":
/*!************************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-types/lib/esm/server-zone.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ServerZone": () => (/* binding */ ServerZone)
/* harmony export */ });
/**
 * @deprecated use ServerZoneType instead
 */
var ServerZone;
(function (ServerZone) {
    ServerZone["US"] = "US";
    ServerZone["EU"] = "EU";
})(ServerZone || (ServerZone = {}));
//# sourceMappingURL=server-zone.js.map

/***/ }),

/***/ "./node_modules/@amplitude/analytics-types/lib/esm/status.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@amplitude/analytics-types/lib/esm/status.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Status": () => (/* binding */ Status)
/* harmony export */ });
/** The status of an event. */
var Status;
(function (Status) {
    /** The status could not be determined. */
    Status["Unknown"] = "unknown";
    /** The event was skipped due to configuration or callbacks. */
    Status["Skipped"] = "skipped";
    /** The event was sent successfully. */
    Status["Success"] = "success";
    /** A user or device in the payload is currently rate limited and should try again later. */
    Status["RateLimit"] = "rate_limit";
    /** The sent payload was too large to be processed. */
    Status["PayloadTooLarge"] = "payload_too_large";
    /** The event could not be processed. */
    Status["Invalid"] = "invalid";
    /** A server-side error ocurred during submission. */
    Status["Failed"] = "failed";
    /** a server or client side error occuring when a request takes too long and is cancelled */
    Status["Timeout"] = "Timeout";
    /** NodeJS runtime environment error.. E.g. disconnected from network */
    Status["SystemError"] = "SystemError";
})(Status || (Status = {}));
//# sourceMappingURL=status.js.map

/***/ }),

/***/ "./node_modules/@amplitude/plugin-page-view-tracking-browser/lib/esm/page-view-tracking.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@amplitude/plugin-page-view-tracking-browser/lib/esm/page-view-tracking.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pageViewTrackingPlugin": () => (/* binding */ pageViewTrackingPlugin),
/* harmony export */   "shouldTrackHistoryPageView": () => (/* binding */ shouldTrackHistoryPageView)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @amplitude/analytics-client-common */ "./node_modules/@amplitude/analytics-client-common/lib/esm/global-scope.js");
/* harmony import */ var _amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @amplitude/analytics-client-common */ "./node_modules/@amplitude/analytics-client-common/lib/esm/attribution/campaign-parser.js");
/* harmony import */ var _amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @amplitude/analytics-types */ "./node_modules/@amplitude/analytics-types/lib/esm/event.js");
/* harmony import */ var _amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @amplitude/analytics-client-common */ "./node_modules/@amplitude/analytics-client-common/lib/esm/attribution/constants.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ "./node_modules/@amplitude/plugin-page-view-tracking-browser/lib/esm/utils.js");





var pageViewTrackingPlugin = function (options) {
    if (options === void 0) { options = {}; }
    var amplitude;
    var globalScope = (0,_amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_0__.getGlobalScope)();
    var loggerProvider = undefined;
    var pushState;
    var createPageViewEvent = function () { return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(void 0, void 0, void 0, function () {
        var _a;
        var _b;
        var _c;
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _b = {
                        event_type: (_c = options.eventType) !== null && _c !== void 0 ? _c : '[Amplitude] Page Viewed'
                    };
                    _a = [{}];
                    return [4 /*yield*/, getCampaignParams()];
                case 1: return [2 /*return*/, (_b.event_properties = tslib__WEBPACK_IMPORTED_MODULE_1__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_1__.__assign.apply(void 0, _a.concat([(_d.sent())])), { '[Amplitude] Page Domain': 
                            /* istanbul ignore next */ (typeof location !== 'undefined' && location.hostname) || '', '[Amplitude] Page Location': 
                            /* istanbul ignore next */ (typeof location !== 'undefined' && location.href) || '', '[Amplitude] Page Path': 
                            /* istanbul ignore next */ (typeof location !== 'undefined' && location.pathname) || '', '[Amplitude] Page Title': /* istanbul ignore next */ (typeof document !== 'undefined' && document.title) || '', '[Amplitude] Page URL': 
                            /* istanbul ignore next */ (typeof location !== 'undefined' && location.href.split('?')[0]) || '' }]),
                        _b)];
            }
        });
    }); };
    var shouldTrackOnPageLoad = function () {
        return typeof options.trackOn === 'undefined' || (typeof options.trackOn === 'function' && options.trackOn());
    };
    /* istanbul ignore next */
    var previousURL = typeof location !== 'undefined' ? location.href : null;
    var trackHistoryPageView = function () { return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(void 0, void 0, void 0, function () {
        var newURL, shouldTrackPageView, _a, _b, _c;
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_d) {
            switch (_d.label) {
                case 0:
                    newURL = location.href;
                    shouldTrackPageView = shouldTrackHistoryPageView(options.trackHistoryChanges, newURL, previousURL || '') && shouldTrackOnPageLoad();
                    // Note: Update `previousURL` in the same clock tick as `shouldTrackHistoryPageView()`
                    // This was previously done after `amplitude?.track(await createPageViewEvent());` and
                    // causes a concurrency issue where app triggers `pushState` twice with the same URL target
                    // but `previousURL` is only updated after the second `pushState` producing two page viewed events
                    previousURL = newURL;
                    if (!shouldTrackPageView) return [3 /*break*/, 4];
                    /* istanbul ignore next */
                    loggerProvider === null || loggerProvider === void 0 ? void 0 : loggerProvider.log('Tracking page view event');
                    if (!(amplitude === null || amplitude === void 0)) return [3 /*break*/, 1];
                    _a = void 0;
                    return [3 /*break*/, 3];
                case 1:
                    _c = (_b = amplitude).track;
                    return [4 /*yield*/, createPageViewEvent()];
                case 2:
                    _a = _c.apply(_b, [_d.sent()]);
                    _d.label = 3;
                case 3:
                    _a;
                    _d.label = 4;
                case 4: return [2 /*return*/];
            }
        });
    }); };
    /* istanbul ignore next */
    var trackHistoryPageViewWrapper = function () {
        void trackHistoryPageView();
    };
    var plugin = {
        name: '@amplitude/plugin-page-view-tracking-browser',
        type: 'enrichment',
        setup: function (config, client) { return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(void 0, void 0, void 0, function () {
            var _a, _b;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        amplitude = client;
                        loggerProvider = config.loggerProvider;
                        loggerProvider.log('Installing @amplitude/plugin-page-view-tracking-browser');
                        if (globalScope) {
                            globalScope.addEventListener('popstate', trackHistoryPageViewWrapper);
                            // Save reference to original push state, to be used in teardown
                            // eslint-disable-next-line @typescript-eslint/unbound-method
                            pushState = globalScope.history.pushState;
                            /* istanbul ignore next */
                            // There is no global browser listener for changes to history, so we have
                            // to modify pushState directly.
                            // https://stackoverflow.com/a/64927639
                            // eslint-disable-next-line @typescript-eslint/unbound-method
                            globalScope.history.pushState = new Proxy(globalScope.history.pushState, {
                                apply: function (target, thisArg, _a) {
                                    var _b = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)(_a, 3), state = _b[0], unused = _b[1], url = _b[2];
                                    target.apply(thisArg, [state, unused, url]);
                                    void trackHistoryPageView();
                                },
                            });
                        }
                        if (!shouldTrackOnPageLoad()) return [3 /*break*/, 2];
                        loggerProvider.log('Tracking page view event');
                        _b = (_a = amplitude).track;
                        return [4 /*yield*/, createPageViewEvent()];
                    case 1:
                        _b.apply(_a, [_c.sent()]);
                        _c.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        }); },
        execute: function (event) { return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(void 0, void 0, void 0, function () {
            var pageViewEvent;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(options.trackOn === 'attribution' && isCampaignEvent(event))) return [3 /*break*/, 2];
                        /* istanbul ignore next */ // loggerProvider should be defined by the time execute is invoked
                        loggerProvider === null || loggerProvider === void 0 ? void 0 : loggerProvider.log('Enriching campaign event to page view event with campaign parameters');
                        return [4 /*yield*/, createPageViewEvent()];
                    case 1:
                        pageViewEvent = _a.sent();
                        event.event_type = pageViewEvent.event_type;
                        event.event_properties = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, event.event_properties), pageViewEvent.event_properties);
                        _a.label = 2;
                    case 2: return [2 /*return*/, event];
                }
            });
        }); },
        teardown: function () { return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(void 0, void 0, void 0, function () {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                if (globalScope) {
                    globalScope.removeEventListener('popstate', trackHistoryPageViewWrapper);
                    if (pushState) {
                        globalScope.history.pushState = pushState;
                    }
                }
                return [2 /*return*/];
            });
        }); },
    };
    return plugin;
};
var getCampaignParams = function () { return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(void 0, void 0, void 0, function () { var _a; return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_b) {
    switch (_b.label) {
        case 0:
            _a = _utils__WEBPACK_IMPORTED_MODULE_2__.omitUndefined;
            return [4 /*yield*/, new _amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_3__.CampaignParser().parse()];
        case 1: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];
    }
}); }); };
var isCampaignEvent = function (event) {
    if (event.event_type === '$identify' && event.user_properties) {
        var properties = event.user_properties;
        var $set = properties[_amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_4__.IdentifyOperation.SET] || {};
        var $unset = properties[_amplitude_analytics_types__WEBPACK_IMPORTED_MODULE_4__.IdentifyOperation.UNSET] || {};
        var userProperties_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)(Object.keys($set)), false), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)(Object.keys($unset)), false);
        return Object.keys(_amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_5__.BASE_CAMPAIGN).every(function (value) { return userProperties_1.includes(value); });
    }
    return false;
};
var shouldTrackHistoryPageView = function (trackingOption, newURL, oldURL) {
    switch (trackingOption) {
        case 'pathOnly':
            return newURL.split('?')[0] !== oldURL.split('?')[0];
        default:
            return newURL !== oldURL;
    }
};
//# sourceMappingURL=page-view-tracking.js.map

/***/ }),

/***/ "./node_modules/@amplitude/plugin-page-view-tracking-browser/lib/esm/utils.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@amplitude/plugin-page-view-tracking-browser/lib/esm/utils.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "omitUndefined": () => (/* binding */ omitUndefined)
/* harmony export */ });
var omitUndefined = function (input) {
    var obj = {};
    for (var key in input) {
        var val = input[key];
        if (val) {
            obj[key] = val;
        }
    }
    return obj;
};
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@amplitude/plugin-web-attribution-browser/lib/esm/helpers.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@amplitude/plugin-web-attribution-browser/lib/esm/helpers.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createCampaignEvent": () => (/* binding */ createCampaignEvent),
/* harmony export */   "getDefaultExcludedReferrers": () => (/* binding */ getDefaultExcludedReferrers),
/* harmony export */   "getStorageKey": () => (/* binding */ getStorageKey),
/* harmony export */   "isExcludedReferrer": () => (/* binding */ isExcludedReferrer),
/* harmony export */   "isNewCampaign": () => (/* binding */ isNewCampaign)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @amplitude/analytics-client-common */ "./node_modules/@amplitude/analytics-client-common/lib/esm/attribution/constants.js");
/* harmony import */ var _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @amplitude/analytics-core */ "./node_modules/@amplitude/analytics-core/lib/esm/constants.js");
/* harmony import */ var _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @amplitude/analytics-core */ "./node_modules/@amplitude/analytics-core/lib/esm/identify.js");
/* harmony import */ var _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @amplitude/analytics-core */ "./node_modules/@amplitude/analytics-core/lib/esm/utils/event-builder.js");



var getStorageKey = function (apiKey, postKey, limit) {
    if (postKey === void 0) { postKey = ''; }
    if (limit === void 0) { limit = 10; }
    return [_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_0__.AMPLITUDE_PREFIX, postKey, apiKey.substring(0, limit)].filter(Boolean).join('_');
};
var domainWithoutSubdomain = function (domain) {
    var parts = domain.split('.');
    if (parts.length <= 2) {
        return domain;
    }
    return parts.slice(parts.length - 2, parts.length).join('.');
};
var isNewCampaign = function (current, previous, options) {
    var referrer = current.referrer, referring_domain = current.referring_domain, currentCampaign = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__rest)(current, ["referrer", "referring_domain"]);
    var _a = previous || {}, _previous_referrer = _a.referrer, prevReferringDomain = _a.referring_domain, previousCampaign = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__rest)(_a, ["referrer", "referring_domain"]);
    if (isExcludedReferrer(options.excludeReferrers, current.referring_domain)) {
        return false;
    }
    var hasNewCampaign = JSON.stringify(currentCampaign) !== JSON.stringify(previousCampaign);
    var hasNewDomain = domainWithoutSubdomain(referring_domain || '') !== domainWithoutSubdomain(prevReferringDomain || '');
    return !previous || hasNewCampaign || hasNewDomain;
};
var isExcludedReferrer = function (excludeReferrers, referringDomain) {
    if (excludeReferrers === void 0) { excludeReferrers = []; }
    if (referringDomain === void 0) { referringDomain = ''; }
    return excludeReferrers.some(function (value) {
        return value instanceof RegExp ? value.test(referringDomain) : value === referringDomain;
    });
};
var createCampaignEvent = function (campaign, options) {
    var campaignParameters = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_2__.BASE_CAMPAIGN), campaign);
    var identifyEvent = Object.entries(campaignParameters).reduce(function (identify, _a) {
        var _b;
        var _c = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)(_a, 2), key = _c[0], value = _c[1];
        identify.setOnce("initial_".concat(key), (_b = value !== null && value !== void 0 ? value : options.initialEmptyValue) !== null && _b !== void 0 ? _b : 'EMPTY');
        if (value) {
            return identify.set(key, value);
        }
        return identify.unset(key);
    }, new _amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_3__.Identify());
    return (0,_amplitude_analytics_core__WEBPACK_IMPORTED_MODULE_4__.createIdentifyEvent)(identifyEvent);
};
var getDefaultExcludedReferrers = function (cookieDomain) {
    var domain = cookieDomain;
    if (domain) {
        if (domain.startsWith('.')) {
            domain = domain.substring(1);
        }
        return [new RegExp("".concat(domain.replace('.', '\\.'), "$"))];
    }
    return [];
};
//# sourceMappingURL=helpers.js.map

/***/ }),

/***/ "./node_modules/@amplitude/plugin-web-attribution-browser/lib/esm/web-attribution.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@amplitude/plugin-web-attribution-browser/lib/esm/web-attribution.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "webAttributionPlugin": () => (/* binding */ webAttributionPlugin)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @amplitude/analytics-client-common */ "./node_modules/@amplitude/analytics-client-common/lib/esm/attribution/campaign-parser.js");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers */ "./node_modules/@amplitude/plugin-web-attribution-browser/lib/esm/helpers.js");



var webAttributionPlugin = function (options) {
    var _this = this;
    if (options === void 0) { options = {}; }
    var plugin = {
        name: '@amplitude/plugin-web-attribution-browser',
        type: 'before',
        setup: function (config, amplitude) {
            var _a;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
                var pluginConfig, storage, storageKey, _b, currentCampaign, previousCampaign, campaignEvent;
                return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            pluginConfig = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({ initialEmptyValue: 'EMPTY', resetSessionOnNewCampaign: false, excludeReferrers: (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.getDefaultExcludedReferrers)((_a = config.cookieOptions) === null || _a === void 0 ? void 0 : _a.domain) }, options);
                            config.loggerProvider.log('Installing @amplitude/plugin-web-attribution-browser.');
                            storage = config.cookieStorage;
                            storageKey = (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.getStorageKey)(config.apiKey, 'MKTG');
                            return [4 /*yield*/, Promise.all([
                                    new _amplitude_analytics_client_common__WEBPACK_IMPORTED_MODULE_2__.CampaignParser().parse(),
                                    storage.get(storageKey),
                                ])];
                        case 1:
                            _b = tslib__WEBPACK_IMPORTED_MODULE_0__.__read.apply(void 0, [_c.sent(), 2]), currentCampaign = _b[0], previousCampaign = _b[1];
                            if ((0,_helpers__WEBPACK_IMPORTED_MODULE_1__.isNewCampaign)(currentCampaign, previousCampaign, pluginConfig)) {
                                if (pluginConfig.resetSessionOnNewCampaign) {
                                    amplitude.setSessionId(Date.now());
                                    config.loggerProvider.log('Created a new session for new campaign.');
                                }
                                config.loggerProvider.log('Tracking attribution.');
                                campaignEvent = (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.createCampaignEvent)(currentCampaign, pluginConfig);
                                amplitude.track(campaignEvent);
                                void storage.set(storageKey, currentCampaign);
                            }
                            return [2 /*return*/];
                    }
                });
            });
        },
        execute: function (event) { return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(_this, void 0, void 0, function () { return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
            return [2 /*return*/, event];
        }); }); },
    };
    return plugin;
};
//# sourceMappingURL=web-attribution.js.map

/***/ }),

/***/ "./node_modules/bent/src/browser.js":
/*!******************************************!*\
  !*** ./node_modules/bent/src/browser.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

/* global fetch, btoa, Headers */
const core = __webpack_require__(/*! ./core */ "./node_modules/bent/src/core.js")

class StatusError extends Error {
  constructor (res, ...params) {
    super(...params)

    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, StatusError)
    }

    this.name = 'StatusError'
    this.message = res.statusMessage
    this.statusCode = res.status
    this.res = res
    this.json = res.json.bind(res)
    this.text = res.text.bind(res)
    this.arrayBuffer = res.arrayBuffer.bind(res)
    let buffer
    const get = () => {
      if (!buffer) buffer = this.arrayBuffer()
      return buffer
    }
    Object.defineProperty(this, 'responseBody', { get })
    // match Node.js headers object
    this.headers = {}
    for (const [key, value] of res.headers.entries()) {
      this.headers[key.toLowerCase()] = value
    }
  }
}

const mkrequest = (statusCodes, method, encoding, headers, baseurl) => async (_url, body, _headers = {}) => {
  _url = baseurl + (_url || '')
  let parsed = new URL(_url)

  if (!headers) headers = {}
  if (parsed.username) {
    headers.Authorization = 'Basic ' + btoa(parsed.username + ':' + parsed.password)
    parsed = new URL(parsed.protocol + '//' + parsed.host + parsed.pathname + parsed.search)
  }
  if (parsed.protocol !== 'https:' && parsed.protocol !== 'http:') {
    throw new Error(`Unknown protocol, ${parsed.protocol}`)
  }

  if (body) {
    if (body instanceof ArrayBuffer ||
      ArrayBuffer.isView(body) ||
      typeof body === 'string'
    ) {
      // noop
    } else if (typeof body === 'object') {
      body = JSON.stringify(body)
      headers['Content-Type'] = 'application/json'
    } else {
      throw new Error('Unknown body type.')
    }
  }

  _headers = new Headers({ ...(headers || {}), ..._headers })

  const resp = await fetch(parsed, { method, headers: _headers, body })
  resp.statusCode = resp.status

  if (!statusCodes.has(resp.status)) {
    throw new StatusError(resp)
  }

  if (encoding === 'json') return resp.json()
  else if (encoding === 'buffer') return resp.arrayBuffer()
  else if (encoding === 'string') return resp.text()
  else return resp
}

module.exports = core(mkrequest)


/***/ }),

/***/ "./node_modules/bent/src/core.js":
/*!***************************************!*\
  !*** ./node_modules/bent/src/core.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";

const encodings = new Set(['json', 'buffer', 'string'])

module.exports = mkrequest => (...args) => {
  const statusCodes = new Set()
  let method
  let encoding
  let headers
  let baseurl = ''

  args.forEach(arg => {
    if (typeof arg === 'string') {
      if (arg.toUpperCase() === arg) {
        if (method) {
          const msg = `Can't set method to ${arg}, already set to ${method}.`
          throw new Error(msg)
        } else {
          method = arg
        }
      } else if (arg.startsWith('http:') || arg.startsWith('https:')) {
        baseurl = arg
      } else {
        if (encodings.has(arg)) {
          encoding = arg
        } else {
          throw new Error(`Unknown encoding, ${arg}`)
        }
      }
    } else if (typeof arg === 'number') {
      statusCodes.add(arg)
    } else if (typeof arg === 'object') {
      if (Array.isArray(arg) || arg instanceof Set) {
        arg.forEach(code => statusCodes.add(code))
      } else {
        if (headers) {
          throw new Error('Cannot set headers twice.')
        }
        headers = arg
      }
    } else {
      throw new Error(`Unknown type: ${typeof arg}`)
    }
  })

  if (!method) method = 'GET'
  if (statusCodes.size === 0) {
    statusCodes.add(200)
  }

  return mkrequest(statusCodes, method, encoding, headers, baseurl)
}


/***/ }),

/***/ "./node_modules/content-type/index.js":
/*!********************************************!*\
  !*** ./node_modules/content-type/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/*!
 * content-type
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * RegExp to match *( ";" parameter ) in RFC 7231 sec 3.1.1.1
 *
 * parameter     = token "=" ( token / quoted-string )
 * token         = 1*tchar
 * tchar         = "!" / "#" / "$" / "%" / "&" / "'" / "*"
 *               / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
 *               / DIGIT / ALPHA
 *               ; any VCHAR, except delimiters
 * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE
 * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text
 * obs-text      = %x80-FF
 * quoted-pair   = "\" ( HTAB / SP / VCHAR / obs-text )
 */
var PARAM_REGEXP = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *("(?:[\u000b\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u000b\u0020-\u00ff])*"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g // eslint-disable-line no-control-regex
var TEXT_REGEXP = /^[\u000b\u0020-\u007e\u0080-\u00ff]+$/ // eslint-disable-line no-control-regex
var TOKEN_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/

/**
 * RegExp to match quoted-pair in RFC 7230 sec 3.2.6
 *
 * quoted-pair = "\" ( HTAB / SP / VCHAR / obs-text )
 * obs-text    = %x80-FF
 */
var QESC_REGEXP = /\\([\u000b\u0020-\u00ff])/g // eslint-disable-line no-control-regex

/**
 * RegExp to match chars that must be quoted-pair in RFC 7230 sec 3.2.6
 */
var QUOTE_REGEXP = /([\\"])/g

/**
 * RegExp to match type in RFC 7231 sec 3.1.1.1
 *
 * media-type = type "/" subtype
 * type       = token
 * subtype    = token
 */
var TYPE_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/

/**
 * Module exports.
 * @public
 */

exports.format = format
exports.parse = parse

/**
 * Format object to media type.
 *
 * @param {object} obj
 * @return {string}
 * @public
 */

function format (obj) {
  if (!obj || typeof obj !== 'object') {
    throw new TypeError('argument obj is required')
  }

  var parameters = obj.parameters
  var type = obj.type

  if (!type || !TYPE_REGEXP.test(type)) {
    throw new TypeError('invalid type')
  }

  var string = type

  // append parameters
  if (parameters && typeof parameters === 'object') {
    var param
    var params = Object.keys(parameters).sort()

    for (var i = 0; i < params.length; i++) {
      param = params[i]

      if (!TOKEN_REGEXP.test(param)) {
        throw new TypeError('invalid parameter name')
      }

      string += '; ' + param + '=' + qstring(parameters[param])
    }
  }

  return string
}

/**
 * Parse media type to object.
 *
 * @param {string|object} string
 * @return {Object}
 * @public
 */

function parse (string) {
  if (!string) {
    throw new TypeError('argument string is required')
  }

  // support req/res-like objects as argument
  var header = typeof string === 'object'
    ? getcontenttype(string)
    : string

  if (typeof header !== 'string') {
    throw new TypeError('argument string is required to be a string')
  }

  var index = header.indexOf(';')
  var type = index !== -1
    ? header.slice(0, index).trim()
    : header.trim()

  if (!TYPE_REGEXP.test(type)) {
    throw new TypeError('invalid media type')
  }

  var obj = new ContentType(type.toLowerCase())

  // parse parameters
  if (index !== -1) {
    var key
    var match
    var value

    PARAM_REGEXP.lastIndex = index

    while ((match = PARAM_REGEXP.exec(header))) {
      if (match.index !== index) {
        throw new TypeError('invalid parameter format')
      }

      index += match[0].length
      key = match[1].toLowerCase()
      value = match[2]

      if (value.charCodeAt(0) === 0x22 /* " */) {
        // remove quotes
        value = value.slice(1, -1)

        // remove escapes
        if (value.indexOf('\\') !== -1) {
          value = value.replace(QESC_REGEXP, '$1')
        }
      }

      obj.parameters[key] = value
    }

    if (index !== header.length) {
      throw new TypeError('invalid parameter format')
    }
  }

  return obj
}

/**
 * Get content-type from req/res objects.
 *
 * @param {object}
 * @return {Object}
 * @private
 */

function getcontenttype (obj) {
  var header

  if (typeof obj.getHeader === 'function') {
    // res-like
    header = obj.getHeader('content-type')
  } else if (typeof obj.headers === 'object') {
    // req-like
    header = obj.headers && obj.headers['content-type']
  }

  if (typeof header !== 'string') {
    throw new TypeError('content-type header is missing from object')
  }

  return header
}

/**
 * Quote a string if necessary.
 *
 * @param {string} val
 * @return {string}
 * @private
 */

function qstring (val) {
  var str = String(val)

  // no need to quote tokens
  if (TOKEN_REGEXP.test(str)) {
    return str
  }

  if (str.length > 0 && !TEXT_REGEXP.test(str)) {
    throw new TypeError('invalid parameter value')
  }

  return '"' + str.replace(QUOTE_REGEXP, '\\$1') + '"'
}

/**
 * Class to represent a content type.
 * @private
 */
function ContentType (type) {
  this.parameters = Object.create(null)
  this.type = type
}


/***/ }),

/***/ "./node_modules/eventsource-parser/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/eventsource-parser/dist/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
function createParser(onParse) {
  let isFirstChunk;
  let buffer;
  let startingPosition;
  let startingFieldLength;
  let eventId;
  let eventName;
  let data;
  reset();
  return {
    feed,
    reset
  };
  function reset() {
    isFirstChunk = true;
    buffer = "";
    startingPosition = 0;
    startingFieldLength = -1;
    eventId = void 0;
    eventName = void 0;
    data = "";
  }
  function feed(chunk) {
    buffer = buffer ? buffer + chunk : chunk;
    if (isFirstChunk && hasBom(buffer)) {
      buffer = buffer.slice(BOM.length);
    }
    isFirstChunk = false;
    const length = buffer.length;
    let position = 0;
    let discardTrailingNewline = false;
    while (position < length) {
      if (discardTrailingNewline) {
        if (buffer[position] === "\n") {
          ++position;
        }
        discardTrailingNewline = false;
      }
      let lineLength = -1;
      let fieldLength = startingFieldLength;
      let character;
      for (let index = startingPosition; lineLength < 0 && index < length; ++index) {
        character = buffer[index];
        if (character === ":" && fieldLength < 0) {
          fieldLength = index - position;
        } else if (character === "\r") {
          discardTrailingNewline = true;
          lineLength = index - position;
        } else if (character === "\n") {
          lineLength = index - position;
        }
      }
      if (lineLength < 0) {
        startingPosition = length - position;
        startingFieldLength = fieldLength;
        break;
      } else {
        startingPosition = 0;
        startingFieldLength = -1;
      }
      parseEventStreamLine(buffer, position, fieldLength, lineLength);
      position += lineLength + 1;
    }
    if (position === length) {
      buffer = "";
    } else if (position > 0) {
      buffer = buffer.slice(position);
    }
  }
  function parseEventStreamLine(lineBuffer, index, fieldLength, lineLength) {
    if (lineLength === 0) {
      if (data.length > 0) {
        onParse({
          type: "event",
          id: eventId,
          event: eventName || void 0,
          data: data.slice(0, -1)
          // remove trailing newline
        });

        data = "";
        eventId = void 0;
      }
      eventName = void 0;
      return;
    }
    const noValue = fieldLength < 0;
    const field = lineBuffer.slice(index, index + (noValue ? lineLength : fieldLength));
    let step = 0;
    if (noValue) {
      step = lineLength;
    } else if (lineBuffer[index + fieldLength + 1] === " ") {
      step = fieldLength + 2;
    } else {
      step = fieldLength + 1;
    }
    const position = index + step;
    const valueLength = lineLength - step;
    const value = lineBuffer.slice(position, position + valueLength).toString();
    if (field === "data") {
      data += value ? "".concat(value, "\n") : "\n";
    } else if (field === "event") {
      eventName = value;
    } else if (field === "id" && !value.includes("\0")) {
      eventId = value;
    } else if (field === "retry") {
      const retry = parseInt(value, 10);
      if (!Number.isNaN(retry)) {
        onParse({
          type: "reconnect-interval",
          value: retry
        });
      }
    }
  }
}
const BOM = [239, 187, 191];
function hasBom(buffer) {
  return BOM.every((charCode, index) => buffer.charCodeAt(index) === charCode);
}
exports.createParser = createParser;
//# sourceMappingURL=index.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/microsoft.cognitiveservices.speech.sdk.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/microsoft.cognitiveservices.speech.sdk.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ActivityReceivedEventArgs": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.ActivityReceivedEventArgs),
/* harmony export */   "AudioConfig": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.AudioConfig),
/* harmony export */   "AudioFormatTag": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.AudioFormatTag),
/* harmony export */   "AudioInputStream": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.AudioInputStream),
/* harmony export */   "AudioOutputStream": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.AudioOutputStream),
/* harmony export */   "AudioStreamFormat": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.AudioStreamFormat),
/* harmony export */   "AutoDetectSourceLanguageConfig": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.AutoDetectSourceLanguageConfig),
/* harmony export */   "AutoDetectSourceLanguageResult": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.AutoDetectSourceLanguageResult),
/* harmony export */   "BaseAudioPlayer": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.BaseAudioPlayer),
/* harmony export */   "BotFrameworkConfig": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.BotFrameworkConfig),
/* harmony export */   "CancellationDetails": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.CancellationDetails),
/* harmony export */   "CancellationDetailsBase": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.CancellationDetailsBase),
/* harmony export */   "CancellationErrorCode": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.CancellationErrorCode),
/* harmony export */   "CancellationReason": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.CancellationReason),
/* harmony export */   "Connection": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.Connection),
/* harmony export */   "ConnectionEventArgs": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.ConnectionEventArgs),
/* harmony export */   "ConnectionMessage": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.ConnectionMessage),
/* harmony export */   "ConnectionMessageEventArgs": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.ConnectionMessageEventArgs),
/* harmony export */   "Conversation": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.Conversation),
/* harmony export */   "ConversationExpirationEventArgs": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.ConversationExpirationEventArgs),
/* harmony export */   "ConversationParticipantsChangedEventArgs": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.ConversationParticipantsChangedEventArgs),
/* harmony export */   "ConversationTranscriber": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.ConversationTranscriber),
/* harmony export */   "ConversationTranscriptionCanceledEventArgs": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.ConversationTranscriptionCanceledEventArgs),
/* harmony export */   "ConversationTranscriptionEventArgs": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.ConversationTranscriptionEventArgs),
/* harmony export */   "ConversationTranslationCanceledEventArgs": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.ConversationTranslationCanceledEventArgs),
/* harmony export */   "ConversationTranslationEventArgs": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.ConversationTranslationEventArgs),
/* harmony export */   "ConversationTranslationResult": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.ConversationTranslationResult),
/* harmony export */   "ConversationTranslator": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.ConversationTranslator),
/* harmony export */   "CustomCommandsConfig": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.CustomCommandsConfig),
/* harmony export */   "Diagnostics": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.Diagnostics),
/* harmony export */   "DialogServiceConfig": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.DialogServiceConfig),
/* harmony export */   "DialogServiceConnector": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.DialogServiceConnector),
/* harmony export */   "IntentRecognitionCanceledEventArgs": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.IntentRecognitionCanceledEventArgs),
/* harmony export */   "IntentRecognitionEventArgs": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.IntentRecognitionEventArgs),
/* harmony export */   "IntentRecognitionResult": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.IntentRecognitionResult),
/* harmony export */   "IntentRecognizer": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.IntentRecognizer),
/* harmony export */   "KeywordRecognitionModel": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.KeywordRecognitionModel),
/* harmony export */   "LanguageIdMode": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.LanguageIdMode),
/* harmony export */   "LanguageUnderstandingModel": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.LanguageUnderstandingModel),
/* harmony export */   "LogLevel": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.LogLevel),
/* harmony export */   "NoMatchDetails": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.NoMatchDetails),
/* harmony export */   "NoMatchReason": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.NoMatchReason),
/* harmony export */   "OutputFormat": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.OutputFormat),
/* harmony export */   "Participant": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.Participant),
/* harmony export */   "ParticipantChangedReason": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.ParticipantChangedReason),
/* harmony export */   "PhraseListGrammar": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.PhraseListGrammar),
/* harmony export */   "ProfanityOption": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.ProfanityOption),
/* harmony export */   "PronunciationAssessmentConfig": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.PronunciationAssessmentConfig),
/* harmony export */   "PronunciationAssessmentGradingSystem": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.PronunciationAssessmentGradingSystem),
/* harmony export */   "PronunciationAssessmentGranularity": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.PronunciationAssessmentGranularity),
/* harmony export */   "PronunciationAssessmentResult": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.PronunciationAssessmentResult),
/* harmony export */   "PropertyCollection": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyCollection),
/* harmony export */   "PropertyId": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId),
/* harmony export */   "PullAudioInputStream": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.PullAudioInputStream),
/* harmony export */   "PullAudioInputStreamCallback": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.PullAudioInputStreamCallback),
/* harmony export */   "PullAudioOutputStream": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.PullAudioOutputStream),
/* harmony export */   "PushAudioInputStream": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.PushAudioInputStream),
/* harmony export */   "PushAudioOutputStream": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.PushAudioOutputStream),
/* harmony export */   "PushAudioOutputStreamCallback": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.PushAudioOutputStreamCallback),
/* harmony export */   "RecognitionEventArgs": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.RecognitionEventArgs),
/* harmony export */   "RecognitionResult": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.RecognitionResult),
/* harmony export */   "Recognizer": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.Recognizer),
/* harmony export */   "ResultReason": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.ResultReason),
/* harmony export */   "ServiceEventArgs": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.ServiceEventArgs),
/* harmony export */   "ServicePropertyChannel": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.ServicePropertyChannel),
/* harmony export */   "SessionEventArgs": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.SessionEventArgs),
/* harmony export */   "SourceLanguageConfig": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.SourceLanguageConfig),
/* harmony export */   "SpeakerAudioDestination": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.SpeakerAudioDestination),
/* harmony export */   "SpeakerIdentificationModel": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.SpeakerIdentificationModel),
/* harmony export */   "SpeakerRecognitionCancellationDetails": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.SpeakerRecognitionCancellationDetails),
/* harmony export */   "SpeakerRecognitionResult": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.SpeakerRecognitionResult),
/* harmony export */   "SpeakerRecognitionResultType": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.SpeakerRecognitionResultType),
/* harmony export */   "SpeakerRecognizer": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.SpeakerRecognizer),
/* harmony export */   "SpeakerVerificationModel": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.SpeakerVerificationModel),
/* harmony export */   "SpeechConfig": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.SpeechConfig),
/* harmony export */   "SpeechConfigImpl": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.SpeechConfigImpl),
/* harmony export */   "SpeechRecognitionCanceledEventArgs": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.SpeechRecognitionCanceledEventArgs),
/* harmony export */   "SpeechRecognitionEventArgs": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.SpeechRecognitionEventArgs),
/* harmony export */   "SpeechRecognitionResult": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.SpeechRecognitionResult),
/* harmony export */   "SpeechRecognizer": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.SpeechRecognizer),
/* harmony export */   "SpeechSynthesisBookmarkEventArgs": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.SpeechSynthesisBookmarkEventArgs),
/* harmony export */   "SpeechSynthesisBoundaryType": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.SpeechSynthesisBoundaryType),
/* harmony export */   "SpeechSynthesisEventArgs": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.SpeechSynthesisEventArgs),
/* harmony export */   "SpeechSynthesisOutputFormat": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.SpeechSynthesisOutputFormat),
/* harmony export */   "SpeechSynthesisResult": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.SpeechSynthesisResult),
/* harmony export */   "SpeechSynthesisVisemeEventArgs": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.SpeechSynthesisVisemeEventArgs),
/* harmony export */   "SpeechSynthesisWordBoundaryEventArgs": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.SpeechSynthesisWordBoundaryEventArgs),
/* harmony export */   "SpeechSynthesizer": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.SpeechSynthesizer),
/* harmony export */   "SpeechTranslationConfig": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.SpeechTranslationConfig),
/* harmony export */   "SpeechTranslationConfigImpl": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.SpeechTranslationConfigImpl),
/* harmony export */   "SynthesisResult": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.SynthesisResult),
/* harmony export */   "SynthesisVoicesResult": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.SynthesisVoicesResult),
/* harmony export */   "TranslationRecognitionCanceledEventArgs": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.TranslationRecognitionCanceledEventArgs),
/* harmony export */   "TranslationRecognitionEventArgs": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.TranslationRecognitionEventArgs),
/* harmony export */   "TranslationRecognitionResult": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.TranslationRecognitionResult),
/* harmony export */   "TranslationRecognizer": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.TranslationRecognizer),
/* harmony export */   "TranslationSynthesisEventArgs": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.TranslationSynthesisEventArgs),
/* harmony export */   "TranslationSynthesisResult": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.TranslationSynthesisResult),
/* harmony export */   "Translations": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.Translations),
/* harmony export */   "TurnStatusReceivedEventArgs": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.TurnStatusReceivedEventArgs),
/* harmony export */   "User": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.User),
/* harmony export */   "VoiceInfo": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.VoiceInfo),
/* harmony export */   "VoiceProfile": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.VoiceProfile),
/* harmony export */   "VoiceProfileCancellationDetails": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.VoiceProfileCancellationDetails),
/* harmony export */   "VoiceProfileClient": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.VoiceProfileClient),
/* harmony export */   "VoiceProfileEnrollmentCancellationDetails": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.VoiceProfileEnrollmentCancellationDetails),
/* harmony export */   "VoiceProfileEnrollmentResult": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.VoiceProfileEnrollmentResult),
/* harmony export */   "VoiceProfilePhraseResult": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.VoiceProfilePhraseResult),
/* harmony export */   "VoiceProfileResult": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.VoiceProfileResult),
/* harmony export */   "VoiceProfileType": () => (/* reexport safe */ _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.VoiceProfileType)
/* harmony export */ });
/* harmony import */ var _src_common_browser_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ConsoleLoggingListener.js");
/* harmony import */ var _src_common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Events.js");
/* harmony import */ var _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


// Common.Storage.SetLocalStorage(new Common.Browser.LocalStorage());
// Common.Storage.SetSessionStorage(new Common.Browser.SessionStorage());
_src_common_Exports__WEBPACK_IMPORTED_MODULE_0__.Events.instance.attachConsoleListener(new _src_common_browser_Exports__WEBPACK_IMPORTED_MODULE_1__.ConsoleLoggingListener());
// Speech SDK API


//# sourceMappingURL=microsoft.cognitiveservices.speech.sdk.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ConsoleLoggingListener.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ConsoleLoggingListener.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConsoleLoggingListener": () => (/* binding */ ConsoleLoggingListener)
/* harmony export */ });
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ "?0825");
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _sdk_LogLevel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sdk/LogLevel */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/PlatformEvent.js");
/* harmony import */ var _sdk_Contracts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../sdk/Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.



class ConsoleLoggingListener {
    constructor(logLevelFilter = _sdk_LogLevel__WEBPACK_IMPORTED_MODULE_1__.EventType.None) {
        this.privLogPath = undefined;
        this.privEnableConsoleOutput = true;
        this.privLogLevelFilter = logLevelFilter;
    }
    set logPath(path) {
        _sdk_Contracts__WEBPACK_IMPORTED_MODULE_2__.Contracts.throwIfNullOrUndefined(fs__WEBPACK_IMPORTED_MODULE_0__.openSync, "\nFile System access not available");
        this.privLogPath = path;
    }
    set enableConsoleOutput(enableOutput) {
        this.privEnableConsoleOutput = enableOutput;
    }
    onEvent(event) {
        if (event.eventType >= this.privLogLevelFilter) {
            const log = this.toString(event);
            if (!!this.privLogPath) {
                fs__WEBPACK_IMPORTED_MODULE_0__.writeFileSync(this.privLogPath, log + "\n", { flag: "a+" });
            }
            if (this.privEnableConsoleOutput) {
                switch (event.eventType) {
                    case _sdk_LogLevel__WEBPACK_IMPORTED_MODULE_1__.EventType.Debug:
                        // eslint-disable-next-line no-console
                        console.debug(log);
                        break;
                    case _sdk_LogLevel__WEBPACK_IMPORTED_MODULE_1__.EventType.Info:
                        // eslint-disable-next-line no-console
                        console.info(log);
                        break;
                    case _sdk_LogLevel__WEBPACK_IMPORTED_MODULE_1__.EventType.Warning:
                        // eslint-disable-next-line no-console
                        console.warn(log);
                        break;
                    case _sdk_LogLevel__WEBPACK_IMPORTED_MODULE_1__.EventType.Error:
                        // eslint-disable-next-line no-console
                        console.error(log);
                        break;
                    default:
                        // eslint-disable-next-line no-console
                        console.log(log);
                        break;
                }
            }
        }
    }
    toString(event) {
        const logFragments = [
            `${event.eventTime}`,
            `${event.name}`,
        ];
        const e = event;
        for (const prop in e) {
            if (prop && event.hasOwnProperty(prop) &&
                prop !== "eventTime" && prop !== "eventType" &&
                prop !== "eventId" && prop !== "name" &&
                prop !== "constructor") {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                const value = e[prop];
                let valueToLog = "<NULL>";
                if (value !== undefined && value !== null) {
                    if (typeof (value) === "number" || typeof (value) === "string") {
                        valueToLog = value.toString();
                    }
                    else {
                        valueToLog = JSON.stringify(value);
                    }
                }
                logFragments.push(`${prop}: ${valueToLog}`);
            }
        }
        return logFragments.join(" | ");
    }
}

//# sourceMappingURL=ConsoleLoggingListener.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/FileAudioSource.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/FileAudioSource.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FileAudioSource": () => (/* binding */ FileAudioSource)
/* harmony export */ });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognizerConfig.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/EventSource.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/AudioSourceEvents.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ChunkedArrayBufferStream.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Events.js");
/* harmony import */ var _sdk_Audio_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../sdk/Audio/AudioStreamFormat */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioStreamFormat.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class FileAudioSource {
    constructor(file, filename, audioSourceId) {
        this.privStreams = {};
        this.privHeaderEnd = 44;
        this.privId = audioSourceId ? audioSourceId : (0,_common_Exports__WEBPACK_IMPORTED_MODULE_0__.createNoDashGuid)();
        this.privEvents = new _common_Exports__WEBPACK_IMPORTED_MODULE_1__.EventSource();
        this.privSource = file;
        if (typeof window !== "undefined" && typeof Blob !== "undefined" && this.privSource instanceof Blob) {
            this.privFilename = file.name;
        }
        else {
            this.privFilename = filename || "unknown.wav";
        }
        // Read the header.
        this.privAudioFormatPromise = this.readHeader();
    }
    get format() {
        return this.privAudioFormatPromise;
    }
    turnOn() {
        if (this.privFilename.lastIndexOf(".wav") !== this.privFilename.length - 4) {
            const errorMsg = this.privFilename + " is not supported. Only WAVE files are allowed at the moment.";
            this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__.AudioSourceErrorEvent(errorMsg, ""));
            return Promise.reject(errorMsg);
        }
        this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__.AudioSourceInitializingEvent(this.privId)); // no stream id
        this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__.AudioSourceReadyEvent(this.privId));
        return;
    }
    id() {
        return this.privId;
    }
    attach(audioNodeId) {
        return __awaiter(this, void 0, void 0, function* () {
            this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__.AudioStreamNodeAttachingEvent(this.privId, audioNodeId));
            const stream = yield this.upload(audioNodeId);
            this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__.AudioStreamNodeAttachedEvent(this.privId, audioNodeId));
            return Promise.resolve({
                detach: () => __awaiter(this, void 0, void 0, function* () {
                    stream.readEnded();
                    delete this.privStreams[audioNodeId];
                    this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__.AudioStreamNodeDetachedEvent(this.privId, audioNodeId));
                    yield this.turnOff();
                }),
                id: () => audioNodeId,
                read: () => stream.read(),
            });
        });
    }
    detach(audioNodeId) {
        if (audioNodeId && this.privStreams[audioNodeId]) {
            this.privStreams[audioNodeId].close();
            delete this.privStreams[audioNodeId];
            this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__.AudioStreamNodeDetachedEvent(this.privId, audioNodeId));
        }
    }
    turnOff() {
        for (const streamId in this.privStreams) {
            if (streamId) {
                const stream = this.privStreams[streamId];
                if (stream && !stream.isClosed) {
                    stream.close();
                }
            }
        }
        this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__.AudioSourceOffEvent(this.privId)); // no stream now
        return Promise.resolve();
    }
    get events() {
        return this.privEvents;
    }
    get deviceInfo() {
        return this.privAudioFormatPromise.then((result) => (Promise.resolve({
            bitspersample: result.bitsPerSample,
            channelcount: result.channels,
            connectivity: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_3__.connectivity.Unknown,
            manufacturer: "Speech SDK",
            model: "File",
            samplerate: result.samplesPerSec,
            type: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_3__.type.File,
        })));
    }
    readHeader() {
        // Read the wave header.
        const maxHeaderSize = 4296;
        const header = this.privSource.slice(0, maxHeaderSize);
        const headerResult = new _common_Exports__WEBPACK_IMPORTED_MODULE_4__.Deferred();
        const processHeader = (header) => {
            const view = new DataView(header);
            const getWord = (index) => String.fromCharCode(view.getUint8(index), view.getUint8(index + 1), view.getUint8(index + 2), view.getUint8(index + 3));
            // RIFF 4 bytes.
            if ("RIFF" !== getWord(0)) {
                headerResult.reject("Invalid WAV header in file, RIFF was not found");
                return;
            }
            // length, 4 bytes
            // RIFF Type & fmt 8 bytes
            if ("WAVE" !== getWord(8) || "fmt " !== getWord(12)) {
                headerResult.reject("Invalid WAV header in file, WAVEfmt was not found");
                return;
            }
            const formatSize = view.getInt32(16, true);
            const channelCount = view.getUint16(22, true);
            const sampleRate = view.getUint32(24, true);
            const bitsPerSample = view.getUint16(34, true);
            // Confirm if header is 44 bytes long.
            let pos = 36 + Math.max(formatSize - 16, 0);
            for (; getWord(pos) !== "data"; pos += 2) {
                if (pos > maxHeaderSize - 8) {
                    headerResult.reject("Invalid WAV header in file, data block was not found");
                    return;
                }
            }
            this.privHeaderEnd = pos + 8;
            headerResult.resolve(_sdk_Audio_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_5__.AudioStreamFormat.getWaveFormatPCM(sampleRate, bitsPerSample, channelCount));
        };
        if (typeof window !== "undefined" && typeof Blob !== "undefined" && header instanceof Blob) {
            const reader = new FileReader();
            reader.onload = (event) => {
                const header = event.target.result;
                processHeader(header);
            };
            reader.readAsArrayBuffer(header);
        }
        else {
            const h = header;
            processHeader(h.buffer.slice(h.byteOffset, h.byteOffset + h.byteLength));
        }
        return headerResult.promise;
    }
    upload(audioNodeId) {
        return __awaiter(this, void 0, void 0, function* () {
            const onerror = (error) => {
                const errorMsg = `Error occurred while processing '${this.privFilename}'. ${error}`;
                this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__.AudioStreamNodeErrorEvent(this.privId, audioNodeId, errorMsg));
                throw new Error(errorMsg);
            };
            try {
                yield this.turnOn();
                const format = yield this.privAudioFormatPromise;
                const stream = new _common_Exports__WEBPACK_IMPORTED_MODULE_6__.ChunkedArrayBufferStream(format.avgBytesPerSec / 10, audioNodeId);
                this.privStreams[audioNodeId] = stream;
                const chunk = this.privSource.slice(this.privHeaderEnd);
                const processFile = (buff) => {
                    if (stream.isClosed) {
                        return; // output stream was closed (somebody called TurnOff). We're done here.
                    }
                    stream.writeStreamChunk({
                        buffer: buff,
                        isEnd: false,
                        timeReceived: Date.now(),
                    });
                    stream.close();
                };
                if (typeof window !== "undefined" && typeof Blob !== "undefined" && chunk instanceof Blob) {
                    const reader = new FileReader();
                    reader.onerror = (ev) => onerror(ev.toString());
                    reader.onload = (event) => {
                        const fileBuffer = event.target.result;
                        processFile(fileBuffer);
                    };
                    reader.readAsArrayBuffer(chunk);
                }
                else {
                    const c = chunk;
                    processFile(c.buffer.slice(c.byteOffset, c.byteOffset + c.byteLength));
                }
                return stream;
            }
            catch (e) {
                onerror(e);
            }
        });
    }
    onEvent(event) {
        this.privEvents.onEvent(event);
        _common_Exports__WEBPACK_IMPORTED_MODULE_7__.Events.instance.onEvent(event);
    }
}

//# sourceMappingURL=FileAudioSource.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/MicAudioSource.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/MicAudioSource.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AudioWorkletSourceURLPropertyName": () => (/* binding */ AudioWorkletSourceURLPropertyName),
/* harmony export */   "MicAudioSource": () => (/* binding */ MicAudioSource)
/* harmony export */ });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognizerConfig.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/EventSource.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/AudioSourceEvents.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ChunkedArrayBufferStream.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Events.js");
/* harmony import */ var _sdk_Audio_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../sdk/Audio/AudioStreamFormat */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioStreamFormat.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



const AudioWorkletSourceURLPropertyName = "MICROPHONE-WorkletSourceUrl";
class MicAudioSource {
    constructor(privRecorder, deviceId, audioSourceId, mediaStream) {
        this.privRecorder = privRecorder;
        this.deviceId = deviceId;
        this.privStreams = {};
        this.privOutputChunkSize = MicAudioSource.AUDIOFORMAT.avgBytesPerSec / 10;
        this.privId = audioSourceId ? audioSourceId : (0,_common_Exports__WEBPACK_IMPORTED_MODULE_0__.createNoDashGuid)();
        this.privEvents = new _common_Exports__WEBPACK_IMPORTED_MODULE_1__.EventSource();
        this.privMediaStream = mediaStream || null;
        this.privIsClosing = false;
    }
    get format() {
        return Promise.resolve(MicAudioSource.AUDIOFORMAT);
    }
    turnOn() {
        if (this.privInitializeDeferral) {
            return this.privInitializeDeferral.promise;
        }
        this.privInitializeDeferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_2__.Deferred();
        try {
            this.createAudioContext();
        }
        catch (error) {
            if (error instanceof Error) {
                const typedError = error;
                this.privInitializeDeferral.reject(typedError.name + ": " + typedError.message);
            }
            else {
                this.privInitializeDeferral.reject(error);
            }
            return this.privInitializeDeferral.promise;
        }
        const nav = window.navigator;
        let getUserMedia = (
        // eslint-disable-next-line
        nav.getUserMedia ||
            nav.webkitGetUserMedia ||
            nav.mozGetUserMedia ||
            nav.msGetUserMedia);
        if (!!nav.mediaDevices) {
            getUserMedia = (constraints, successCallback, errorCallback) => {
                nav.mediaDevices
                    .getUserMedia(constraints)
                    .then(successCallback)
                    .catch(errorCallback);
            };
        }
        if (!getUserMedia) {
            const errorMsg = "Browser does not support getUserMedia.";
            this.privInitializeDeferral.reject(errorMsg);
            this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_3__.AudioSourceErrorEvent(errorMsg, "")); // mic initialized error - no streamid at this point
        }
        else {
            const next = () => {
                this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_3__.AudioSourceInitializingEvent(this.privId)); // no stream id
                if (this.privMediaStream && this.privMediaStream.active) {
                    this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_3__.AudioSourceReadyEvent(this.privId));
                    this.privInitializeDeferral.resolve();
                }
                else {
                    getUserMedia({ audio: this.deviceId ? { deviceId: this.deviceId } : true, video: false }, (mediaStream) => {
                        this.privMediaStream = mediaStream;
                        this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_3__.AudioSourceReadyEvent(this.privId));
                        this.privInitializeDeferral.resolve();
                    }, (error) => {
                        const errorMsg = `Error occurred during microphone initialization: ${error}`;
                        this.privInitializeDeferral.reject(errorMsg);
                        this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_3__.AudioSourceErrorEvent(this.privId, errorMsg));
                    });
                }
            };
            if (this.privContext.state === "suspended") {
                // NOTE: On iOS, the Web Audio API requires sounds to be triggered from an explicit user action.
                // https://github.com/WebAudio/web-audio-api/issues/790
                this.privContext.resume()
                    .then(next)
                    .catch((reason) => {
                    this.privInitializeDeferral.reject(`Failed to initialize audio context: ${reason}`);
                });
            }
            else {
                next();
            }
        }
        return this.privInitializeDeferral.promise;
    }
    id() {
        return this.privId;
    }
    attach(audioNodeId) {
        this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_3__.AudioStreamNodeAttachingEvent(this.privId, audioNodeId));
        return this.listen(audioNodeId).then((stream) => {
            this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_3__.AudioStreamNodeAttachedEvent(this.privId, audioNodeId));
            return {
                detach: () => __awaiter(this, void 0, void 0, function* () {
                    stream.readEnded();
                    delete this.privStreams[audioNodeId];
                    this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_3__.AudioStreamNodeDetachedEvent(this.privId, audioNodeId));
                    return this.turnOff();
                }),
                id: () => audioNodeId,
                read: () => stream.read(),
            };
        });
    }
    detach(audioNodeId) {
        if (audioNodeId && this.privStreams[audioNodeId]) {
            this.privStreams[audioNodeId].close();
            delete this.privStreams[audioNodeId];
            this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_3__.AudioStreamNodeDetachedEvent(this.privId, audioNodeId));
        }
    }
    turnOff() {
        return __awaiter(this, void 0, void 0, function* () {
            for (const streamId in this.privStreams) {
                if (streamId) {
                    const stream = this.privStreams[streamId];
                    if (stream) {
                        stream.close();
                    }
                }
            }
            this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_3__.AudioSourceOffEvent(this.privId)); // no stream now
            if (this.privInitializeDeferral) {
                // Correctly handle when browser forces mic off before turnOn() completes
                // eslint-disable-next-line @typescript-eslint/await-thenable
                yield this.privInitializeDeferral;
                this.privInitializeDeferral = null;
            }
            yield this.destroyAudioContext();
            return;
        });
    }
    get events() {
        return this.privEvents;
    }
    get deviceInfo() {
        return this.getMicrophoneLabel().then((label) => ({
            bitspersample: MicAudioSource.AUDIOFORMAT.bitsPerSample,
            channelcount: MicAudioSource.AUDIOFORMAT.channels,
            connectivity: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.connectivity.Unknown,
            manufacturer: "Speech SDK",
            model: label,
            samplerate: MicAudioSource.AUDIOFORMAT.samplesPerSec,
            type: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.type.Microphones,
        }));
    }
    setProperty(name, value) {
        if (name === AudioWorkletSourceURLPropertyName) {
            this.privRecorder.setWorkletUrl(value);
        }
        else {
            throw new Error("Property '" + name + "' is not supported on Microphone.");
        }
    }
    getMicrophoneLabel() {
        const defaultMicrophoneName = "microphone";
        // If we did this already, return the value.
        if (this.privMicrophoneLabel !== undefined) {
            return Promise.resolve(this.privMicrophoneLabel);
        }
        // If the stream isn't currently running, we can't query devices because security.
        if (this.privMediaStream === undefined || !this.privMediaStream.active) {
            return Promise.resolve(defaultMicrophoneName);
        }
        // Setup a default
        this.privMicrophoneLabel = defaultMicrophoneName;
        // Get the id of the device running the audio track.
        const microphoneDeviceId = this.privMediaStream.getTracks()[0].getSettings().deviceId;
        // If the browser doesn't support getting the device ID, set a default and return.
        if (undefined === microphoneDeviceId) {
            return Promise.resolve(this.privMicrophoneLabel);
        }
        const deferred = new _common_Exports__WEBPACK_IMPORTED_MODULE_2__.Deferred();
        // Enumerate the media devices.
        navigator.mediaDevices.enumerateDevices().then((devices) => {
            for (const device of devices) {
                if (device.deviceId === microphoneDeviceId) {
                    // Found the device
                    this.privMicrophoneLabel = device.label;
                    break;
                }
            }
            deferred.resolve(this.privMicrophoneLabel);
        }, () => deferred.resolve(this.privMicrophoneLabel));
        return deferred.promise;
    }
    listen(audioNodeId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.turnOn();
            const stream = new _common_Exports__WEBPACK_IMPORTED_MODULE_5__.ChunkedArrayBufferStream(this.privOutputChunkSize, audioNodeId);
            this.privStreams[audioNodeId] = stream;
            try {
                this.privRecorder.record(this.privContext, this.privMediaStream, stream);
            }
            catch (error) {
                this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_3__.AudioStreamNodeErrorEvent(this.privId, audioNodeId, error));
                throw error;
            }
            const result = stream;
            return result;
        });
    }
    onEvent(event) {
        this.privEvents.onEvent(event);
        _common_Exports__WEBPACK_IMPORTED_MODULE_6__.Events.instance.onEvent(event);
    }
    createAudioContext() {
        if (!!this.privContext) {
            return;
        }
        this.privContext = _sdk_Audio_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_7__.AudioStreamFormatImpl.getAudioContext(MicAudioSource.AUDIOFORMAT.samplesPerSec);
    }
    destroyAudioContext() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.privContext) {
                return;
            }
            this.privRecorder.releaseMediaResources(this.privContext);
            // This pattern brought to you by a bug in the TypeScript compiler where it
            // confuses the ("close" in this.privContext) with this.privContext always being null as the alternate.
            // https://github.com/Microsoft/TypeScript/issues/11498
            let hasClose = false;
            if ("close" in this.privContext) {
                hasClose = true;
            }
            if (hasClose) {
                if (!this.privIsClosing) {
                    // The audio context close may take enough time that the close is called twice
                    this.privIsClosing = true;
                    yield this.privContext.close();
                    this.privContext = null;
                    this.privIsClosing = false;
                }
            }
            else if (null !== this.privContext && this.privContext.state === "running") {
                // Suspend actually takes a callback, but analogous to the
                // resume method, it'll be only fired if suspend is called
                // in a direct response to a user action. The later is not always
                // the case, as TurnOff is also called, when we receive an
                // end-of-speech message from the service. So, doing a best effort
                // fire-and-forget here.
                yield this.privContext.suspend();
            }
        });
    }
}
MicAudioSource.AUDIOFORMAT = _sdk_Audio_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_7__.AudioStreamFormat.getDefaultInputFormat();

//# sourceMappingURL=MicAudioSource.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/PCMRecorder.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/PCMRecorder.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PcmRecorder": () => (/* binding */ PcmRecorder)
/* harmony export */ });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/RiffPcmEncoder.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

class PcmRecorder {
    constructor(stopInputOnRelease) {
        this.privStopInputOnRelease = stopInputOnRelease;
    }
    record(context, mediaStream, outputStream) {
        const desiredSampleRate = 16000;
        const waveStreamEncoder = new _common_Exports__WEBPACK_IMPORTED_MODULE_0__.RiffPcmEncoder(context.sampleRate, desiredSampleRate);
        const micInput = context.createMediaStreamSource(mediaStream);
        const attachScriptProcessor = () => {
            // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
            const scriptNode = (() => {
                let bufferSize = 0;
                try {
                    return context.createScriptProcessor(bufferSize, 1, 1);
                }
                catch (error) {
                    // Webkit (<= version 31) requires a valid bufferSize.
                    bufferSize = 2048;
                    let audioSampleRate = context.sampleRate;
                    while (bufferSize < 16384 && audioSampleRate >= (2 * desiredSampleRate)) {
                        bufferSize <<= 1;
                        audioSampleRate >>= 1;
                    }
                    return context.createScriptProcessor(bufferSize, 1, 1);
                }
            })();
            scriptNode.onaudioprocess = (event) => {
                const inputFrame = event.inputBuffer.getChannelData(0);
                if (outputStream && !outputStream.isClosed) {
                    const waveFrame = waveStreamEncoder.encode(inputFrame);
                    if (!!waveFrame) {
                        outputStream.writeStreamChunk({
                            buffer: waveFrame,
                            isEnd: false,
                            timeReceived: Date.now(),
                        });
                    }
                }
            };
            micInput.connect(scriptNode);
            scriptNode.connect(context.destination);
            this.privMediaResources = {
                scriptProcessorNode: scriptNode,
                source: micInput,
                stream: mediaStream,
            };
        };
        // https://webaudio.github.io/web-audio-api/#audioworklet
        // Using AudioWorklet to improve audio quality and avoid audio glitches due to blocking the UI thread
        if (!!context.audioWorklet) {
            if (!this.privSpeechProcessorScript) {
                const workletScript = `class SP extends AudioWorkletProcessor {
                    constructor(options) {
                      super(options);
                    }
                    process(inputs, outputs) {
                      const input = inputs[0];
                      const output = [];
                      for (let channel = 0; channel < input.length; channel += 1) {
                        output[channel] = input[channel];
                      }
                      this.port.postMessage(output[0]);
                      return true;
                    }
                  }
                  registerProcessor('speech-processor', SP);`;
                const blob = new Blob([workletScript], { type: "application/javascript; charset=utf-8" });
                this.privSpeechProcessorScript = URL.createObjectURL(blob);
            }
            context.audioWorklet
                .addModule(this.privSpeechProcessorScript)
                .then(() => {
                const workletNode = new AudioWorkletNode(context, "speech-processor");
                workletNode.port.onmessage = (ev) => {
                    const inputFrame = ev.data;
                    if (outputStream && !outputStream.isClosed) {
                        const waveFrame = waveStreamEncoder.encode(inputFrame);
                        if (!!waveFrame) {
                            outputStream.writeStreamChunk({
                                buffer: waveFrame,
                                isEnd: false,
                                timeReceived: Date.now(),
                            });
                        }
                    }
                };
                micInput.connect(workletNode);
                workletNode.connect(context.destination);
                this.privMediaResources = {
                    scriptProcessorNode: workletNode,
                    source: micInput,
                    stream: mediaStream,
                };
            })
                .catch(() => {
                attachScriptProcessor();
            });
        }
        else {
            try {
                attachScriptProcessor();
            }
            catch (err) {
                throw new Error(`Unable to start audio worklet node for PCMRecorder: ${err}`);
            }
        }
    }
    releaseMediaResources(context) {
        if (this.privMediaResources) {
            if (this.privMediaResources.scriptProcessorNode) {
                this.privMediaResources.scriptProcessorNode.disconnect(context.destination);
                this.privMediaResources.scriptProcessorNode = null;
            }
            if (this.privMediaResources.source) {
                this.privMediaResources.source.disconnect();
                if (this.privStopInputOnRelease) {
                    this.privMediaResources.stream.getTracks().forEach((track) => track.stop());
                }
                this.privMediaResources.source = null;
            }
        }
    }
    setWorkletUrl(url) {
        this.privSpeechProcessorScript = url;
    }
}

//# sourceMappingURL=PCMRecorder.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ProxyInfo.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ProxyInfo.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ProxyInfo": () => (/* binding */ ProxyInfo)
/* harmony export */ });
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

class ProxyInfo {
    constructor(proxyHostName, proxyPort, proxyUserName, proxyPassword) {
        this.privProxyHostName = proxyHostName;
        this.privProxyPort = proxyPort;
        this.privProxyUserName = proxyUserName;
        this.privProxyPassword = proxyPassword;
    }
    static fromParameters(parameters) {
        return new ProxyInfo(parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyId.SpeechServiceConnection_ProxyHostName), parseInt(parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyId.SpeechServiceConnection_ProxyPort), 10), parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyId.SpeechServiceConnection_ProxyUserName), parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyId.SpeechServiceConnection_ProxyPassword));
    }
    static fromRecognizerConfig(config) {
        return this.fromParameters(config.parameters);
    }
    get HostName() {
        return this.privProxyHostName;
    }
    get Port() {
        return this.privProxyPort;
    }
    get UserName() {
        return this.privProxyUserName;
    }
    get Password() {
        return this.privProxyPassword;
    }
}

//# sourceMappingURL=ProxyInfo.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ReplayableAudioNode.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ReplayableAudioNode.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ReplayableAudioNode": () => (/* binding */ ReplayableAudioNode)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
class ReplayableAudioNode {
    constructor(audioSource, bytesPerSecond) {
        this.privBuffers = [];
        this.privReplayOffset = 0;
        this.privLastShrinkOffset = 0;
        this.privBufferStartOffset = 0;
        this.privBufferSerial = 0;
        this.privBufferedBytes = 0;
        this.privReplay = false;
        this.privLastChunkAcquiredTime = 0;
        this.privAudioNode = audioSource;
        this.privBytesPerSecond = bytesPerSecond;
    }
    id() {
        return this.privAudioNode.id();
    }
    // Reads and returns the next chunk of audio buffer.
    // If replay of existing buffers are needed, read() will first seek and replay
    // existing content, and upoin completion it will read new content from the underlying
    // audio node, saving that content into the replayable buffers.
    read() {
        // if there is a replay request to honor.
        if (!!this.privReplay && this.privBuffers.length !== 0) {
            // Find the start point in the buffers.
            // Offsets are in 100ns increments.
            // So how many bytes do we need to seek to get the right offset?
            const offsetToSeek = this.privReplayOffset - this.privBufferStartOffset;
            let bytesToSeek = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);
            if (0 !== (bytesToSeek % 2)) {
                bytesToSeek++;
            }
            let i = 0;
            while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {
                bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;
            }
            if (i < this.privBuffers.length) {
                const retVal = this.privBuffers[i].chunk.buffer.slice(bytesToSeek);
                this.privReplayOffset += (retVal.byteLength / this.privBytesPerSecond) * 1e+7;
                // If we've reached the end of the buffers, stop replaying.
                if (i === this.privBuffers.length - 1) {
                    this.privReplay = false;
                }
                return Promise.resolve({
                    buffer: retVal,
                    isEnd: false,
                    timeReceived: this.privBuffers[i].chunk.timeReceived,
                });
            }
        }
        return this.privAudioNode.read()
            .then((result) => {
            if (result && result.buffer) {
                this.privBuffers.push(new BufferEntry(result, this.privBufferSerial++, this.privBufferedBytes));
                this.privBufferedBytes += result.buffer.byteLength;
            }
            return result;
        });
    }
    detach() {
        this.privBuffers = undefined;
        return this.privAudioNode.detach();
    }
    replay() {
        if (this.privBuffers && 0 !== this.privBuffers.length) {
            this.privReplay = true;
            this.privReplayOffset = this.privLastShrinkOffset;
        }
    }
    // Shrinks the existing audio buffers to start at the new offset, or at the
    // beginning of the buffer closest to the requested offset.
    // A replay request will start from the last shrink point.
    shrinkBuffers(offset) {
        if (this.privBuffers === undefined || this.privBuffers.length === 0) {
            return;
        }
        this.privLastShrinkOffset = offset;
        // Find the start point in the buffers.
        // Offsets are in 100ns increments.
        // So how many bytes do we need to seek to get the right offset?
        const offsetToSeek = offset - this.privBufferStartOffset;
        let bytesToSeek = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);
        let i = 0;
        while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {
            bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;
        }
        this.privBufferStartOffset = Math.round(offset - ((bytesToSeek / this.privBytesPerSecond) * 1e+7));
        this.privBuffers = this.privBuffers.slice(i);
    }
    // Finds the time a buffer of audio was first seen by offset.
    findTimeAtOffset(offset) {
        if (offset < this.privBufferStartOffset || this.privBuffers === undefined) {
            return 0;
        }
        for (const value of this.privBuffers) {
            const startOffset = (value.byteOffset / this.privBytesPerSecond) * 1e7;
            const endOffset = startOffset + ((value.chunk.buffer.byteLength / this.privBytesPerSecond) * 1e7);
            if (offset >= startOffset && offset <= endOffset) {
                return value.chunk.timeReceived;
            }
        }
        return 0;
    }
}
// Primary use of this class is to help debugging problems with the replay
// code. If the memory cost of alloc / dealloc gets too much, drop it and just use
// the ArrayBuffer directly.
class BufferEntry {
    constructor(chunk, serial, byteOffset) {
        this.chunk = chunk;
        this.serial = serial;
        this.byteOffset = byteOffset;
    }
}

//# sourceMappingURL=ReplayableAudioNode.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/RestConfigBase.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/RestConfigBase.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RestConfigBase": () => (/* binding */ RestConfigBase)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
class RestConfigBase {
    static get requestOptions() {
        return RestConfigBase.privDefaultRequestOptions;
    }
    static get configParams() {
        return RestConfigBase.privDefaultParams;
    }
    static get restErrors() {
        return RestConfigBase.privRestErrors;
    }
}
RestConfigBase.privDefaultRequestOptions = {
    headers: {
        Accept: "application/json",
    },
    ignoreCache: false,
    timeout: 10000,
};
RestConfigBase.privRestErrors = {
    authInvalidSubscriptionKey: "You must specify either an authentication token to use, or a Cognitive Speech subscription key.",
    authInvalidSubscriptionRegion: "You must specify the Cognitive Speech region to use.",
    invalidArgs: "Required input not found: {arg}.",
    invalidCreateJoinConversationResponse: "Creating/Joining conversation failed with HTTP {status}.",
    invalidParticipantRequest: "The requested participant was not found.",
    permissionDeniedConnect: "Required credentials not found.",
    permissionDeniedConversation: "Invalid operation: only the host can {command} the conversation.",
    permissionDeniedParticipant: "Invalid operation: only the host can {command} a participant.",
    permissionDeniedSend: "Invalid operation: the conversation is not in a connected state.",
    permissionDeniedStart: "Invalid operation: there is already an active conversation.",
};
RestConfigBase.privDefaultParams = {
    apiVersion: "api-version",
    authorization: "Authorization",
    clientAppId: "X-ClientAppId",
    contentTypeKey: "Content-Type",
    correlationId: "X-CorrelationId",
    languageCode: "language",
    nickname: "nickname",
    profanity: "profanity",
    requestId: "X-RequestId",
    roomId: "roomid",
    sessionToken: "token",
    subscriptionKey: "Ocp-Apim-Subscription-Key",
    subscriptionRegion: "Ocp-Apim-Subscription-Region",
    token: "X-CapitoToken",
};

//# sourceMappingURL=RestConfigBase.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/RestMessageAdapter.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/RestMessageAdapter.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RestMessageAdapter": () => (/* binding */ RestMessageAdapter),
/* harmony export */   "RestRequestType": () => (/* binding */ RestRequestType)
/* harmony export */ });
/* harmony import */ var bent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bent */ "./node_modules/bent/src/browser.js");
/* harmony import */ var bent__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bent__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


var RestRequestType;
(function (RestRequestType) {
    RestRequestType["Get"] = "GET";
    RestRequestType["Post"] = "POST";
    RestRequestType["Delete"] = "DELETE";
    RestRequestType["File"] = "file";
})(RestRequestType || (RestRequestType = {}));
// accept rest operations via request method and return abstracted objects from server response
class RestMessageAdapter {
    constructor(configParams) {
        if (!configParams) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_1__.ArgumentNullError("configParams");
        }
        this.privHeaders = configParams.headers;
        this.privIgnoreCache = configParams.ignoreCache;
    }
    static extractHeaderValue(headerKey, headers) {
        let headerValue = "";
        try {
            const arr = headers.trim().split(/[\r\n]+/);
            const headerMap = {};
            arr.forEach((line) => {
                const parts = line.split(": ");
                const header = parts.shift().toLowerCase();
                const value = parts.join(": ");
                headerMap[header] = value;
            });
            headerValue = headerMap[headerKey.toLowerCase()];
        }
        catch (e) {
            // ignore the error
        }
        return headerValue;
    }
    set options(configParams) {
        this.privHeaders = configParams.headers;
        this.privIgnoreCache = configParams.ignoreCache;
    }
    setHeaders(key, value) {
        this.privHeaders[key] = value;
    }
    request(method, uri, queryParams = {}, body = null) {
        const responseReceivedDeferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_2__.Deferred();
        const requestCommand = method === RestRequestType.File ? "POST" : method;
        const handleRestResponse = (data, j = {}) => {
            const d = data;
            return {
                data: JSON.stringify(j),
                headers: JSON.stringify(data.headers),
                json: j,
                ok: data.statusCode >= 200 && data.statusCode < 300,
                status: data.statusCode,
                statusText: j.error ? j.error.message : d.statusText ? d.statusText : d.statusMessage
            };
        };
        const send = (postData) => {
            const sendRequest = bent__WEBPACK_IMPORTED_MODULE_0___default()(uri, requestCommand, this.privHeaders, 200, 201, 202, 204, 400, 401, 402, 403, 404);
            const params = this.queryParams(queryParams) === "" ? "" : `?${this.queryParams(queryParams)}`;
            sendRequest(params, postData).then((data) => __awaiter(this, void 0, void 0, function* () {
                if (method === RestRequestType.Delete || data.statusCode === 204) {
                    // No JSON from Delete and reset (204) operations
                    responseReceivedDeferral.resolve(handleRestResponse(data));
                }
                else {
                    try {
                        const j = yield data.json();
                        responseReceivedDeferral.resolve(handleRestResponse(data, j));
                    }
                    catch (_a) {
                        responseReceivedDeferral.resolve(handleRestResponse(data));
                    }
                }
            })).catch((error) => {
                responseReceivedDeferral.reject(error);
            });
        };
        if (this.privIgnoreCache) {
            this.privHeaders["Cache-Control"] = "no-cache";
        }
        if (method === RestRequestType.Post && body) {
            this.privHeaders["content-type"] = "application/json";
            this.privHeaders["Content-Type"] = "application/json";
        }
        send(body);
        return responseReceivedDeferral.promise;
    }
    queryParams(params = {}) {
        return Object.keys(params)
            .map((k) => encodeURIComponent(k) + "=" + encodeURIComponent(params[k]))
            .join("&");
    }
}

//# sourceMappingURL=RestMessageAdapter.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/WebsocketConnection.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/WebsocketConnection.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WebsocketConnection": () => (/* binding */ WebsocketConnection)
/* harmony export */ });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");
/* harmony import */ var _WebsocketMessageAdapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./WebsocketMessageAdapter */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/WebsocketMessageAdapter.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class WebsocketConnection {
    constructor(uri, queryParameters, headers, messageFormatter, proxyInfo, enableCompression = false, connectionId) {
        this.privIsDisposed = false;
        if (!uri) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_0__.ArgumentNullError("uri");
        }
        if (!messageFormatter) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_0__.ArgumentNullError("messageFormatter");
        }
        this.privMessageFormatter = messageFormatter;
        let queryParams = "";
        let i = 0;
        if (queryParameters) {
            for (const paramName in queryParameters) {
                if (paramName) {
                    queryParams += ((i === 0) && (uri.indexOf("?") === -1)) ? "?" : "&";
                    const key = encodeURIComponent(paramName);
                    queryParams += key;
                    let val = queryParameters[paramName];
                    if (val) {
                        val = encodeURIComponent(val);
                        queryParams += `=${val}`;
                    }
                    i++;
                }
            }
        }
        if (headers) {
            for (const headerName in headers) {
                if (headerName) {
                    queryParams += ((i === 0) && (uri.indexOf("?") === -1)) ? "?" : "&";
                    const val = encodeURIComponent(headers[headerName]);
                    queryParams += `${headerName}=${val}`;
                    i++;
                }
            }
        }
        this.privUri = uri + queryParams;
        this.privId = connectionId ? connectionId : (0,_common_Exports__WEBPACK_IMPORTED_MODULE_1__.createNoDashGuid)();
        this.privConnectionMessageAdapter = new _WebsocketMessageAdapter__WEBPACK_IMPORTED_MODULE_2__.WebsocketMessageAdapter(this.privUri, this.id, this.privMessageFormatter, proxyInfo, headers, enableCompression);
    }
    dispose() {
        return __awaiter(this, void 0, void 0, function* () {
            this.privIsDisposed = true;
            if (this.privConnectionMessageAdapter) {
                yield this.privConnectionMessageAdapter.close();
            }
        });
    }
    isDisposed() {
        return this.privIsDisposed;
    }
    get id() {
        return this.privId;
    }
    get uri() {
        return this.privUri;
    }
    state() {
        return this.privConnectionMessageAdapter.state;
    }
    open() {
        return this.privConnectionMessageAdapter.open();
    }
    send(message) {
        return this.privConnectionMessageAdapter.send(message);
    }
    read() {
        return this.privConnectionMessageAdapter.read();
    }
    get events() {
        return this.privConnectionMessageAdapter.events;
    }
}

//# sourceMappingURL=WebsocketConnection.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/WebsocketMessageAdapter.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/WebsocketMessageAdapter.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WebsocketMessageAdapter": () => (/* binding */ WebsocketMessageAdapter)
/* harmony export */ });
/* harmony import */ var net__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! net */ "?a1bf");
/* harmony import */ var net__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(net__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var tls__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tls */ "?14d6");
/* harmony import */ var tls__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(tls__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var agent_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! agent-base */ "?6483");
/* harmony import */ var agent_base__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(agent_base__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var https_proxy_agent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! https-proxy-agent */ "?72ad");
/* harmony import */ var https_proxy_agent__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(https_proxy_agent__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var ws__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ws */ "?e42a");
/* harmony import */ var ws__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(ws__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _common_speech_HeaderNames__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../common.speech/HeaderNames */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/HeaderNames.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/EventSource.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/IConnection.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Queue.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Events.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/BackgroundError.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionOpenResponse.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionEvents.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/RawWebsocketMessage.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class WebsocketMessageAdapter {
    constructor(uri, connectionId, messageFormatter, proxyInfo, headers, enableCompression) {
        if (!uri) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_5__.ArgumentNullError("uri");
        }
        if (!messageFormatter) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_5__.ArgumentNullError("messageFormatter");
        }
        this.proxyInfo = proxyInfo;
        this.privConnectionEvents = new _common_Exports__WEBPACK_IMPORTED_MODULE_6__.EventSource();
        this.privConnectionId = connectionId;
        this.privMessageFormatter = messageFormatter;
        this.privConnectionState = _common_Exports__WEBPACK_IMPORTED_MODULE_7__.ConnectionState.None;
        this.privUri = uri;
        this.privHeaders = headers;
        this.privEnableCompression = enableCompression;
        // Add the connection ID to the headers
        this.privHeaders[_common_speech_HeaderNames__WEBPACK_IMPORTED_MODULE_8__.HeaderNames.ConnectionId] = this.privConnectionId;
        this.privLastErrorReceived = "";
    }
    get state() {
        return this.privConnectionState;
    }
    open() {
        if (this.privConnectionState === _common_Exports__WEBPACK_IMPORTED_MODULE_7__.ConnectionState.Disconnected) {
            return Promise.reject(`Cannot open a connection that is in ${this.privConnectionState} state`);
        }
        if (this.privConnectionEstablishDeferral) {
            return this.privConnectionEstablishDeferral.promise;
        }
        this.privConnectionEstablishDeferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_9__.Deferred();
        this.privCertificateValidatedDeferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_9__.Deferred();
        this.privConnectionState = _common_Exports__WEBPACK_IMPORTED_MODULE_7__.ConnectionState.Connecting;
        try {
            if (typeof WebSocket !== "undefined" && !WebsocketMessageAdapter.forceNpmWebSocket) {
                // Browser handles cert checks.
                this.privCertificateValidatedDeferral.resolve();
                this.privWebsocketClient = new WebSocket(this.privUri);
            }
            else {
                const options = { headers: this.privHeaders, perMessageDeflate: this.privEnableCompression };
                // The ocsp library will handle validation for us and fail the connection if needed.
                this.privCertificateValidatedDeferral.resolve();
                options.agent = this.getAgent();
                // Workaround for https://github.com/microsoft/cognitive-services-speech-sdk-js/issues/465
                // Which is root caused by https://github.com/TooTallNate/node-agent-base/issues/61
                const uri = new URL(this.privUri);
                let protocol = uri.protocol;
                if ((protocol === null || protocol === void 0 ? void 0 : protocol.toLocaleLowerCase()) === "wss:") {
                    protocol = "https:";
                }
                else if ((protocol === null || protocol === void 0 ? void 0 : protocol.toLocaleLowerCase()) === "ws:") {
                    protocol = "http:";
                }
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                options.agent.protocol = protocol;
                this.privWebsocketClient = new (ws__WEBPACK_IMPORTED_MODULE_4___default())(this.privUri, options);
            }
            this.privWebsocketClient.binaryType = "arraybuffer";
            this.privReceivingMessageQueue = new _common_Exports__WEBPACK_IMPORTED_MODULE_10__.Queue();
            this.privDisconnectDeferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_9__.Deferred();
            this.privSendMessageQueue = new _common_Exports__WEBPACK_IMPORTED_MODULE_10__.Queue();
            this.processSendQueue().catch((reason) => {
                _common_Exports__WEBPACK_IMPORTED_MODULE_11__.Events.instance.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_12__.BackgroundEvent(reason));
            });
        }
        catch (error) {
            this.privConnectionEstablishDeferral.resolve(new _common_Exports__WEBPACK_IMPORTED_MODULE_13__.ConnectionOpenResponse(500, error));
            return this.privConnectionEstablishDeferral.promise;
        }
        this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_14__.ConnectionStartEvent(this.privConnectionId, this.privUri));
        this.privWebsocketClient.onopen = () => {
            this.privCertificateValidatedDeferral.promise.then(() => {
                this.privConnectionState = _common_Exports__WEBPACK_IMPORTED_MODULE_7__.ConnectionState.Connected;
                this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_14__.ConnectionEstablishedEvent(this.privConnectionId));
                this.privConnectionEstablishDeferral.resolve(new _common_Exports__WEBPACK_IMPORTED_MODULE_13__.ConnectionOpenResponse(200, ""));
            }, (error) => {
                this.privConnectionEstablishDeferral.reject(error);
            });
        };
        this.privWebsocketClient.onerror = (e) => {
            this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_14__.ConnectionErrorEvent(this.privConnectionId, e.message, e.type));
            this.privLastErrorReceived = e.message;
        };
        this.privWebsocketClient.onclose = (e) => {
            if (this.privConnectionState === _common_Exports__WEBPACK_IMPORTED_MODULE_7__.ConnectionState.Connecting) {
                this.privConnectionState = _common_Exports__WEBPACK_IMPORTED_MODULE_7__.ConnectionState.Disconnected;
                // this.onEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));
                this.privConnectionEstablishDeferral.resolve(new _common_Exports__WEBPACK_IMPORTED_MODULE_13__.ConnectionOpenResponse(e.code, e.reason + " " + this.privLastErrorReceived));
            }
            else {
                this.privConnectionState = _common_Exports__WEBPACK_IMPORTED_MODULE_7__.ConnectionState.Disconnected;
                this.privWebsocketClient = null;
                this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_14__.ConnectionClosedEvent(this.privConnectionId, e.code, e.reason));
            }
            this.onClose(e.code, e.reason).catch((reason) => {
                _common_Exports__WEBPACK_IMPORTED_MODULE_11__.Events.instance.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_12__.BackgroundEvent(reason));
            });
        };
        this.privWebsocketClient.onmessage = (e) => {
            const networkReceivedTime = new Date().toISOString();
            if (this.privConnectionState === _common_Exports__WEBPACK_IMPORTED_MODULE_7__.ConnectionState.Connected) {
                const deferred = new _common_Exports__WEBPACK_IMPORTED_MODULE_9__.Deferred();
                // let id = ++this.idCounter;
                this.privReceivingMessageQueue.enqueueFromPromise(deferred.promise);
                if (e.data instanceof ArrayBuffer) {
                    const rawMessage = new _common_Exports__WEBPACK_IMPORTED_MODULE_15__.RawWebsocketMessage(_common_Exports__WEBPACK_IMPORTED_MODULE_16__.MessageType.Binary, e.data);
                    this.privMessageFormatter
                        .toConnectionMessage(rawMessage)
                        .then((connectionMessage) => {
                        this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_14__.ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));
                        deferred.resolve(connectionMessage);
                    }, (error) => {
                        // TODO: Events for these ?
                        deferred.reject(`Invalid binary message format. Error: ${error}`);
                    });
                }
                else {
                    const rawMessage = new _common_Exports__WEBPACK_IMPORTED_MODULE_15__.RawWebsocketMessage(_common_Exports__WEBPACK_IMPORTED_MODULE_16__.MessageType.Text, e.data);
                    this.privMessageFormatter
                        .toConnectionMessage(rawMessage)
                        .then((connectionMessage) => {
                        this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_14__.ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));
                        deferred.resolve(connectionMessage);
                    }, (error) => {
                        // TODO: Events for these ?
                        deferred.reject(`Invalid text message format. Error: ${error}`);
                    });
                }
            }
        };
        return this.privConnectionEstablishDeferral.promise;
    }
    send(message) {
        if (this.privConnectionState !== _common_Exports__WEBPACK_IMPORTED_MODULE_7__.ConnectionState.Connected) {
            return Promise.reject(`Cannot send on connection that is in ${_common_Exports__WEBPACK_IMPORTED_MODULE_7__.ConnectionState[this.privConnectionState]} state`);
        }
        const messageSendStatusDeferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_9__.Deferred();
        const messageSendDeferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_9__.Deferred();
        this.privSendMessageQueue.enqueueFromPromise(messageSendDeferral.promise);
        this.privMessageFormatter
            .fromConnectionMessage(message)
            .then((rawMessage) => {
            messageSendDeferral.resolve({
                Message: message,
                RawWebsocketMessage: rawMessage,
                sendStatusDeferral: messageSendStatusDeferral,
            });
        }, (error) => {
            messageSendDeferral.reject(`Error formatting the message. ${error}`);
        });
        return messageSendStatusDeferral.promise;
    }
    read() {
        if (this.privConnectionState !== _common_Exports__WEBPACK_IMPORTED_MODULE_7__.ConnectionState.Connected) {
            return Promise.reject(`Cannot read on connection that is in ${this.privConnectionState} state`);
        }
        return this.privReceivingMessageQueue.dequeue();
    }
    close(reason) {
        if (this.privWebsocketClient) {
            if (this.privConnectionState !== _common_Exports__WEBPACK_IMPORTED_MODULE_7__.ConnectionState.Disconnected) {
                this.privWebsocketClient.close(1000, reason ? reason : "Normal closure by client");
            }
        }
        else {
            return Promise.resolve();
        }
        return this.privDisconnectDeferral.promise;
    }
    get events() {
        return this.privConnectionEvents;
    }
    sendRawMessage(sendItem) {
        try {
            // indicates we are draining the queue and it came with no message;
            if (!sendItem) {
                return Promise.resolve();
            }
            this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_14__.ConnectionMessageSentEvent(this.privConnectionId, new Date().toISOString(), sendItem.Message));
            // add a check for the ws readystate in order to stop the red console error 'WebSocket is already in CLOSING or CLOSED state' appearing
            if (this.isWebsocketOpen) {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                this.privWebsocketClient.send(sendItem.RawWebsocketMessage.payload);
            }
            else {
                return Promise.reject("websocket send error: Websocket not ready " + this.privConnectionId + " " + sendItem.Message.id + " " + new Error().stack);
            }
            return Promise.resolve();
        }
        catch (e) {
            return Promise.reject(`websocket send error: ${e}`);
        }
    }
    onClose(code, reason) {
        return __awaiter(this, void 0, void 0, function* () {
            const closeReason = `Connection closed. ${code}: ${reason}`;
            this.privConnectionState = _common_Exports__WEBPACK_IMPORTED_MODULE_7__.ConnectionState.Disconnected;
            this.privDisconnectDeferral.resolve();
            yield this.privReceivingMessageQueue.drainAndDispose(() => {
                // TODO: Events for these ?
                // Logger.instance.onEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));
            }, closeReason);
            yield this.privSendMessageQueue.drainAndDispose((pendingSendItem) => {
                pendingSendItem.sendStatusDeferral.reject(closeReason);
            }, closeReason);
        });
    }
    processSendQueue() {
        return __awaiter(this, void 0, void 0, function* () {
            while (true) {
                const itemToSend = this.privSendMessageQueue.dequeue();
                const sendItem = yield itemToSend;
                // indicates we are draining the queue and it came with no message;
                if (!sendItem) {
                    return;
                }
                try {
                    yield this.sendRawMessage(sendItem);
                    sendItem.sendStatusDeferral.resolve();
                }
                catch (sendError) {
                    sendItem.sendStatusDeferral.reject(sendError);
                }
            }
        });
    }
    onEvent(event) {
        this.privConnectionEvents.onEvent(event);
        _common_Exports__WEBPACK_IMPORTED_MODULE_11__.Events.instance.onEvent(event);
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    getAgent() {
        // eslint-disable-next-line @typescript-eslint/unbound-method
        const agent = new (agent_base__WEBPACK_IMPORTED_MODULE_2___default().Agent)(this.createConnection);
        if (this.proxyInfo !== undefined &&
            this.proxyInfo.HostName !== undefined &&
            this.proxyInfo.Port > 0) {
            agent.proxyInfo = this.proxyInfo;
        }
        return agent;
    }
    static GetProxyAgent(proxyInfo) {
        const httpProxyOptions = {
            host: proxyInfo.HostName,
            port: proxyInfo.Port,
        };
        if (!!proxyInfo.UserName) {
            httpProxyOptions.headers = {
                "Proxy-Authentication": "Basic " + new Buffer(`${proxyInfo.UserName}:${(proxyInfo.Password === undefined) ? "" : proxyInfo.Password}`).toString("base64"),
            };
        }
        else {
            httpProxyOptions.headers = {};
        }
        httpProxyOptions.headers.requestOCSP = "true";
        const httpProxyAgent = new (https_proxy_agent__WEBPACK_IMPORTED_MODULE_3___default())(httpProxyOptions);
        return httpProxyAgent;
    }
    createConnection(request, options) {
        let socketPromise;
        options = Object.assign(Object.assign({}, options), {
            requestOCSP: true,
            servername: options.host
        });
        if (!!this.proxyInfo) {
            const httpProxyAgent = WebsocketMessageAdapter.GetProxyAgent(this.proxyInfo);
            const baseAgent = httpProxyAgent;
            socketPromise = new Promise((resolve, reject) => {
                baseAgent.callback(request, options, (error, socket) => {
                    if (!!error) {
                        reject(error);
                    }
                    else {
                        resolve(socket);
                    }
                });
            });
        }
        else {
            if (!!options.secureEndpoint) {
                socketPromise = Promise.resolve(tls__WEBPACK_IMPORTED_MODULE_1__.connect(options));
            }
            else {
                socketPromise = Promise.resolve(net__WEBPACK_IMPORTED_MODULE_0__.connect(options));
            }
        }
        return socketPromise;
    }
    get isWebsocketOpen() {
        return this.privWebsocketClient && this.privWebsocketClient.readyState === this.privWebsocketClient.OPEN;
    }
}
WebsocketMessageAdapter.forceNpmWebSocket = false;

//# sourceMappingURL=WebsocketMessageAdapter.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/AddedLmIntent.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/AddedLmIntent.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AddedLmIntent": () => (/* binding */ AddedLmIntent)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * @class AddedLmIntent
 */
// eslint-disable-next-line max-classes-per-file
class AddedLmIntent {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param modelImpl - The model.
     * @param intentName - The intent name.
     */
    constructor(modelImpl, intentName) {
        this.modelImpl = modelImpl;
        this.intentName = intentName;
    }
}

//# sourceMappingURL=AddedLmIntent.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/AgentConfig.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/AgentConfig.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AgentConfig": () => (/* binding */ AgentConfig)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Represents the JSON used in the agent.config message sent to the speech service.
 */
class AgentConfig {
    toJsonString() {
        return JSON.stringify(this.iPrivConfig);
    }
    get() {
        return this.iPrivConfig;
    }
    /**
     * Setter for the agent.config object.
     * @param value a JSON serializable object.
     */
    set(value) {
        this.iPrivConfig = value;
    }
}

//# sourceMappingURL=AgentConfig.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/CognitiveSubscriptionKeyAuthentication.js":
/*!****************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/CognitiveSubscriptionKeyAuthentication.js ***!
  \****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CognitiveSubscriptionKeyAuthentication": () => (/* binding */ CognitiveSubscriptionKeyAuthentication)
/* harmony export */ });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js");
/* harmony import */ var _HeaderNames__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./HeaderNames */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/HeaderNames.js");
/* harmony import */ var _IAuthentication__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./IAuthentication */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IAuthentication.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.



/**
 * @class
 */
class CognitiveSubscriptionKeyAuthentication {
    /**
     * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.
     * @constructor
     * @param {string} subscriptionKey - The subscription key
     */
    constructor(subscriptionKey) {
        if (!subscriptionKey) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_0__.ArgumentNullError("subscriptionKey");
        }
        this.privAuthInfo = new _IAuthentication__WEBPACK_IMPORTED_MODULE_1__.AuthInfo(_HeaderNames__WEBPACK_IMPORTED_MODULE_2__.HeaderNames.AuthKey, subscriptionKey);
    }
    /**
     * Fetches the subscription key.
     * @member
     * @function
     * @public
     * @param {string} authFetchEventId - The id to fetch.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    fetch(authFetchEventId) {
        return Promise.resolve(this.privAuthInfo);
    }
    /**
     * Fetches the subscription key.
     * @member
     * @function
     * @public
     * @param {string} authFetchEventId - The id to fetch.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    fetchOnExpiry(authFetchEventId) {
        return Promise.resolve(this.privAuthInfo);
    }
}

//# sourceMappingURL=CognitiveSubscriptionKeyAuthentication.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/CognitiveTokenAuthentication.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/CognitiveTokenAuthentication.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CognitiveTokenAuthentication": () => (/* binding */ CognitiveTokenAuthentication)
/* harmony export */ });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js");
/* harmony import */ var _IAuthentication__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./IAuthentication */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IAuthentication.js");
/* harmony import */ var _HeaderNames__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./HeaderNames */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/HeaderNames.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.



class CognitiveTokenAuthentication {
    constructor(fetchCallback, fetchOnExpiryCallback) {
        if (!fetchCallback) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_0__.ArgumentNullError("fetchCallback");
        }
        if (!fetchOnExpiryCallback) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_0__.ArgumentNullError("fetchOnExpiryCallback");
        }
        this.privFetchCallback = fetchCallback;
        this.privFetchOnExpiryCallback = fetchOnExpiryCallback;
    }
    fetch(authFetchEventId) {
        return this.privFetchCallback(authFetchEventId).then((token) => new _IAuthentication__WEBPACK_IMPORTED_MODULE_1__.AuthInfo(_HeaderNames__WEBPACK_IMPORTED_MODULE_2__.HeaderNames.Authorization, token === undefined ? undefined : CognitiveTokenAuthentication.privTokenPrefix + token));
    }
    fetchOnExpiry(authFetchEventId) {
        return this.privFetchOnExpiryCallback(authFetchEventId).then((token) => new _IAuthentication__WEBPACK_IMPORTED_MODULE_1__.AuthInfo(_HeaderNames__WEBPACK_IMPORTED_MODULE_2__.HeaderNames.Authorization, token === undefined ? undefined : CognitiveTokenAuthentication.privTokenPrefix + token));
    }
}
CognitiveTokenAuthentication.privTokenPrefix = "bearer ";

//# sourceMappingURL=CognitiveTokenAuthentication.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ConnectionFactoryBase.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ConnectionFactoryBase.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConnectionFactoryBase": () => (/* binding */ ConnectionFactoryBase)
/* harmony export */ });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _QueryParameterNames__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./QueryParameterNames */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/QueryParameterNames.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.



class ConnectionFactoryBase {
    static getHostSuffix(region) {
        if (!!region) {
            if (region.toLowerCase().startsWith("china")) {
                return ".azure.cn";
            }
            if (region.toLowerCase().startsWith("usgov")) {
                return ".azure.us";
            }
        }
        return ".microsoft.com";
    }
    setCommonUrlParams(config, queryParams, endpoint) {
        const propertyIdToParameterMap = new Map([
            [_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyId.Speech_SegmentationSilenceTimeoutMs, _QueryParameterNames__WEBPACK_IMPORTED_MODULE_1__.QueryParameterNames.SegmentationSilenceTimeoutMs],
            [_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyId.SpeechServiceConnection_EnableAudioLogging, _QueryParameterNames__WEBPACK_IMPORTED_MODULE_1__.QueryParameterNames.EnableAudioLogging],
            [_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, _QueryParameterNames__WEBPACK_IMPORTED_MODULE_1__.QueryParameterNames.EndSilenceTimeoutMs],
            [_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, _QueryParameterNames__WEBPACK_IMPORTED_MODULE_1__.QueryParameterNames.InitialSilenceTimeoutMs],
            [_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyId.SpeechServiceResponse_PostProcessingOption, _QueryParameterNames__WEBPACK_IMPORTED_MODULE_1__.QueryParameterNames.Postprocessing],
            [_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyId.SpeechServiceResponse_ProfanityOption, _QueryParameterNames__WEBPACK_IMPORTED_MODULE_1__.QueryParameterNames.Profanity],
            [_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, _QueryParameterNames__WEBPACK_IMPORTED_MODULE_1__.QueryParameterNames.EnableWordLevelTimestamps],
            [_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyId.SpeechServiceResponse_StablePartialResultThreshold, _QueryParameterNames__WEBPACK_IMPORTED_MODULE_1__.QueryParameterNames.StableIntermediateThreshold],
        ]);
        propertyIdToParameterMap.forEach((parameterName, propertyId) => {
            this.setUrlParameter(propertyId, parameterName, config, queryParams, endpoint);
        });
        const serviceProperties = JSON.parse(config.parameters.getProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_2__.ServicePropertiesPropertyName, "{}"));
        Object.keys(serviceProperties).forEach((value) => {
            queryParams[value] = serviceProperties[value];
        });
    }
    setUrlParameter(propId, parameterName, config, queryParams, endpoint) {
        const value = config.parameters.getProperty(propId, undefined);
        // FIXME: The .search() check will incorrectly match parameter name anywhere in the string
        //        including e.g. the path portion, or even as a substring of other query parameters
        if (value && (!endpoint || endpoint.search(parameterName) === -1)) {
            queryParams[parameterName] = value.toLocaleLowerCase();
        }
    }
}

//# sourceMappingURL=ConnectionFactoryBase.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ConversationServiceRecognizer.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ConversationServiceRecognizer.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConversationServiceRecognizer": () => (/* binding */ ConversationServiceRecognizer)
/* harmony export */ });
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ResultReason.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/OutputFormat.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionResult.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceRecognizerBase.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SimpleSpeechPhrase.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/EnumTranslation.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/Enums.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/DetailedSpeechPhrase.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SpeechHypothesis.js");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class ConversationServiceRecognizer extends _Exports__WEBPACK_IMPORTED_MODULE_0__.ServiceRecognizerBase {
    constructor(authentication, connectionFactory, audioSource, recognizerConfig, recognizer) {
        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);
        this.handleSpeechPhraseMessage = (textBody) => __awaiter(this, void 0, void 0, function* () { return this.handleSpeechPhrase(textBody); });
        this.handleSpeechHypothesisMessage = (textBody) => this.handleSpeechHypothesis(textBody);
    }
    processTypeSpecificMessages(connectionMessage) {
        void connectionMessage;
        return;
    }
    handleRecognizedCallback(result, offset, sessionId) {
        void result;
        void offset;
        void sessionId;
        return;
    }
    handleRecognizingCallback(result, duration, sessionId) {
        void result;
        void duration;
        void sessionId;
        return;
    }
    processSpeechMessages(connectionMessage) {
        return __awaiter(this, void 0, void 0, function* () {
            let processed = false;
            switch (connectionMessage.path.toLowerCase()) {
                case "speech.hypothesis":
                case "speech.fragment":
                    if (!!this.handleSpeechHypothesisMessage) {
                        this.handleSpeechHypothesisMessage(connectionMessage.textBody);
                    }
                    processed = true;
                    break;
                case "speech.phrase":
                    if (!!this.handleSpeechPhraseMessage) {
                        yield this.handleSpeechPhraseMessage(connectionMessage.textBody);
                    }
                    processed = true;
                    break;
                default:
                    break;
            }
            return processed;
        });
    }
    cancelRecognition(sessionId, requestId, cancellationReason, errorCode, error) {
        // Implementing to allow inheritance
        void sessionId;
        void requestId;
        void cancellationReason;
        void errorCode;
        void error;
    }
    handleSpeechPhrase(textBody) {
        return __awaiter(this, void 0, void 0, function* () {
            const simple = _Exports__WEBPACK_IMPORTED_MODULE_1__.SimpleSpeechPhrase.fromJSON(textBody);
            const resultReason = _Exports__WEBPACK_IMPORTED_MODULE_2__.EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);
            let result;
            const resultProps = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyCollection();
            resultProps.setProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.SpeechServiceResponse_JsonResult, textBody);
            const simpleOffset = simple.Offset + this.privRequestSession.currentTurnAudioOffset;
            let offset = simpleOffset;
            this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);
            if (_sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.ResultReason.Canceled === resultReason) {
                const cancelReason = _Exports__WEBPACK_IMPORTED_MODULE_2__.EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);
                const cancellationErrorCode = _Exports__WEBPACK_IMPORTED_MODULE_2__.EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);
                yield this.cancelRecognitionLocal(cancelReason, cancellationErrorCode, _Exports__WEBPACK_IMPORTED_MODULE_2__.EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));
            }
            else {
                if (!(this.privRequestSession.isSpeechEnded && resultReason === _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.ResultReason.NoMatch && simple.RecognitionStatus !== _Exports__WEBPACK_IMPORTED_MODULE_6__.RecognitionStatus.InitialSilenceTimeout)) {
                    if (this.privRecognizerConfig.parameters.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_7__.OutputFormatPropertyName) === _sdk_Exports__WEBPACK_IMPORTED_MODULE_8__.OutputFormat[_sdk_Exports__WEBPACK_IMPORTED_MODULE_8__.OutputFormat.Simple]) {
                        result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_9__.SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, simple.DisplayText, simple.Duration, simpleOffset, simple.Language, simple.LanguageDetectionConfidence, simple.SpeakerId, undefined, textBody, resultProps);
                    }
                    else {
                        const detailed = _Exports__WEBPACK_IMPORTED_MODULE_10__.DetailedSpeechPhrase.fromJSON(textBody);
                        const totalOffset = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;
                        const offsetCorrectedJson = detailed.getJsonWithCorrectedOffsets(totalOffset);
                        result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_9__.SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, detailed.Text, detailed.Duration, totalOffset, detailed.Language, detailed.LanguageDetectionConfidence, detailed.SpeakerId, undefined, offsetCorrectedJson, resultProps);
                        offset = result.offset;
                    }
                    this.handleRecognizedCallback(result, offset, this.privRequestSession.sessionId);
                }
            }
        });
    }
    handleSpeechHypothesis(textBody) {
        const hypothesis = _Exports__WEBPACK_IMPORTED_MODULE_11__.SpeechHypothesis.fromJSON(textBody);
        const offset = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;
        const resultProps = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyCollection();
        resultProps.setProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.SpeechServiceResponse_JsonResult, textBody);
        const result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_9__.SpeechRecognitionResult(this.privRequestSession.requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.ResultReason.RecognizingSpeech, hypothesis.Text, hypothesis.Duration, offset, hypothesis.Language, hypothesis.LanguageDetectionConfidence, hypothesis.SpeakerId, undefined, textBody, resultProps);
        this.privRequestSession.onHypothesis(offset);
        this.handleRecognizingCallback(result, hypothesis.Duration, this.privRequestSession.sessionId);
    }
}

//# sourceMappingURL=ConversationServiceRecognizer.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DialogConnectorFactory.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DialogConnectorFactory.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DialogConnectionFactory": () => (/* binding */ DialogConnectionFactory)
/* harmony export */ });
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/WebsocketConnection.js");
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ProxyInfo.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/OutputFormat.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/DialogServiceConfig.js");
/* harmony import */ var _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ConnectionFactoryBase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ConnectionFactoryBase.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/WebsocketMessageFormatter.js");
/* harmony import */ var _HeaderNames__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./HeaderNames */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/HeaderNames.js");
/* harmony import */ var _QueryParameterNames__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./QueryParameterNames */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/QueryParameterNames.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/* eslint-disable max-classes-per-file */







class DialogConnectionFactory extends _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_0__.ConnectionFactoryBase {
    create(config, authInfo, connectionId) {
        const applicationId = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.Conversation_ApplicationId, "");
        const dialogType = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.Conversation_DialogType);
        const region = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_Region);
        const language = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_RecoLanguage, "en-US");
        const requestTurnStatus = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.Conversation_Request_Bot_Status_Messages, "true");
        const queryParams = {};
        queryParams[_HeaderNames__WEBPACK_IMPORTED_MODULE_2__.HeaderNames.ConnectionId] = connectionId;
        queryParams[_QueryParameterNames__WEBPACK_IMPORTED_MODULE_3__.QueryParameterNames.Format] = config.parameters.getProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.OutputFormatPropertyName, _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.OutputFormat[_sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.OutputFormat.Simple]).toLowerCase();
        queryParams[_QueryParameterNames__WEBPACK_IMPORTED_MODULE_3__.QueryParameterNames.Language] = language;
        queryParams[_QueryParameterNames__WEBPACK_IMPORTED_MODULE_3__.QueryParameterNames.RequestBotStatusMessages] = requestTurnStatus;
        if (applicationId) {
            queryParams[_QueryParameterNames__WEBPACK_IMPORTED_MODULE_3__.QueryParameterNames.BotId] = applicationId;
            if (dialogType === _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__.DialogServiceConfig.DialogTypes.CustomCommands) {
                queryParams[_HeaderNames__WEBPACK_IMPORTED_MODULE_2__.HeaderNames.CustomCommandsAppId] = applicationId;
            }
        }
        const resourceInfix = dialogType === _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__.DialogServiceConfig.DialogTypes.CustomCommands ? "commands/"
            : "";
        const version = dialogType === _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__.DialogServiceConfig.DialogTypes.CustomCommands ? "v1"
            : dialogType === _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__.DialogServiceConfig.DialogTypes.BotFramework ? "v3"
                : "v0";
        const headers = {};
        if (authInfo.token != null && authInfo.token !== "") {
            headers[authInfo.headerName] = authInfo.token;
        }
        // The URL used for connection is chosen in a priority order of specification:
        //  1. If a custom endpoint is provided, that URL is used verbatim.
        //  2. If a custom host is provided (e.g. "wss://my.custom.endpoint.com:1123"), a URL is constructed from it.
        //  3. If no custom connection details are provided, a URL is constructed from default values.
        let endpoint = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_Endpoint, "");
        if (!endpoint) {
            const hostSuffix = _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_0__.ConnectionFactoryBase.getHostSuffix(region);
            const host = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_Host, `wss://${region}.${DialogConnectionFactory.BaseUrl}${hostSuffix}`);
            const standardizedHost = host.endsWith("/") ? host : host + "/";
            endpoint = `${standardizedHost}${resourceInfix}${DialogConnectionFactory.ApiKey}/${version}`;
        }
        this.setCommonUrlParams(config, queryParams, endpoint);
        const enableCompression = config.parameters.getProperty("SPEECH-EnableWebsocketCompression", "false") === "true";
        return new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_7__.WebsocketConnection(endpoint, queryParams, headers, new _Exports__WEBPACK_IMPORTED_MODULE_8__.WebsocketMessageFormatter(), _common_browser_Exports__WEBPACK_IMPORTED_MODULE_9__.ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);
    }
}
DialogConnectionFactory.ApiKey = "api";
DialogConnectionFactory.BaseUrl = "convai.speech";

//# sourceMappingURL=DialogConnectorFactory.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DialogServiceAdapter.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DialogServiceAdapter.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DialogServiceAdapter": () => (/* binding */ DialogServiceAdapter)
/* harmony export */ });
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ReplayableAudioNode.js");
/* harmony import */ var _common_DialogEvents__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../common/DialogEvents */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/DialogEvents.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/EventSource.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionEvents.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Events.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/BackgroundError.js");
/* harmony import */ var _sdk_Audio_AudioOutputFormat__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../sdk/Audio/AudioOutputFormat */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioOutputFormat.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationReason.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationErrorCodes.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionResult.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ResultReason.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionEventArgs.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionCanceledEventArgs.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SessionEventArgs.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/RecognitionEventArgs.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/DialogServiceConfig.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ActivityReceivedEventArgs.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TurnStatusReceivedEventArgs.js");
/* harmony import */ var _DialogServiceTurnStateManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DialogServiceTurnStateManager */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DialogServiceTurnStateManager.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceRecognizerBase.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SimpleSpeechPhrase.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/Enums.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SpeechHypothesis.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SpeechKeyword.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SpeechDetected.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/EnumTranslation.js");
/* harmony import */ var _ServiceMessages_ActivityResponsePayload__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./ServiceMessages/ActivityResponsePayload */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/ActivityResponsePayload.js");
/* harmony import */ var _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./SpeechConnectionMessage.Internal */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechConnectionMessage.Internal.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};









class DialogServiceAdapter extends _Exports__WEBPACK_IMPORTED_MODULE_0__.ServiceRecognizerBase {
    constructor(authentication, connectionFactory, audioSource, recognizerConfig, dialogServiceConnector) {
        super(authentication, connectionFactory, audioSource, recognizerConfig, dialogServiceConnector);
        this.privEvents = new _common_Exports__WEBPACK_IMPORTED_MODULE_1__.EventSource();
        this.privDialogServiceConnector = dialogServiceConnector;
        this.receiveMessageOverride = () => this.receiveDialogMessageOverride();
        this.privTurnStateManager = new _DialogServiceTurnStateManager__WEBPACK_IMPORTED_MODULE_2__.DialogServiceTurnStateManager();
        this.recognizeOverride =
            (recoMode, successCallback, errorCallback) => this.listenOnce(recoMode, successCallback, errorCallback);
        this.postConnectImplOverride = (connection) => this.dialogConnectImpl(connection);
        this.configConnectionOverride = (connection) => this.configConnection(connection);
        this.disconnectOverride = () => this.privDisconnect();
        this.privDialogAudioSource = audioSource;
        this.agentConfigSent = false;
        this.privLastResult = null;
        this.connectionEvents.attach((connectionEvent) => {
            if (connectionEvent.name === "ConnectionClosedEvent") {
                this.terminateMessageLoop = true;
            }
        });
    }
    sendMessage(message) {
        return __awaiter(this, void 0, void 0, function* () {
            const interactionGuid = (0,_common_Exports__WEBPACK_IMPORTED_MODULE_3__.createGuid)();
            const requestId = (0,_common_Exports__WEBPACK_IMPORTED_MODULE_3__.createNoDashGuid)();
            const agentMessage = {
                context: {
                    interactionId: interactionGuid
                },
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                messagePayload: JSON.parse(message),
                version: 0.5
            };
            const agentMessageJson = JSON.stringify(agentMessage);
            const connection = yield this.fetchConnection();
            yield connection.send(new _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_4__.SpeechConnectionMessage(_common_Exports__WEBPACK_IMPORTED_MODULE_5__.MessageType.Text, "agent", requestId, "application/json", agentMessageJson));
        });
    }
    privDisconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__.CancellationReason.Error, _sdk_Exports__WEBPACK_IMPORTED_MODULE_7__.CancellationErrorCode.NoError, "Disconnecting");
            this.terminateMessageLoop = true;
            this.agentConfigSent = false;
            return;
        });
    }
    processTypeSpecificMessages(connectionMessage) {
        const resultProps = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_8__.PropertyCollection();
        if (connectionMessage.messageType === _common_Exports__WEBPACK_IMPORTED_MODULE_5__.MessageType.Text) {
            resultProps.setProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_9__.PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);
        }
        let result;
        let processed;
        switch (connectionMessage.path.toLowerCase()) {
            case "speech.phrase":
                const speechPhrase = _Exports__WEBPACK_IMPORTED_MODULE_10__.SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);
                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + speechPhrase.Offset + speechPhrase.Duration);
                if (speechPhrase.RecognitionStatus !== _Exports__WEBPACK_IMPORTED_MODULE_11__.RecognitionStatus.TooManyRequests && speechPhrase.RecognitionStatus !== _Exports__WEBPACK_IMPORTED_MODULE_11__.RecognitionStatus.Error) {
                    const args = this.fireEventForResult(speechPhrase, resultProps);
                    this.privLastResult = args.result;
                    if (!!this.privDialogServiceConnector.recognized) {
                        try {
                            this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, args);
                            /* eslint-disable no-empty */
                        }
                        catch (error) {
                            // Not going to let errors in the event handler
                            // trip things up.
                        }
                    }
                }
                processed = true;
                break;
            case "speech.hypothesis":
                const hypothesis = _Exports__WEBPACK_IMPORTED_MODULE_12__.SpeechHypothesis.fromJSON(connectionMessage.textBody);
                const offset = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;
                result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_13__.SpeechRecognitionResult(this.privRequestSession.requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_14__.ResultReason.RecognizingSpeech, hypothesis.Text, hypothesis.Duration, offset, hypothesis.Language, hypothesis.LanguageDetectionConfidence, undefined, undefined, connectionMessage.textBody, resultProps);
                this.privRequestSession.onHypothesis(offset);
                const ev = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_15__.SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);
                if (!!this.privDialogServiceConnector.recognizing) {
                    try {
                        this.privDialogServiceConnector.recognizing(this.privDialogServiceConnector, ev);
                        /* eslint-disable no-empty */
                    }
                    catch (error) {
                        // Not going to let errors in the event handler
                        // trip things up.
                    }
                }
                processed = true;
                break;
            case "speech.keyword":
                const keyword = _Exports__WEBPACK_IMPORTED_MODULE_16__.SpeechKeyword.fromJSON(connectionMessage.textBody);
                result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_13__.SpeechRecognitionResult(this.privRequestSession.requestId, keyword.Status === "Accepted" ? _sdk_Exports__WEBPACK_IMPORTED_MODULE_14__.ResultReason.RecognizedKeyword : _sdk_Exports__WEBPACK_IMPORTED_MODULE_14__.ResultReason.NoMatch, keyword.Text, keyword.Duration, keyword.Offset, undefined, undefined, undefined, undefined, connectionMessage.textBody, resultProps);
                if (keyword.Status !== "Accepted") {
                    this.privLastResult = result;
                }
                const event = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_15__.SpeechRecognitionEventArgs(result, result.duration, result.resultId);
                if (!!this.privDialogServiceConnector.recognized) {
                    try {
                        this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, event);
                        /* eslint-disable no-empty */
                    }
                    catch (error) {
                        // Not going to let errors in the event handler
                        // trip things up.
                    }
                }
                processed = true;
                break;
            case "audio":
                {
                    const audioRequestId = connectionMessage.requestId.toUpperCase();
                    const turn = this.privTurnStateManager.GetTurn(audioRequestId);
                    try {
                        // Empty binary message signals end of stream.
                        if (!connectionMessage.binaryBody) {
                            turn.endAudioStream();
                        }
                        else {
                            turn.audioStream.write(connectionMessage.binaryBody);
                        }
                    }
                    catch (error) {
                        // Not going to let errors in the event handler
                        // trip things up.
                    }
                }
                processed = true;
                break;
            case "response":
                {
                    this.handleResponseMessage(connectionMessage);
                }
                processed = true;
                break;
            default:
                break;
        }
        const defferal = new _common_Exports__WEBPACK_IMPORTED_MODULE_17__.Deferred();
        defferal.resolve(processed);
        return defferal.promise;
    }
    // Cancels recognition.
    cancelRecognition(sessionId, requestId, cancellationReason, errorCode, error) {
        return __awaiter(this, void 0, void 0, function* () {
            this.terminateMessageLoop = true;
            if (!!this.privRequestSession.isRecognizing) {
                yield this.privRequestSession.onStopRecognizing();
            }
            if (!!this.privDialogServiceConnector.canceled) {
                const properties = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_8__.PropertyCollection();
                properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_18__.CancellationErrorCodePropertyName, _sdk_Exports__WEBPACK_IMPORTED_MODULE_7__.CancellationErrorCode[errorCode]);
                const cancelEvent = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_19__.SpeechRecognitionCanceledEventArgs(cancellationReason, error, errorCode, undefined, sessionId);
                try {
                    this.privDialogServiceConnector.canceled(this.privDialogServiceConnector, cancelEvent);
                    /* eslint-disable no-empty */
                }
                catch (_a) { }
                if (!!this.privSuccessCallback) {
                    const result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_13__.SpeechRecognitionResult(undefined, // ResultId
                    _sdk_Exports__WEBPACK_IMPORTED_MODULE_14__.ResultReason.Canceled, undefined, // Text
                    undefined, // Duration
                    undefined, // Offset
                    undefined, // Language
                    undefined, // Language Detection Confidence
                    undefined, // Speaker Id
                    error, undefined, // Json
                    properties);
                    try {
                        this.privSuccessCallback(result);
                        this.privSuccessCallback = undefined;
                        /* eslint-disable no-empty */
                    }
                    catch (_b) { }
                }
            }
        });
    }
    listenOnce(recoMode, successCallback, errorCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            this.privRecognizerConfig.recognitionMode = recoMode;
            this.privSuccessCallback = successCallback;
            this.privErrorCallback = errorCallback;
            this.privRequestSession.startNewRecognition();
            this.privRequestSession.listenForServiceTelemetry(this.privDialogAudioSource.events);
            this.privRecognizerConfig.parameters.setProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_9__.PropertyId.Speech_SessionId, this.privRequestSession.sessionId);
            // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().
            const conPromise = this.connectImpl();
            const preAudioPromise = this.sendPreAudioMessages();
            const node = yield this.privDialogAudioSource.attach(this.privRequestSession.audioNodeId);
            const format = yield this.privDialogAudioSource.format;
            const deviceInfo = yield this.privDialogAudioSource.deviceInfo;
            const audioNode = new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_20__.ReplayableAudioNode(node, format.avgBytesPerSec);
            yield this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);
            this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };
            try {
                yield conPromise;
                yield preAudioPromise;
            }
            catch (error) {
                yield this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__.CancellationReason.Error, _sdk_Exports__WEBPACK_IMPORTED_MODULE_7__.CancellationErrorCode.ConnectionFailure, error);
                return Promise.resolve();
            }
            const sessionStartEventArgs = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_21__.SessionEventArgs(this.privRequestSession.sessionId);
            if (!!this.privRecognizer.sessionStarted) {
                this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);
            }
            const audioSendPromise = this.sendAudio(audioNode);
            // /* eslint-disable no-empty */
            audioSendPromise.then(() => { }, (error) => __awaiter(this, void 0, void 0, function* () {
                yield this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__.CancellationReason.Error, _sdk_Exports__WEBPACK_IMPORTED_MODULE_7__.CancellationErrorCode.RuntimeError, error);
            }));
        });
    }
    // Establishes a websocket connection to the end point.
    dialogConnectImpl(connection) {
        this.privConnectionLoop = this.startMessageLoop();
        return connection;
    }
    receiveDialogMessageOverride() {
        // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages
        const communicationCustodian = new _common_Exports__WEBPACK_IMPORTED_MODULE_17__.Deferred();
        const loop = () => __awaiter(this, void 0, void 0, function* () {
            try {
                const isDisposed = this.isDisposed();
                const terminateMessageLoop = (!this.isDisposed() && this.terminateMessageLoop);
                if (isDisposed || terminateMessageLoop) {
                    // We're done.
                    communicationCustodian.resolve(undefined);
                    return;
                }
                const connection = yield this.fetchConnection();
                const message = yield connection.read();
                if (!message) {
                    return loop();
                }
                const connectionMessage = _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_4__.SpeechConnectionMessage.fromConnectionMessage(message);
                switch (connectionMessage.path.toLowerCase()) {
                    case "turn.start":
                        {
                            const turnRequestId = connectionMessage.requestId.toUpperCase();
                            const audioSessionReqId = this.privRequestSession.requestId.toUpperCase();
                            // turn started by the service
                            if (turnRequestId !== audioSessionReqId) {
                                this.privTurnStateManager.StartTurn(turnRequestId);
                            }
                            else {
                                this.privRequestSession.onServiceTurnStartResponse();
                            }
                        }
                        break;
                    case "speech.startdetected":
                        const speechStartDetected = _Exports__WEBPACK_IMPORTED_MODULE_22__.SpeechDetected.fromJSON(connectionMessage.textBody);
                        const speechStartEventArgs = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_23__.RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);
                        if (!!this.privRecognizer.speechStartDetected) {
                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);
                        }
                        break;
                    case "speech.enddetected":
                        let json;
                        if (connectionMessage.textBody.length > 0) {
                            json = connectionMessage.textBody;
                        }
                        else {
                            // If the request was empty, the JSON returned is empty.
                            json = "{ Offset: 0 }";
                        }
                        const speechStopDetected = _Exports__WEBPACK_IMPORTED_MODULE_22__.SpeechDetected.fromJSON(json);
                        this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset);
                        const speechStopEventArgs = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_23__.RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);
                        if (!!this.privRecognizer.speechEndDetected) {
                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);
                        }
                        break;
                    case "turn.end":
                        {
                            const turnEndRequestId = connectionMessage.requestId.toUpperCase();
                            const audioSessionReqId = this.privRequestSession.requestId.toUpperCase();
                            // turn started by the service
                            if (turnEndRequestId !== audioSessionReqId) {
                                this.privTurnStateManager.CompleteTurn(turnEndRequestId);
                            }
                            else {
                                // Audio session turn
                                const sessionStopEventArgs = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_21__.SessionEventArgs(this.privRequestSession.sessionId);
                                yield this.privRequestSession.onServiceTurnEndResponse(false);
                                if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {
                                    if (!!this.privRecognizer.sessionStopped) {
                                        this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);
                                    }
                                }
                                // report result to promise.
                                if (!!this.privSuccessCallback && this.privLastResult) {
                                    try {
                                        this.privSuccessCallback(this.privLastResult);
                                        this.privLastResult = null;
                                    }
                                    catch (e) {
                                        if (!!this.privErrorCallback) {
                                            this.privErrorCallback(e);
                                        }
                                    }
                                    // Only invoke the call back once.
                                    // and if it's successful don't invoke the
                                    // error after that.
                                    this.privSuccessCallback = undefined;
                                    this.privErrorCallback = undefined;
                                }
                            }
                        }
                        break;
                    default:
                        try {
                            const processed = yield this.processTypeSpecificMessages(connectionMessage);
                            if (!processed) {
                                if (!!this.serviceEvents) {
                                    this.serviceEvents.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_24__.ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));
                                }
                            }
                        }
                        catch (e) {
                            //
                        }
                }
                const ret = loop();
                return ret;
            }
            catch (error) {
                this.terminateMessageLoop = true;
                communicationCustodian.resolve();
            }
        });
        loop().catch((reason) => {
            _common_Exports__WEBPACK_IMPORTED_MODULE_25__.Events.instance.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_26__.BackgroundEvent(reason));
        });
        return communicationCustodian.promise;
    }
    startMessageLoop() {
        return __awaiter(this, void 0, void 0, function* () {
            this.terminateMessageLoop = false;
            try {
                yield this.receiveDialogMessageOverride();
            }
            catch (error) {
                yield this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__.CancellationReason.Error, _sdk_Exports__WEBPACK_IMPORTED_MODULE_7__.CancellationErrorCode.RuntimeError, error);
            }
            return Promise.resolve();
        });
    }
    // Takes an established websocket connection to the endpoint and sends speech configuration information.
    configConnection(connection) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.terminateMessageLoop) {
                this.terminateMessageLoop = false;
                return Promise.reject("Connection to service terminated.");
            }
            yield this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());
            yield this.sendAgentConfig(connection);
            return connection;
        });
    }
    sendPreAudioMessages() {
        return __awaiter(this, void 0, void 0, function* () {
            const connection = yield this.fetchConnection();
            this.addKeywordContextData();
            yield this.sendSpeechContext(connection, true);
            yield this.sendAgentContext(connection);
            yield this.sendWaveHeader(connection);
        });
    }
    sendAgentConfig(connection) {
        if (this.agentConfig && !this.agentConfigSent) {
            if (this.privRecognizerConfig
                .parameters
                .getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_9__.PropertyId.Conversation_DialogType) === _sdk_Exports__WEBPACK_IMPORTED_MODULE_27__.DialogServiceConfig.DialogTypes.CustomCommands) {
                const config = this.agentConfig.get();
                config.botInfo.commandsCulture = this.privRecognizerConfig.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_9__.PropertyId.SpeechServiceConnection_RecoLanguage, "en-us");
                this.agentConfig.set(config);
            }
            this.onEvent(new _common_DialogEvents__WEBPACK_IMPORTED_MODULE_28__.SendingAgentContextMessageEvent(this.agentConfig));
            const agentConfigJson = this.agentConfig.toJsonString();
            // guard against sending this multiple times on one connection
            this.agentConfigSent = true;
            return connection.send(new _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_4__.SpeechConnectionMessage(_common_Exports__WEBPACK_IMPORTED_MODULE_5__.MessageType.Text, "agent.config", this.privRequestSession.requestId, "application/json", agentConfigJson));
        }
        return;
    }
    sendAgentContext(connection) {
        const guid = (0,_common_Exports__WEBPACK_IMPORTED_MODULE_3__.createGuid)();
        const speechActivityTemplate = this.privDialogServiceConnector.properties.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_9__.PropertyId.Conversation_Speech_Activity_Template);
        const agentContext = {
            channelData: "",
            context: {
                interactionId: guid
            },
            messagePayload: typeof speechActivityTemplate === undefined ? undefined : speechActivityTemplate,
            version: 0.5
        };
        const agentContextJson = JSON.stringify(agentContext);
        return connection.send(new _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_4__.SpeechConnectionMessage(_common_Exports__WEBPACK_IMPORTED_MODULE_5__.MessageType.Text, "speech.agent.context", this.privRequestSession.requestId, "application/json", agentContextJson));
    }
    fireEventForResult(serviceResult, properties) {
        const resultReason = _Exports__WEBPACK_IMPORTED_MODULE_29__.EnumTranslation.implTranslateRecognitionResult(serviceResult.RecognitionStatus);
        const offset = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;
        const result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_13__.SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, serviceResult.DisplayText, serviceResult.Duration, offset, serviceResult.Language, serviceResult.LanguageDetectionConfidence, undefined, undefined, JSON.stringify(serviceResult), properties);
        const ev = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_15__.SpeechRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);
        return ev;
    }
    handleResponseMessage(responseMessage) {
        // "response" messages can contain either "message" (activity) or "MessageStatus" data. Fire the appropriate
        // event according to the message type that's specified.
        const responsePayload = JSON.parse(responseMessage.textBody);
        switch (responsePayload.messageType.toLowerCase()) {
            case "message":
                const responseRequestId = responseMessage.requestId.toUpperCase();
                const activityPayload = _ServiceMessages_ActivityResponsePayload__WEBPACK_IMPORTED_MODULE_30__.ActivityPayloadResponse.fromJSON(responseMessage.textBody);
                const turn = this.privTurnStateManager.GetTurn(responseRequestId);
                // update the conversation Id
                if (activityPayload.conversationId) {
                    const updateAgentConfig = this.agentConfig.get();
                    updateAgentConfig.botInfo.conversationId = activityPayload.conversationId;
                    this.agentConfig.set(updateAgentConfig);
                }
                const pullAudioOutputStream = turn.processActivityPayload(activityPayload, _sdk_Audio_AudioOutputFormat__WEBPACK_IMPORTED_MODULE_31__.AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(this.privDialogServiceConnector.properties.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_9__.PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)));
                const activity = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_32__.ActivityReceivedEventArgs(activityPayload.messagePayload, pullAudioOutputStream);
                if (!!this.privDialogServiceConnector.activityReceived) {
                    try {
                        this.privDialogServiceConnector.activityReceived(this.privDialogServiceConnector, activity);
                        /* eslint-disable-next-line no-empty */
                    }
                    catch (error) {
                        // Not going to let errors in the event handler
                        // trip things up.
                    }
                }
                break;
            case "messagestatus":
                if (!!this.privDialogServiceConnector.turnStatusReceived) {
                    try {
                        this.privDialogServiceConnector.turnStatusReceived(this.privDialogServiceConnector, new _sdk_Exports__WEBPACK_IMPORTED_MODULE_33__.TurnStatusReceivedEventArgs(responseMessage.textBody));
                        /* eslint-disable-next-line no-empty */
                    }
                    catch (error) {
                        // Not going to let errors in the event handler
                        // trip things up.
                    }
                }
                break;
            default:
                _common_Exports__WEBPACK_IMPORTED_MODULE_25__.Events.instance.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_26__.BackgroundEvent(`Unexpected response of type ${responsePayload.messageType}. Ignoring.`));
                break;
        }
    }
    onEvent(event) {
        this.privEvents.onEvent(event);
        _common_Exports__WEBPACK_IMPORTED_MODULE_25__.Events.instance.onEvent(event);
    }
    addKeywordContextData() {
        const keywordPropertyValue = this.privRecognizerConfig.parameters.getProperty("SPEECH-KeywordsToDetect");
        if (keywordPropertyValue === undefined) {
            return;
        }
        const keywordOffsetPropertyValue = this.privRecognizerConfig.parameters
            .getProperty("SPEECH-KeywordsToDetect-Offsets");
        const keywordDurationPropertyValue = this.privRecognizerConfig.parameters
            .getProperty("SPEECH-KeywordsToDetect-Durations");
        const keywords = keywordPropertyValue.split(";");
        const keywordOffsets = keywordOffsetPropertyValue === undefined ? [] : keywordOffsetPropertyValue.split(";");
        const keywordDurations = keywordDurationPropertyValue === undefined ? [] : keywordDurationPropertyValue.split(";");
        const keywordDefinitionArray = [];
        for (let i = 0; i < keywords.length; i++) {
            const definition = {};
            definition.text = keywords[i];
            if (i < keywordOffsets.length) {
                definition.offset = Number(keywordOffsets[i]);
            }
            if (i < keywordDurations.length) {
                definition.duration = Number(keywordDurations[i]);
            }
            keywordDefinitionArray.push(definition);
        }
        this.speechContext.setSection("invocationSource", "VoiceActivationWithKeyword");
        this.speechContext.setSection("keywordDetection", [{
                clientDetectedKeywords: keywordDefinitionArray,
                onReject: { action: "EndOfTurn" },
                type: "startTrigger"
            }]);
    }
}

//# sourceMappingURL=DialogServiceAdapter.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DialogServiceTurnState.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DialogServiceTurnState.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DialogServiceTurnState": () => (/* binding */ DialogServiceTurnState)
/* harmony export */ });
/* harmony import */ var _sdk_Audio_AudioOutputFormat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../sdk/Audio/AudioOutputFormat */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioOutputFormat.js");
/* harmony import */ var _sdk_Audio_AudioOutputStream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sdk/Audio/AudioOutputStream */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioOutputStream.js");
/* harmony import */ var _ServiceMessages_ActivityResponsePayload__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ServiceMessages/ActivityResponsePayload */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/ActivityResponsePayload.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.



class DialogServiceTurnState {
    constructor(manager, requestId) {
        this.privRequestId = requestId;
        this.privIsCompleted = false;
        this.privAudioStream = null;
        this.privTurnManager = manager;
        this.resetTurnEndTimeout();
    }
    get audioStream() {
        // Called when is needed to stream.
        this.resetTurnEndTimeout();
        return this.privAudioStream;
    }
    processActivityPayload(payload, audioFormat) {
        if (payload.messageDataStreamType === _ServiceMessages_ActivityResponsePayload__WEBPACK_IMPORTED_MODULE_0__.MessageDataStreamType.TextToSpeechAudio) {
            this.privAudioStream = _sdk_Audio_AudioOutputStream__WEBPACK_IMPORTED_MODULE_1__.AudioOutputStream.createPullStream();
            this.privAudioStream.format = (audioFormat !== undefined) ? audioFormat : _sdk_Audio_AudioOutputFormat__WEBPACK_IMPORTED_MODULE_2__.AudioOutputFormatImpl.getDefaultOutputFormat();
        }
        return this.privAudioStream;
    }
    endAudioStream() {
        if (this.privAudioStream !== null && !this.privAudioStream.isClosed) {
            this.privAudioStream.close();
        }
    }
    complete() {
        if (this.privTimeoutToken !== undefined) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            clearTimeout(this.privTimeoutToken);
        }
        this.endAudioStream();
    }
    resetTurnEndTimeout() {
        if (this.privTimeoutToken !== undefined) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            clearTimeout(this.privTimeoutToken);
        }
        this.privTimeoutToken = setTimeout(() => {
            this.privTurnManager.CompleteTurn(this.privRequestId);
            return;
        }, 2000);
    }
}

//# sourceMappingURL=DialogServiceTurnState.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DialogServiceTurnStateManager.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DialogServiceTurnStateManager.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DialogServiceTurnStateManager": () => (/* binding */ DialogServiceTurnStateManager)
/* harmony export */ });
/* harmony import */ var _common_Error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Error */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js");
/* harmony import */ var _DialogServiceTurnState__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DialogServiceTurnState */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DialogServiceTurnState.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


class DialogServiceTurnStateManager {
    constructor() {
        this.privTurnMap = new Map();
        return;
    }
    StartTurn(id) {
        if (this.privTurnMap.has(id)) {
            throw new _common_Error__WEBPACK_IMPORTED_MODULE_0__.InvalidOperationError("Service error: There is already a turn with id:" + id);
        }
        const turnState = new _DialogServiceTurnState__WEBPACK_IMPORTED_MODULE_1__.DialogServiceTurnState(this, id);
        this.privTurnMap.set(id, turnState);
        return this.privTurnMap.get(id);
    }
    GetTurn(id) {
        return this.privTurnMap.get(id);
    }
    CompleteTurn(id) {
        if (!this.privTurnMap.has(id)) {
            throw new _common_Error__WEBPACK_IMPORTED_MODULE_0__.InvalidOperationError("Service error: Received turn end for an unknown turn id:" + id);
        }
        const turnState = this.privTurnMap.get(id);
        turnState.complete();
        this.privTurnMap.delete(id);
        return turnState;
    }
}

//# sourceMappingURL=DialogServiceTurnStateManager.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DynamicGrammarBuilder.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DynamicGrammarBuilder.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DynamicGrammarBuilder": () => (/* binding */ DynamicGrammarBuilder)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Responsible for building the object to be sent to the speech service to support dynamic grammars.
 * @class DynamicGrammarBuilder
 */
class DynamicGrammarBuilder {
    // Adds one more reference phrases to the dynamic grammar to send.
    // All added phrases are generic phrases.
    addPhrase(phrase) {
        if (!this.privPhrases) {
            this.privPhrases = [];
        }
        if (phrase instanceof Array) {
            this.privPhrases = this.privPhrases.concat(phrase);
        }
        else {
            this.privPhrases.push(phrase);
        }
    }
    // Clears all phrases stored in the current object.
    clearPhrases() {
        this.privPhrases = undefined;
    }
    // Adds one or more reference grammars to the current grammar.
    addReferenceGrammar(grammar) {
        if (!this.privGrammars) {
            this.privGrammars = [];
        }
        if (grammar instanceof Array) {
            this.privGrammars = this.privGrammars.concat(grammar);
        }
        else {
            this.privGrammars.push(grammar);
        }
    }
    // clears all grammars stored on the recognizer.
    clearGrammars() {
        this.privGrammars = undefined;
    }
    // Generates an object that represents the dynamic grammar used by the Speech Service.
    // This is done by building an object with the correct layout based on the phrases and reference grammars added to this instance
    // of a DynamicGrammarBuilder
    generateGrammarObject() {
        if (this.privGrammars === undefined && this.privPhrases === undefined) {
            return undefined;
        }
        const retObj = {};
        retObj.ReferenceGrammars = this.privGrammars;
        if (undefined !== this.privPhrases && 0 !== this.privPhrases.length) {
            const retPhrases = [];
            this.privPhrases.forEach((value) => {
                retPhrases.push({
                    Text: value,
                });
            });
            retObj.Groups = [{ Type: "Generic", Items: retPhrases }];
        }
        return retObj;
    }
}

//# sourceMappingURL=DynamicGrammarBuilder.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DynamicGrammarInterfaces.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DynamicGrammarInterfaces.js ***!
  \**************************************************************************************************************************/
/***/ (() => {

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

//# sourceMappingURL=DynamicGrammarInterfaces.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/EnumTranslation.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/EnumTranslation.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EnumTranslation": () => (/* binding */ EnumTranslation)
/* harmony export */ });
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ResultReason.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationReason.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationErrorCodes.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/Enums.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


class EnumTranslation {
    static implTranslateRecognitionResult(recognitionStatus) {
        let reason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.ResultReason.Canceled;
        switch (recognitionStatus) {
            case _Exports__WEBPACK_IMPORTED_MODULE_1__.RecognitionStatus.Success:
                reason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.ResultReason.RecognizedSpeech;
                break;
            case _Exports__WEBPACK_IMPORTED_MODULE_1__.RecognitionStatus.NoMatch:
            case _Exports__WEBPACK_IMPORTED_MODULE_1__.RecognitionStatus.InitialSilenceTimeout:
            case _Exports__WEBPACK_IMPORTED_MODULE_1__.RecognitionStatus.BabbleTimeout:
            case _Exports__WEBPACK_IMPORTED_MODULE_1__.RecognitionStatus.EndOfDictation:
                reason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.ResultReason.NoMatch;
                break;
            case _Exports__WEBPACK_IMPORTED_MODULE_1__.RecognitionStatus.Error:
            case _Exports__WEBPACK_IMPORTED_MODULE_1__.RecognitionStatus.BadRequest:
            case _Exports__WEBPACK_IMPORTED_MODULE_1__.RecognitionStatus.Forbidden:
            default:
                reason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.ResultReason.Canceled;
                break;
        }
        return reason;
    }
    static implTranslateCancelResult(recognitionStatus) {
        let reason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.CancellationReason.EndOfStream;
        switch (recognitionStatus) {
            case _Exports__WEBPACK_IMPORTED_MODULE_1__.RecognitionStatus.Success:
            case _Exports__WEBPACK_IMPORTED_MODULE_1__.RecognitionStatus.EndOfDictation:
            case _Exports__WEBPACK_IMPORTED_MODULE_1__.RecognitionStatus.NoMatch:
                reason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.CancellationReason.EndOfStream;
                break;
            case _Exports__WEBPACK_IMPORTED_MODULE_1__.RecognitionStatus.InitialSilenceTimeout:
            case _Exports__WEBPACK_IMPORTED_MODULE_1__.RecognitionStatus.BabbleTimeout:
            case _Exports__WEBPACK_IMPORTED_MODULE_1__.RecognitionStatus.Error:
            case _Exports__WEBPACK_IMPORTED_MODULE_1__.RecognitionStatus.BadRequest:
            case _Exports__WEBPACK_IMPORTED_MODULE_1__.RecognitionStatus.Forbidden:
            default:
                reason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.CancellationReason.Error;
                break;
        }
        return reason;
    }
    static implTranslateCancelErrorCode(recognitionStatus) {
        let reason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.CancellationErrorCode.NoError;
        switch (recognitionStatus) {
            case _Exports__WEBPACK_IMPORTED_MODULE_1__.RecognitionStatus.Error:
                reason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.CancellationErrorCode.ServiceError;
                break;
            case _Exports__WEBPACK_IMPORTED_MODULE_1__.RecognitionStatus.TooManyRequests:
                reason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.CancellationErrorCode.TooManyRequests;
                break;
            case _Exports__WEBPACK_IMPORTED_MODULE_1__.RecognitionStatus.BadRequest:
                reason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.CancellationErrorCode.BadRequestParameters;
                break;
            case _Exports__WEBPACK_IMPORTED_MODULE_1__.RecognitionStatus.Forbidden:
                reason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.CancellationErrorCode.Forbidden;
                break;
            default:
                reason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.CancellationErrorCode.NoError;
                break;
        }
        return reason;
    }
    static implTranslateErrorDetails(cancellationErrorCode) {
        let errorDetails = "The speech service encountered an internal error and could not continue.";
        switch (cancellationErrorCode) {
            case _sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.CancellationErrorCode.Forbidden:
                errorDetails = "The recognizer is using a free subscription that ran out of quota.";
                break;
            case _sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.CancellationErrorCode.BadRequestParameters:
                errorDetails = "Invalid parameter or unsupported audio format in the request.";
                break;
            case _sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.CancellationErrorCode.TooManyRequests:
                errorDetails = "The number of parallel requests exceeded the number of allowed concurrent transcriptions.";
                break;
            default:
                break;
        }
        return errorDetails;
    }
}

//# sourceMappingURL=EnumTranslation.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AddedLmIntent": () => (/* reexport safe */ _AddedLmIntent__WEBPACK_IMPORTED_MODULE_30__.AddedLmIntent),
/* harmony export */   "AgentConfig": () => (/* reexport safe */ _AgentConfig__WEBPACK_IMPORTED_MODULE_39__.AgentConfig),
/* harmony export */   "AuthInfo": () => (/* reexport safe */ _IAuthentication__WEBPACK_IMPORTED_MODULE_2__.AuthInfo),
/* harmony export */   "AutoDetectSourceLanguagesOpenRangeOptionName": () => (/* binding */ AutoDetectSourceLanguagesOpenRangeOptionName),
/* harmony export */   "CancellationErrorCodePropertyName": () => (/* binding */ CancellationErrorCodePropertyName),
/* harmony export */   "CognitiveSubscriptionKeyAuthentication": () => (/* reexport safe */ _CognitiveSubscriptionKeyAuthentication__WEBPACK_IMPORTED_MODULE_0__.CognitiveSubscriptionKeyAuthentication),
/* harmony export */   "CognitiveTokenAuthentication": () => (/* reexport safe */ _CognitiveTokenAuthentication__WEBPACK_IMPORTED_MODULE_1__.CognitiveTokenAuthentication),
/* harmony export */   "ConnectingToServiceEvent": () => (/* reexport safe */ _RecognitionEvents__WEBPACK_IMPORTED_MODULE_7__.ConnectingToServiceEvent),
/* harmony export */   "Context": () => (/* reexport safe */ _RecognizerConfig__WEBPACK_IMPORTED_MODULE_10__.Context),
/* harmony export */   "ConversationConnectionConfig": () => (/* reexport safe */ _Transcription_Exports__WEBPACK_IMPORTED_MODULE_40__.ConversationConnectionConfig),
/* harmony export */   "ConversationManager": () => (/* reexport safe */ _Transcription_Exports__WEBPACK_IMPORTED_MODULE_40__.ConversationManager),
/* harmony export */   "ConversationReceivedTranslationEventArgs": () => (/* reexport safe */ _Transcription_Exports__WEBPACK_IMPORTED_MODULE_40__.ConversationReceivedTranslationEventArgs),
/* harmony export */   "ConversationRecognizerFactory": () => (/* reexport safe */ _Transcription_Exports__WEBPACK_IMPORTED_MODULE_40__.ConversationRecognizerFactory),
/* harmony export */   "ConversationServiceRecognizer": () => (/* reexport safe */ _ConversationServiceRecognizer__WEBPACK_IMPORTED_MODULE_9__.ConversationServiceRecognizer),
/* harmony export */   "ConversationTranslatorCommandTypes": () => (/* reexport safe */ _Transcription_Exports__WEBPACK_IMPORTED_MODULE_40__.ConversationTranslatorCommandTypes),
/* harmony export */   "ConversationTranslatorMessageTypes": () => (/* reexport safe */ _Transcription_Exports__WEBPACK_IMPORTED_MODULE_40__.ConversationTranslatorMessageTypes),
/* harmony export */   "DetailedSpeechPhrase": () => (/* reexport safe */ _ServiceMessages_DetailedSpeechPhrase__WEBPACK_IMPORTED_MODULE_28__.DetailedSpeechPhrase),
/* harmony export */   "Device": () => (/* reexport safe */ _RecognizerConfig__WEBPACK_IMPORTED_MODULE_10__.Device),
/* harmony export */   "DialogServiceAdapter": () => (/* reexport safe */ _DialogServiceAdapter__WEBPACK_IMPORTED_MODULE_38__.DialogServiceAdapter),
/* harmony export */   "DynamicGrammarBuilder": () => (/* reexport safe */ _DynamicGrammarBuilder__WEBPACK_IMPORTED_MODULE_36__.DynamicGrammarBuilder),
/* harmony export */   "EnumTranslation": () => (/* reexport safe */ _EnumTranslation__WEBPACK_IMPORTED_MODULE_17__.EnumTranslation),
/* harmony export */   "ForceDictationPropertyName": () => (/* binding */ ForceDictationPropertyName),
/* harmony export */   "IntentConnectionFactory": () => (/* reexport safe */ _IntentConnectionFactory__WEBPACK_IMPORTED_MODULE_5__.IntentConnectionFactory),
/* harmony export */   "IntentResponse": () => (/* reexport safe */ _ServiceMessages_IntentResponse__WEBPACK_IMPORTED_MODULE_32__.IntentResponse),
/* harmony export */   "IntentServiceRecognizer": () => (/* reexport safe */ _IntentServiceRecognizer__WEBPACK_IMPORTED_MODULE_31__.IntentServiceRecognizer),
/* harmony export */   "InternalParticipants": () => (/* reexport safe */ _Transcription_Exports__WEBPACK_IMPORTED_MODULE_40__.InternalParticipants),
/* harmony export */   "ListeningStartedEvent": () => (/* reexport safe */ _RecognitionEvents__WEBPACK_IMPORTED_MODULE_7__.ListeningStartedEvent),
/* harmony export */   "LockRoomEventArgs": () => (/* reexport safe */ _Transcription_Exports__WEBPACK_IMPORTED_MODULE_40__.LockRoomEventArgs),
/* harmony export */   "MetadataType": () => (/* reexport safe */ _ServiceMessages_SynthesisAudioMetadata__WEBPACK_IMPORTED_MODULE_41__.MetadataType),
/* harmony export */   "MuteAllEventArgs": () => (/* reexport safe */ _Transcription_Exports__WEBPACK_IMPORTED_MODULE_40__.MuteAllEventArgs),
/* harmony export */   "OS": () => (/* reexport safe */ _RecognizerConfig__WEBPACK_IMPORTED_MODULE_10__.OS),
/* harmony export */   "OutputFormatPropertyName": () => (/* binding */ OutputFormatPropertyName),
/* harmony export */   "ParticipantAttributeEventArgs": () => (/* reexport safe */ _Transcription_Exports__WEBPACK_IMPORTED_MODULE_40__.ParticipantAttributeEventArgs),
/* harmony export */   "ParticipantEventArgs": () => (/* reexport safe */ _Transcription_Exports__WEBPACK_IMPORTED_MODULE_40__.ParticipantEventArgs),
/* harmony export */   "ParticipantsListEventArgs": () => (/* reexport safe */ _Transcription_Exports__WEBPACK_IMPORTED_MODULE_40__.ParticipantsListEventArgs),
/* harmony export */   "RecognitionCompletionStatus": () => (/* reexport safe */ _RecognitionEvents__WEBPACK_IMPORTED_MODULE_7__.RecognitionCompletionStatus),
/* harmony export */   "RecognitionEndedEvent": () => (/* reexport safe */ _RecognitionEvents__WEBPACK_IMPORTED_MODULE_7__.RecognitionEndedEvent),
/* harmony export */   "RecognitionMode": () => (/* reexport safe */ _RecognizerConfig__WEBPACK_IMPORTED_MODULE_10__.RecognitionMode),
/* harmony export */   "RecognitionStartedEvent": () => (/* reexport safe */ _RecognitionEvents__WEBPACK_IMPORTED_MODULE_7__.RecognitionStartedEvent),
/* harmony export */   "RecognitionStatus": () => (/* reexport safe */ _ServiceMessages_Enums__WEBPACK_IMPORTED_MODULE_18__.RecognitionStatus),
/* harmony export */   "RecognitionTriggeredEvent": () => (/* reexport safe */ _RecognitionEvents__WEBPACK_IMPORTED_MODULE_7__.RecognitionTriggeredEvent),
/* harmony export */   "RecognizerConfig": () => (/* reexport safe */ _RecognizerConfig__WEBPACK_IMPORTED_MODULE_10__.RecognizerConfig),
/* harmony export */   "RequestSession": () => (/* reexport safe */ _RequestSession__WEBPACK_IMPORTED_MODULE_34__.RequestSession),
/* harmony export */   "ServicePropertiesPropertyName": () => (/* binding */ ServicePropertiesPropertyName),
/* harmony export */   "ServiceRecognizerBase": () => (/* reexport safe */ _ServiceRecognizerBase__WEBPACK_IMPORTED_MODULE_8__.ServiceRecognizerBase),
/* harmony export */   "SimpleSpeechPhrase": () => (/* reexport safe */ _ServiceMessages_SimpleSpeechPhrase__WEBPACK_IMPORTED_MODULE_29__.SimpleSpeechPhrase),
/* harmony export */   "SpeakerRecognitionConfig": () => (/* reexport safe */ _SpeakerRecognitionConfig__WEBPACK_IMPORTED_MODULE_47__.SpeakerRecognitionConfig),
/* harmony export */   "SpeakerRecognitionConnectionFactory": () => (/* reexport safe */ _SpeakerRecognitionConnectionFactory__WEBPACK_IMPORTED_MODULE_6__.SpeakerRecognitionConnectionFactory),
/* harmony export */   "SpeakerServiceRecognizer": () => (/* reexport safe */ _SpeakerServiceRecognizer__WEBPACK_IMPORTED_MODULE_48__.SpeakerServiceRecognizer),
/* harmony export */   "SpeechConnectionFactory": () => (/* reexport safe */ _SpeechConnectionFactory__WEBPACK_IMPORTED_MODULE_13__.SpeechConnectionFactory),
/* harmony export */   "SpeechContext": () => (/* reexport safe */ _SpeechContext__WEBPACK_IMPORTED_MODULE_35__.SpeechContext),
/* harmony export */   "SpeechDetected": () => (/* reexport safe */ _ServiceMessages_SpeechDetected__WEBPACK_IMPORTED_MODULE_23__.SpeechDetected),
/* harmony export */   "SpeechHypothesis": () => (/* reexport safe */ _ServiceMessages_SpeechHypothesis__WEBPACK_IMPORTED_MODULE_24__.SpeechHypothesis),
/* harmony export */   "SpeechKeyword": () => (/* reexport safe */ _ServiceMessages_SpeechKeyword__WEBPACK_IMPORTED_MODULE_25__.SpeechKeyword),
/* harmony export */   "SpeechRecognitionEvent": () => (/* reexport safe */ _RecognitionEvents__WEBPACK_IMPORTED_MODULE_7__.SpeechRecognitionEvent),
/* harmony export */   "SpeechResultFormat": () => (/* reexport safe */ _RecognizerConfig__WEBPACK_IMPORTED_MODULE_10__.SpeechResultFormat),
/* harmony export */   "SpeechServiceConfig": () => (/* reexport safe */ _RecognizerConfig__WEBPACK_IMPORTED_MODULE_10__.SpeechServiceConfig),
/* harmony export */   "SpeechServiceRecognizer": () => (/* reexport safe */ _SpeechServiceRecognizer__WEBPACK_IMPORTED_MODULE_26__.SpeechServiceRecognizer),
/* harmony export */   "SpeechSynthesisConnectionFactory": () => (/* reexport safe */ _SpeechSynthesisConnectionFactory__WEBPACK_IMPORTED_MODULE_16__.SpeechSynthesisConnectionFactory),
/* harmony export */   "SynthesisAdapterBase": () => (/* reexport safe */ _SynthesisAdapterBase__WEBPACK_IMPORTED_MODULE_43__.SynthesisAdapterBase),
/* harmony export */   "SynthesisAudioMetadata": () => (/* reexport safe */ _ServiceMessages_SynthesisAudioMetadata__WEBPACK_IMPORTED_MODULE_41__.SynthesisAudioMetadata),
/* harmony export */   "SynthesisContext": () => (/* reexport safe */ _SynthesisContext__WEBPACK_IMPORTED_MODULE_46__.SynthesisContext),
/* harmony export */   "SynthesisRestAdapter": () => (/* reexport safe */ _SynthesisRestAdapter__WEBPACK_IMPORTED_MODULE_44__.SynthesisRestAdapter),
/* harmony export */   "SynthesisServiceType": () => (/* reexport safe */ _SynthesizerConfig__WEBPACK_IMPORTED_MODULE_45__.SynthesisServiceType),
/* harmony export */   "SynthesisStatus": () => (/* reexport safe */ _ServiceMessages_Enums__WEBPACK_IMPORTED_MODULE_18__.SynthesisStatus),
/* harmony export */   "SynthesisTurn": () => (/* reexport safe */ _SynthesisTurn__WEBPACK_IMPORTED_MODULE_42__.SynthesisTurn),
/* harmony export */   "SynthesizerConfig": () => (/* reexport safe */ _SynthesizerConfig__WEBPACK_IMPORTED_MODULE_45__.SynthesizerConfig),
/* harmony export */   "System": () => (/* reexport safe */ _RecognizerConfig__WEBPACK_IMPORTED_MODULE_10__.System),
/* harmony export */   "TranscriberConnectionFactory": () => (/* reexport safe */ _TranscriberConnectionFactory__WEBPACK_IMPORTED_MODULE_14__.TranscriberConnectionFactory),
/* harmony export */   "TranscriberRecognizer": () => (/* reexport safe */ _Transcription_Exports__WEBPACK_IMPORTED_MODULE_40__.TranscriberRecognizer),
/* harmony export */   "TranscriptionServiceRecognizer": () => (/* reexport safe */ _TranscriptionServiceRecognizer__WEBPACK_IMPORTED_MODULE_27__.TranscriptionServiceRecognizer),
/* harmony export */   "TranslationConnectionFactory": () => (/* reexport safe */ _TranslationConnectionFactory__WEBPACK_IMPORTED_MODULE_15__.TranslationConnectionFactory),
/* harmony export */   "TranslationHypothesis": () => (/* reexport safe */ _ServiceMessages_TranslationHypothesis__WEBPACK_IMPORTED_MODULE_20__.TranslationHypothesis),
/* harmony export */   "TranslationPhrase": () => (/* reexport safe */ _ServiceMessages_TranslationPhrase__WEBPACK_IMPORTED_MODULE_21__.TranslationPhrase),
/* harmony export */   "TranslationServiceRecognizer": () => (/* reexport safe */ _TranslationServiceRecognizer__WEBPACK_IMPORTED_MODULE_22__.TranslationServiceRecognizer),
/* harmony export */   "TranslationSynthesisEnd": () => (/* reexport safe */ _ServiceMessages_TranslationSynthesisEnd__WEBPACK_IMPORTED_MODULE_19__.TranslationSynthesisEnd),
/* harmony export */   "VoiceProfileConnectionFactory": () => (/* reexport safe */ _SpeakerRecognitionConnectionFactory__WEBPACK_IMPORTED_MODULE_6__.VoiceProfileConnectionFactory),
/* harmony export */   "VoiceServiceRecognizer": () => (/* reexport safe */ _VoiceServiceRecognizer__WEBPACK_IMPORTED_MODULE_49__.VoiceServiceRecognizer),
/* harmony export */   "WebsocketMessageFormatter": () => (/* reexport safe */ _WebsocketMessageFormatter__WEBPACK_IMPORTED_MODULE_12__.WebsocketMessageFormatter),
/* harmony export */   "connectivity": () => (/* reexport safe */ _RecognizerConfig__WEBPACK_IMPORTED_MODULE_10__.connectivity),
/* harmony export */   "type": () => (/* reexport safe */ _RecognizerConfig__WEBPACK_IMPORTED_MODULE_10__.type)
/* harmony export */ });
/* harmony import */ var _CognitiveSubscriptionKeyAuthentication__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CognitiveSubscriptionKeyAuthentication */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/CognitiveSubscriptionKeyAuthentication.js");
/* harmony import */ var _CognitiveTokenAuthentication__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CognitiveTokenAuthentication */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/CognitiveTokenAuthentication.js");
/* harmony import */ var _IAuthentication__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./IAuthentication */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IAuthentication.js");
/* harmony import */ var _IConnectionFactory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./IConnectionFactory */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IConnectionFactory.js");
/* harmony import */ var _IConnectionFactory__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_IConnectionFactory__WEBPACK_IMPORTED_MODULE_3__);
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _IConnectionFactory__WEBPACK_IMPORTED_MODULE_3__) if(["default","OutputFormatPropertyName","CancellationErrorCodePropertyName","ServicePropertiesPropertyName","ForceDictationPropertyName","AutoDetectSourceLanguagesOpenRangeOptionName","CognitiveSubscriptionKeyAuthentication","CognitiveTokenAuthentication","AuthInfo"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _IConnectionFactory__WEBPACK_IMPORTED_MODULE_3__[__WEBPACK_IMPORT_KEY__]
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _ISynthesisConnectionFactory__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ISynthesisConnectionFactory */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ISynthesisConnectionFactory.js");
/* harmony import */ var _ISynthesisConnectionFactory__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_ISynthesisConnectionFactory__WEBPACK_IMPORTED_MODULE_4__);
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _ISynthesisConnectionFactory__WEBPACK_IMPORTED_MODULE_4__) if(["default","OutputFormatPropertyName","CancellationErrorCodePropertyName","ServicePropertiesPropertyName","ForceDictationPropertyName","AutoDetectSourceLanguagesOpenRangeOptionName","CognitiveSubscriptionKeyAuthentication","CognitiveTokenAuthentication","AuthInfo"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _ISynthesisConnectionFactory__WEBPACK_IMPORTED_MODULE_4__[__WEBPACK_IMPORT_KEY__]
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _IntentConnectionFactory__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./IntentConnectionFactory */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IntentConnectionFactory.js");
/* harmony import */ var _SpeakerRecognitionConnectionFactory__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./SpeakerRecognitionConnectionFactory */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeakerRecognitionConnectionFactory.js");
/* harmony import */ var _RecognitionEvents__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./RecognitionEvents */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognitionEvents.js");
/* harmony import */ var _ServiceRecognizerBase__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ServiceRecognizerBase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceRecognizerBase.js");
/* harmony import */ var _ConversationServiceRecognizer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ConversationServiceRecognizer */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ConversationServiceRecognizer.js");
/* harmony import */ var _RecognizerConfig__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./RecognizerConfig */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognizerConfig.js");
/* harmony import */ var _SpeechServiceInterfaces__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./SpeechServiceInterfaces */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechServiceInterfaces.js");
/* harmony import */ var _SpeechServiceInterfaces__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_SpeechServiceInterfaces__WEBPACK_IMPORTED_MODULE_11__);
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _SpeechServiceInterfaces__WEBPACK_IMPORTED_MODULE_11__) if(["default","OutputFormatPropertyName","CancellationErrorCodePropertyName","ServicePropertiesPropertyName","ForceDictationPropertyName","AutoDetectSourceLanguagesOpenRangeOptionName","CognitiveSubscriptionKeyAuthentication","CognitiveTokenAuthentication","AuthInfo","IntentConnectionFactory","SpeakerRecognitionConnectionFactory","VoiceProfileConnectionFactory","ConnectingToServiceEvent","ListeningStartedEvent","RecognitionCompletionStatus","RecognitionEndedEvent","RecognitionStartedEvent","RecognitionTriggeredEvent","SpeechRecognitionEvent","ServiceRecognizerBase","ConversationServiceRecognizer","Context","Device","OS","RecognitionMode","RecognizerConfig","SpeechResultFormat","SpeechServiceConfig","System","connectivity","type"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _SpeechServiceInterfaces__WEBPACK_IMPORTED_MODULE_11__[__WEBPACK_IMPORT_KEY__]
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _WebsocketMessageFormatter__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./WebsocketMessageFormatter */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/WebsocketMessageFormatter.js");
/* harmony import */ var _SpeechConnectionFactory__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./SpeechConnectionFactory */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechConnectionFactory.js");
/* harmony import */ var _TranscriberConnectionFactory__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./TranscriberConnectionFactory */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranscriberConnectionFactory.js");
/* harmony import */ var _TranslationConnectionFactory__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./TranslationConnectionFactory */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranslationConnectionFactory.js");
/* harmony import */ var _SpeechSynthesisConnectionFactory__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./SpeechSynthesisConnectionFactory */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechSynthesisConnectionFactory.js");
/* harmony import */ var _EnumTranslation__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./EnumTranslation */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/EnumTranslation.js");
/* harmony import */ var _ServiceMessages_Enums__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./ServiceMessages/Enums */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/Enums.js");
/* harmony import */ var _ServiceMessages_TranslationSynthesisEnd__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./ServiceMessages/TranslationSynthesisEnd */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/TranslationSynthesisEnd.js");
/* harmony import */ var _ServiceMessages_TranslationHypothesis__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./ServiceMessages/TranslationHypothesis */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/TranslationHypothesis.js");
/* harmony import */ var _ServiceMessages_TranslationPhrase__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./ServiceMessages/TranslationPhrase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/TranslationPhrase.js");
/* harmony import */ var _TranslationServiceRecognizer__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./TranslationServiceRecognizer */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranslationServiceRecognizer.js");
/* harmony import */ var _ServiceMessages_SpeechDetected__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./ServiceMessages/SpeechDetected */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SpeechDetected.js");
/* harmony import */ var _ServiceMessages_SpeechHypothesis__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./ServiceMessages/SpeechHypothesis */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SpeechHypothesis.js");
/* harmony import */ var _ServiceMessages_SpeechKeyword__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./ServiceMessages/SpeechKeyword */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SpeechKeyword.js");
/* harmony import */ var _SpeechServiceRecognizer__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./SpeechServiceRecognizer */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechServiceRecognizer.js");
/* harmony import */ var _TranscriptionServiceRecognizer__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./TranscriptionServiceRecognizer */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranscriptionServiceRecognizer.js");
/* harmony import */ var _ServiceMessages_DetailedSpeechPhrase__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./ServiceMessages/DetailedSpeechPhrase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/DetailedSpeechPhrase.js");
/* harmony import */ var _ServiceMessages_SimpleSpeechPhrase__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./ServiceMessages/SimpleSpeechPhrase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SimpleSpeechPhrase.js");
/* harmony import */ var _AddedLmIntent__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./AddedLmIntent */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/AddedLmIntent.js");
/* harmony import */ var _IntentServiceRecognizer__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./IntentServiceRecognizer */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IntentServiceRecognizer.js");
/* harmony import */ var _ServiceMessages_IntentResponse__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./ServiceMessages/IntentResponse */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/IntentResponse.js");
/* harmony import */ var _ServiceMessages_SpeakerResponse__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./ServiceMessages/SpeakerResponse */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SpeakerResponse.js");
/* harmony import */ var _ServiceMessages_SpeakerResponse__WEBPACK_IMPORTED_MODULE_33___default = /*#__PURE__*/__webpack_require__.n(_ServiceMessages_SpeakerResponse__WEBPACK_IMPORTED_MODULE_33__);
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _ServiceMessages_SpeakerResponse__WEBPACK_IMPORTED_MODULE_33__) if(["default","OutputFormatPropertyName","CancellationErrorCodePropertyName","ServicePropertiesPropertyName","ForceDictationPropertyName","AutoDetectSourceLanguagesOpenRangeOptionName","CognitiveSubscriptionKeyAuthentication","CognitiveTokenAuthentication","AuthInfo","IntentConnectionFactory","SpeakerRecognitionConnectionFactory","VoiceProfileConnectionFactory","ConnectingToServiceEvent","ListeningStartedEvent","RecognitionCompletionStatus","RecognitionEndedEvent","RecognitionStartedEvent","RecognitionTriggeredEvent","SpeechRecognitionEvent","ServiceRecognizerBase","ConversationServiceRecognizer","Context","Device","OS","RecognitionMode","RecognizerConfig","SpeechResultFormat","SpeechServiceConfig","System","connectivity","type","WebsocketMessageFormatter","SpeechConnectionFactory","TranscriberConnectionFactory","TranslationConnectionFactory","SpeechSynthesisConnectionFactory","EnumTranslation","RecognitionStatus","SynthesisStatus","TranslationSynthesisEnd","TranslationHypothesis","TranslationPhrase","TranslationServiceRecognizer","SpeechDetected","SpeechHypothesis","SpeechKeyword","SpeechServiceRecognizer","TranscriptionServiceRecognizer","DetailedSpeechPhrase","SimpleSpeechPhrase","AddedLmIntent","IntentServiceRecognizer","IntentResponse"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _ServiceMessages_SpeakerResponse__WEBPACK_IMPORTED_MODULE_33__[__WEBPACK_IMPORT_KEY__]
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _RequestSession__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./RequestSession */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RequestSession.js");
/* harmony import */ var _SpeechContext__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./SpeechContext */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechContext.js");
/* harmony import */ var _DynamicGrammarBuilder__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./DynamicGrammarBuilder */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DynamicGrammarBuilder.js");
/* harmony import */ var _DynamicGrammarInterfaces__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./DynamicGrammarInterfaces */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DynamicGrammarInterfaces.js");
/* harmony import */ var _DynamicGrammarInterfaces__WEBPACK_IMPORTED_MODULE_37___default = /*#__PURE__*/__webpack_require__.n(_DynamicGrammarInterfaces__WEBPACK_IMPORTED_MODULE_37__);
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _DynamicGrammarInterfaces__WEBPACK_IMPORTED_MODULE_37__) if(["default","OutputFormatPropertyName","CancellationErrorCodePropertyName","ServicePropertiesPropertyName","ForceDictationPropertyName","AutoDetectSourceLanguagesOpenRangeOptionName","CognitiveSubscriptionKeyAuthentication","CognitiveTokenAuthentication","AuthInfo","IntentConnectionFactory","SpeakerRecognitionConnectionFactory","VoiceProfileConnectionFactory","ConnectingToServiceEvent","ListeningStartedEvent","RecognitionCompletionStatus","RecognitionEndedEvent","RecognitionStartedEvent","RecognitionTriggeredEvent","SpeechRecognitionEvent","ServiceRecognizerBase","ConversationServiceRecognizer","Context","Device","OS","RecognitionMode","RecognizerConfig","SpeechResultFormat","SpeechServiceConfig","System","connectivity","type","WebsocketMessageFormatter","SpeechConnectionFactory","TranscriberConnectionFactory","TranslationConnectionFactory","SpeechSynthesisConnectionFactory","EnumTranslation","RecognitionStatus","SynthesisStatus","TranslationSynthesisEnd","TranslationHypothesis","TranslationPhrase","TranslationServiceRecognizer","SpeechDetected","SpeechHypothesis","SpeechKeyword","SpeechServiceRecognizer","TranscriptionServiceRecognizer","DetailedSpeechPhrase","SimpleSpeechPhrase","AddedLmIntent","IntentServiceRecognizer","IntentResponse","RequestSession","SpeechContext","DynamicGrammarBuilder"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _DynamicGrammarInterfaces__WEBPACK_IMPORTED_MODULE_37__[__WEBPACK_IMPORT_KEY__]
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _DialogServiceAdapter__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./DialogServiceAdapter */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DialogServiceAdapter.js");
/* harmony import */ var _AgentConfig__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./AgentConfig */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/AgentConfig.js");
/* harmony import */ var _Transcription_Exports__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./Transcription/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/Exports.js");
/* harmony import */ var _ServiceMessages_SynthesisAudioMetadata__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./ServiceMessages/SynthesisAudioMetadata */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SynthesisAudioMetadata.js");
/* harmony import */ var _SynthesisTurn__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./SynthesisTurn */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisTurn.js");
/* harmony import */ var _SynthesisAdapterBase__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./SynthesisAdapterBase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisAdapterBase.js");
/* harmony import */ var _SynthesisRestAdapter__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./SynthesisRestAdapter */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisRestAdapter.js");
/* harmony import */ var _SynthesizerConfig__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./SynthesizerConfig */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesizerConfig.js");
/* harmony import */ var _SynthesisContext__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./SynthesisContext */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisContext.js");
/* harmony import */ var _SpeakerRecognitionConfig__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./SpeakerRecognitionConfig */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeakerRecognitionConfig.js");
/* harmony import */ var _SpeakerServiceRecognizer__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./SpeakerServiceRecognizer */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeakerServiceRecognizer.js");
/* harmony import */ var _VoiceServiceRecognizer__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./VoiceServiceRecognizer */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/VoiceServiceRecognizer.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
// Make sure not to export internal modules.
//


















































const OutputFormatPropertyName = "OutputFormat";
const CancellationErrorCodePropertyName = "CancellationErrorCode";
const ServicePropertiesPropertyName = "ServiceProperties";
const ForceDictationPropertyName = "ForceDictation";
const AutoDetectSourceLanguagesOpenRangeOptionName = "OpenRange";

//# sourceMappingURL=Exports.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/HeaderNames.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/HeaderNames.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HeaderNames": () => (/* binding */ HeaderNames)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
class HeaderNames {
}
HeaderNames.AuthKey = "Ocp-Apim-Subscription-Key";
HeaderNames.Authorization = "Authorization";
HeaderNames.SpIDAuthKey = "Apim-Subscription-Id";
HeaderNames.ConnectionId = "X-ConnectionId";
HeaderNames.ContentType = "Content-Type";
HeaderNames.CustomCommandsAppId = "X-CommandsAppId";
HeaderNames.Path = "Path";
HeaderNames.RequestId = "X-RequestId";
HeaderNames.RequestStreamId = "X-StreamId";
HeaderNames.RequestTimestamp = "X-Timestamp";

//# sourceMappingURL=HeaderNames.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IAuthentication.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IAuthentication.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AuthInfo": () => (/* binding */ AuthInfo)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
class AuthInfo {
    constructor(headerName, token) {
        this.privHeaderName = headerName;
        this.privToken = token;
    }
    get headerName() {
        return this.privHeaderName;
    }
    get token() {
        return this.privToken;
    }
}

//# sourceMappingURL=IAuthentication.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IConnectionFactory.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IConnectionFactory.js ***!
  \********************************************************************************************************************/
/***/ (() => {

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

//# sourceMappingURL=IConnectionFactory.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ISynthesisConnectionFactory.js":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ISynthesisConnectionFactory.js ***!
  \*****************************************************************************************************************************/
/***/ (() => {

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

//# sourceMappingURL=ISynthesisConnectionFactory.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IntentConnectionFactory.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IntentConnectionFactory.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IntentConnectionFactory": () => (/* binding */ IntentConnectionFactory)
/* harmony export */ });
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/WebsocketConnection.js");
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ProxyInfo.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ConnectionFactoryBase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ConnectionFactoryBase.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/WebsocketMessageFormatter.js");
/* harmony import */ var _HeaderNames__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./HeaderNames */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/HeaderNames.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.





class IntentConnectionFactory extends _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_0__.ConnectionFactoryBase {
    create(config, authInfo, connectionId) {
        let endpoint = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_Endpoint);
        if (!endpoint) {
            const region = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_IntentRegion);
            const hostSuffix = _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_0__.ConnectionFactoryBase.getHostSuffix(region);
            const host = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_Host, "wss://" + region + ".sr.speech" + hostSuffix);
            endpoint = host + "/speech/recognition/interactive/cognitiveservices/v1";
        }
        const queryParams = {
            format: "simple",
            language: config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_RecoLanguage),
        };
        this.setCommonUrlParams(config, queryParams, endpoint);
        const headers = {};
        if (authInfo.token !== undefined && authInfo.token !== "") {
            headers[authInfo.headerName] = authInfo.token;
        }
        headers[_HeaderNames__WEBPACK_IMPORTED_MODULE_2__.HeaderNames.ConnectionId] = connectionId;
        config.parameters.setProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_Url, endpoint);
        const enableCompression = config.parameters.getProperty("SPEECH-EnableWebsocketCompression", "false") === "true";
        return new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_3__.WebsocketConnection(endpoint, queryParams, headers, new _Exports__WEBPACK_IMPORTED_MODULE_4__.WebsocketMessageFormatter(), _common_browser_Exports__WEBPACK_IMPORTED_MODULE_5__.ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);
    }
    getSpeechRegionFromIntentRegion(intentRegion) {
        switch (intentRegion) {
            case "West US":
            case "US West":
            case "westus":
                return "uswest";
            case "West US 2":
            case "US West 2":
            case "westus2":
                return "uswest2";
            case "South Central US":
            case "US South Central":
            case "southcentralus":
                return "ussouthcentral";
            case "West Central US":
            case "US West Central":
            case "westcentralus":
                return "uswestcentral";
            case "East US":
            case "US East":
            case "eastus":
                return "useast";
            case "East US 2":
            case "US East 2":
            case "eastus2":
                return "useast2";
            case "West Europe":
            case "Europe West":
            case "westeurope":
                return "europewest";
            case "North Europe":
            case "Europe North":
            case "northeurope":
                return "europenorth";
            case "Brazil South":
            case "South Brazil":
            case "southbrazil":
                return "brazilsouth";
            case "Australia East":
            case "East Australia":
            case "eastaustralia":
                return "australiaeast";
            case "Southeast Asia":
            case "Asia Southeast":
            case "southeastasia":
                return "asiasoutheast";
            case "East Asia":
            case "Asia East":
            case "eastasia":
                return "asiaeast";
            default:
                return intentRegion;
        }
    }
}

//# sourceMappingURL=IntentConnectionFactory.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IntentServiceRecognizer.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IntentServiceRecognizer.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IntentServiceRecognizer": () => (/* binding */ IntentServiceRecognizer)
/* harmony export */ });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/IntentRecognitionResult.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ResultReason.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/IntentRecognitionEventArgs.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationErrorCodes.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/IntentRecognitionCanceledEventArgs.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceRecognizerBase.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SpeechHypothesis.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SimpleSpeechPhrase.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/EnumTranslation.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/IntentResponse.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.



// eslint-disable-next-line max-classes-per-file
class IntentServiceRecognizer extends _Exports__WEBPACK_IMPORTED_MODULE_0__.ServiceRecognizerBase {
    constructor(authentication, connectionFactory, audioSource, recognizerConfig, recognizer) {
        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);
        this.privIntentRecognizer = recognizer;
        this.privIntentDataSent = false;
    }
    setIntents(addedIntents, umbrellaIntent) {
        this.privAddedLmIntents = addedIntents;
        this.privUmbrellaIntent = umbrellaIntent;
        this.privIntentDataSent = true;
    }
    processTypeSpecificMessages(connectionMessage) {
        let result;
        let ev;
        let processed = false;
        const resultProps = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyCollection();
        if (connectionMessage.messageType === _common_Exports__WEBPACK_IMPORTED_MODULE_2__.MessageType.Text) {
            resultProps.setProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);
        }
        switch (connectionMessage.path.toLowerCase()) {
            case "speech.hypothesis":
                const speechHypothesis = _Exports__WEBPACK_IMPORTED_MODULE_4__.SpeechHypothesis.fromJSON(connectionMessage.textBody);
                result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.IntentRecognitionResult(undefined, this.privRequestSession.requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__.ResultReason.RecognizingIntent, speechHypothesis.Text, speechHypothesis.Duration, speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset, speechHypothesis.Language, speechHypothesis.LanguageDetectionConfidence, undefined, connectionMessage.textBody, resultProps);
                this.privRequestSession.onHypothesis(result.offset);
                ev = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_7__.IntentRecognitionEventArgs(result, speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);
                if (!!this.privIntentRecognizer.recognizing) {
                    try {
                        this.privIntentRecognizer.recognizing(this.privIntentRecognizer, ev);
                        /* eslint-disable no-empty */
                    }
                    catch (error) {
                        // Not going to let errors in the event handler
                        // trip things up.
                    }
                }
                processed = true;
                break;
            case "speech.phrase":
                const simple = _Exports__WEBPACK_IMPORTED_MODULE_8__.SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);
                result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.IntentRecognitionResult(undefined, this.privRequestSession.requestId, _Exports__WEBPACK_IMPORTED_MODULE_9__.EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus), simple.DisplayText, simple.Duration, simple.Offset + this.privRequestSession.currentTurnAudioOffset, simple.Language, simple.LanguageDetectionConfidence, undefined, connectionMessage.textBody, resultProps);
                ev = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_7__.IntentRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);
                const sendEvent = () => {
                    if (!!this.privIntentRecognizer.recognized) {
                        try {
                            this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);
                            /* eslint-disable no-empty */
                        }
                        catch (error) {
                            // Not going to let errors in the event handler
                            // trip things up.
                        }
                    }
                    // report result to promise.
                    if (!!this.privSuccessCallback) {
                        try {
                            this.privSuccessCallback(result);
                        }
                        catch (e) {
                            if (!!this.privErrorCallback) {
                                this.privErrorCallback(e);
                            }
                        }
                        // Only invoke the call back once.
                        // and if it's successful don't invoke the
                        // error after that.
                        this.privSuccessCallback = undefined;
                        this.privErrorCallback = undefined;
                    }
                };
                // If intent data was sent, the terminal result for this recognizer is an intent being found.
                // If no intent data was sent, the terminal event is speech recognition being successful.
                if (false === this.privIntentDataSent || _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__.ResultReason.NoMatch === ev.result.reason) {
                    // Advance the buffers.
                    this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);
                    sendEvent();
                }
                else {
                    // Squirrel away the args, when the response event arrives it will build upon them
                    // and then return
                    this.privPendingIntentArgs = ev;
                }
                processed = true;
                break;
            case "response":
                // Response from LUIS
                ev = this.privPendingIntentArgs;
                this.privPendingIntentArgs = undefined;
                if (undefined === ev) {
                    if ("" === connectionMessage.textBody) {
                        // This condition happens if there is nothing but silence in the
                        // audio sent to the service.
                        return;
                    }
                    // Odd... Not sure this can happen
                    ev = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_7__.IntentRecognitionEventArgs(new _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.IntentRecognitionResult(), 0, this.privRequestSession.sessionId);
                }
                const intentResponse = _Exports__WEBPACK_IMPORTED_MODULE_10__.IntentResponse.fromJSON(connectionMessage.textBody);
                // If LUIS didn't return anything, send the existing event, else
                // modify it to show the match.
                // See if the intent found is in the list of intents asked for.
                if (null !== intentResponse && !!intentResponse.topScoringIntent && !!intentResponse.topScoringIntent.intent) {
                    let addedIntent = this.privAddedLmIntents[intentResponse.topScoringIntent.intent];
                    if (this.privUmbrellaIntent !== undefined) {
                        addedIntent = this.privUmbrellaIntent;
                    }
                    if (!!addedIntent) {
                        const intentId = addedIntent === undefined || addedIntent.intentName === undefined ? intentResponse.topScoringIntent.intent : addedIntent.intentName;
                        let reason = ev.result.reason;
                        if (undefined !== intentId) {
                            reason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__.ResultReason.RecognizedIntent;
                        }
                        // make sure, properties is set.
                        const properties = (undefined !== ev.result.properties) ?
                            ev.result.properties : new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyCollection();
                        properties.setProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.LanguageUnderstandingServiceResponse_JsonResult, connectionMessage.textBody);
                        ev = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_7__.IntentRecognitionEventArgs(new _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.IntentRecognitionResult(intentId, ev.result.resultId, reason, ev.result.text, ev.result.duration, ev.result.offset, undefined, undefined, ev.result.errorDetails, ev.result.json, properties), ev.offset, ev.sessionId);
                    }
                }
                this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);
                if (!!this.privIntentRecognizer.recognized) {
                    try {
                        this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);
                        /* eslint-disable no-empty */
                    }
                    catch (error) {
                        // Not going to let errors in the event handler
                        // trip things up.
                    }
                }
                // report result to promise.
                if (!!this.privSuccessCallback) {
                    try {
                        this.privSuccessCallback(ev.result);
                    }
                    catch (e) {
                        if (!!this.privErrorCallback) {
                            this.privErrorCallback(e);
                        }
                    }
                    // Only invoke the call back once.
                    // and if it's successful don't invoke the
                    // error after that.
                    this.privSuccessCallback = undefined;
                    this.privErrorCallback = undefined;
                }
                processed = true;
                break;
            default:
                break;
        }
        const defferal = new _common_Exports__WEBPACK_IMPORTED_MODULE_11__.Deferred();
        defferal.resolve(processed);
        return defferal.promise;
    }
    // Cancels recognition.
    cancelRecognition(sessionId, requestId, cancellationReason, errorCode, error) {
        const properties = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyCollection();
        properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_12__.CancellationErrorCodePropertyName, _sdk_Exports__WEBPACK_IMPORTED_MODULE_13__.CancellationErrorCode[errorCode]);
        if (!!this.privIntentRecognizer.canceled) {
            const cancelEvent = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_14__.IntentRecognitionCanceledEventArgs(cancellationReason, error, errorCode, undefined, undefined, sessionId);
            try {
                this.privIntentRecognizer.canceled(this.privIntentRecognizer, cancelEvent);
                /* eslint-disable no-empty */
            }
            catch (_a) { }
        }
        if (!!this.privSuccessCallback) {
            const result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.IntentRecognitionResult(undefined, // Intent Id
            requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__.ResultReason.Canceled, undefined, // Text
            undefined, // Duration
            undefined, // Offset
            undefined, // Language
            undefined, // LanguageDetectionConfidence
            error, undefined, // Json
            properties);
            try {
                this.privSuccessCallback(result);
                this.privSuccessCallback = undefined;
                /* eslint-disable no-empty */
            }
            catch (_b) { }
        }
    }
}

//# sourceMappingURL=IntentServiceRecognizer.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/QueryParameterNames.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/QueryParameterNames.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "QueryParameterNames": () => (/* binding */ QueryParameterNames)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
class QueryParameterNames {
}
QueryParameterNames.BotId = "botid";
QueryParameterNames.CustomSpeechDeploymentId = "cid";
QueryParameterNames.CustomVoiceDeploymentId = "deploymentId";
QueryParameterNames.EnableAudioLogging = "storeAudio";
QueryParameterNames.EnableLanguageId = "lidEnabled";
QueryParameterNames.EnableWordLevelTimestamps = "wordLevelTimestamps";
QueryParameterNames.EndSilenceTimeoutMs = "endSilenceTimeoutMs";
QueryParameterNames.SegmentationSilenceTimeoutMs = "segmentationSilenceTimeoutMs";
QueryParameterNames.Format = "format";
QueryParameterNames.InitialSilenceTimeoutMs = "initialSilenceTimeoutMs";
QueryParameterNames.Language = "language";
QueryParameterNames.Profanity = "profanity";
QueryParameterNames.RequestBotStatusMessages = "enableBotMessageStatus";
QueryParameterNames.StableIntermediateThreshold = "stableIntermediateThreshold";
QueryParameterNames.StableTranslation = "stableTranslation";
QueryParameterNames.TestHooks = "testhooks";
QueryParameterNames.Postprocessing = "postprocessing";
QueryParameterNames.CtsMeetingId = "meetingId";
QueryParameterNames.CtsDeviceId = "deviceId";
QueryParameterNames.CtsIsParticipant = "isParticipant";

//# sourceMappingURL=QueryParameterNames.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognitionEvents.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognitionEvents.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConnectingToServiceEvent": () => (/* binding */ ConnectingToServiceEvent),
/* harmony export */   "ListeningStartedEvent": () => (/* binding */ ListeningStartedEvent),
/* harmony export */   "RecognitionCompletionStatus": () => (/* binding */ RecognitionCompletionStatus),
/* harmony export */   "RecognitionEndedEvent": () => (/* binding */ RecognitionEndedEvent),
/* harmony export */   "RecognitionStartedEvent": () => (/* binding */ RecognitionStartedEvent),
/* harmony export */   "RecognitionTriggeredEvent": () => (/* binding */ RecognitionTriggeredEvent),
/* harmony export */   "SpeechRecognitionEvent": () => (/* binding */ SpeechRecognitionEvent)
/* harmony export */ });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/PlatformEvent.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/* eslint-disable max-classes-per-file */

class SpeechRecognitionEvent extends _common_Exports__WEBPACK_IMPORTED_MODULE_0__.PlatformEvent {
    constructor(eventName, requestId, sessionId, eventType = _common_Exports__WEBPACK_IMPORTED_MODULE_0__.EventType.Info) {
        super(eventName, eventType);
        this.privRequestId = requestId;
        this.privSessionId = sessionId;
    }
    get requestId() {
        return this.privRequestId;
    }
    get sessionId() {
        return this.privSessionId;
    }
}
class RecognitionTriggeredEvent extends SpeechRecognitionEvent {
    constructor(requestId, sessionId, audioSourceId, audioNodeId) {
        super("RecognitionTriggeredEvent", requestId, sessionId);
        this.privAudioSourceId = audioSourceId;
        this.privAudioNodeId = audioNodeId;
    }
    get audioSourceId() {
        return this.privAudioSourceId;
    }
    get audioNodeId() {
        return this.privAudioNodeId;
    }
}
class ListeningStartedEvent extends SpeechRecognitionEvent {
    constructor(requestId, sessionId, audioSourceId, audioNodeId) {
        super("ListeningStartedEvent", requestId, sessionId);
        this.privAudioSourceId = audioSourceId;
        this.privAudioNodeId = audioNodeId;
    }
    get audioSourceId() {
        return this.privAudioSourceId;
    }
    get audioNodeId() {
        return this.privAudioNodeId;
    }
}
class ConnectingToServiceEvent extends SpeechRecognitionEvent {
    constructor(requestId, authFetchEventid, sessionId) {
        super("ConnectingToServiceEvent", requestId, sessionId);
        this.privAuthFetchEventid = authFetchEventid;
    }
    get authFetchEventid() {
        return this.privAuthFetchEventid;
    }
}
class RecognitionStartedEvent extends SpeechRecognitionEvent {
    constructor(requestId, audioSourceId, audioNodeId, authFetchEventId, sessionId) {
        super("RecognitionStartedEvent", requestId, sessionId);
        this.privAudioSourceId = audioSourceId;
        this.privAudioNodeId = audioNodeId;
        this.privAuthFetchEventId = authFetchEventId;
    }
    get audioSourceId() {
        return this.privAudioSourceId;
    }
    get audioNodeId() {
        return this.privAudioNodeId;
    }
    get authFetchEventId() {
        return this.privAuthFetchEventId;
    }
}
var RecognitionCompletionStatus;
(function (RecognitionCompletionStatus) {
    RecognitionCompletionStatus[RecognitionCompletionStatus["Success"] = 0] = "Success";
    RecognitionCompletionStatus[RecognitionCompletionStatus["AudioSourceError"] = 1] = "AudioSourceError";
    RecognitionCompletionStatus[RecognitionCompletionStatus["AudioSourceTimeout"] = 2] = "AudioSourceTimeout";
    RecognitionCompletionStatus[RecognitionCompletionStatus["AuthTokenFetchError"] = 3] = "AuthTokenFetchError";
    RecognitionCompletionStatus[RecognitionCompletionStatus["AuthTokenFetchTimeout"] = 4] = "AuthTokenFetchTimeout";
    RecognitionCompletionStatus[RecognitionCompletionStatus["UnAuthorized"] = 5] = "UnAuthorized";
    RecognitionCompletionStatus[RecognitionCompletionStatus["ConnectTimeout"] = 6] = "ConnectTimeout";
    RecognitionCompletionStatus[RecognitionCompletionStatus["ConnectError"] = 7] = "ConnectError";
    RecognitionCompletionStatus[RecognitionCompletionStatus["ClientRecognitionActivityTimeout"] = 8] = "ClientRecognitionActivityTimeout";
    RecognitionCompletionStatus[RecognitionCompletionStatus["UnknownError"] = 9] = "UnknownError";
})(RecognitionCompletionStatus || (RecognitionCompletionStatus = {}));
class RecognitionEndedEvent extends SpeechRecognitionEvent {
    constructor(requestId, audioSourceId, audioNodeId, authFetchEventId, sessionId, serviceTag, status, error) {
        super("RecognitionEndedEvent", requestId, sessionId, status === RecognitionCompletionStatus.Success ? _common_Exports__WEBPACK_IMPORTED_MODULE_0__.EventType.Info : _common_Exports__WEBPACK_IMPORTED_MODULE_0__.EventType.Error);
        this.privAudioSourceId = audioSourceId;
        this.privAudioNodeId = audioNodeId;
        this.privAuthFetchEventId = authFetchEventId;
        this.privStatus = status;
        this.privError = error;
        this.privServiceTag = serviceTag;
    }
    get audioSourceId() {
        return this.privAudioSourceId;
    }
    get audioNodeId() {
        return this.privAudioNodeId;
    }
    get authFetchEventId() {
        return this.privAuthFetchEventId;
    }
    get serviceTag() {
        return this.privServiceTag;
    }
    get status() {
        return this.privStatus;
    }
    get error() {
        return this.privError;
    }
}

//# sourceMappingURL=RecognitionEvents.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognizerConfig.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognizerConfig.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Context": () => (/* binding */ Context),
/* harmony export */   "Device": () => (/* binding */ Device),
/* harmony export */   "OS": () => (/* binding */ OS),
/* harmony export */   "RecognitionMode": () => (/* binding */ RecognitionMode),
/* harmony export */   "RecognizerConfig": () => (/* binding */ RecognizerConfig),
/* harmony export */   "SpeechResultFormat": () => (/* binding */ SpeechResultFormat),
/* harmony export */   "SpeechServiceConfig": () => (/* binding */ SpeechServiceConfig),
/* harmony export */   "System": () => (/* binding */ System),
/* harmony export */   "connectivity": () => (/* binding */ connectivity),
/* harmony export */   "type": () => (/* binding */ type)
/* harmony export */ });
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/* eslint-disable max-classes-per-file */

var RecognitionMode;
(function (RecognitionMode) {
    RecognitionMode[RecognitionMode["Interactive"] = 0] = "Interactive";
    RecognitionMode[RecognitionMode["Conversation"] = 1] = "Conversation";
    RecognitionMode[RecognitionMode["Dictation"] = 2] = "Dictation";
})(RecognitionMode || (RecognitionMode = {}));
var SpeechResultFormat;
(function (SpeechResultFormat) {
    SpeechResultFormat[SpeechResultFormat["Simple"] = 0] = "Simple";
    SpeechResultFormat[SpeechResultFormat["Detailed"] = 1] = "Detailed";
})(SpeechResultFormat || (SpeechResultFormat = {}));
class RecognizerConfig {
    constructor(speechServiceConfig, parameters) {
        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));
        this.privParameters = parameters;
        this.privMaxRetryCount = parseInt(parameters.getProperty("SPEECH-Error-MaxRetryCount", "4"), 10);
        this.privLanguageIdMode = parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyId.SpeechServiceConnection_LanguageIdMode, undefined);
    }
    get parameters() {
        return this.privParameters;
    }
    get recognitionMode() {
        return this.privRecognitionMode;
    }
    set recognitionMode(value) {
        this.privRecognitionMode = value;
        this.privRecognitionActivityTimeout = value === RecognitionMode.Interactive ? 8000 : 25000;
        this.privSpeechServiceConfig.Recognition = RecognitionMode[value];
    }
    get SpeechServiceConfig() {
        return this.privSpeechServiceConfig;
    }
    get recognitionActivityTimeout() {
        return this.privRecognitionActivityTimeout;
    }
    get isContinuousRecognition() {
        return this.privRecognitionMode !== RecognitionMode.Interactive;
    }
    get languageIdMode() {
        return this.privLanguageIdMode;
    }
    get autoDetectSourceLanguages() {
        return this.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, undefined);
    }
    get recognitionEndpointVersion() {
        return this.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, undefined);
    }
    get sourceLanguageModels() {
        const models = [];
        let modelsExist = false;
        if (this.autoDetectSourceLanguages !== undefined) {
            for (const language of this.autoDetectSourceLanguages.split(",")) {
                const customProperty = language + _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyId.SpeechServiceConnection_EndpointId.toString();
                const modelId = this.parameters.getProperty(customProperty, undefined);
                if (modelId !== undefined) {
                    models.push({ language, endpoint: modelId });
                    modelsExist = true;
                }
                else {
                    models.push({ language, endpoint: "" });
                }
            }
        }
        return modelsExist ? models : undefined;
    }
    get maxRetryCount() {
        return this.privMaxRetryCount;
    }
}
// The config is serialized and sent as the Speech.Config
class SpeechServiceConfig {
    constructor(context) {
        this.context = context;
    }
    serialize() {
        return JSON.stringify(this, (key, value) => {
            if (value && typeof value === "object") {
                const replacement = {};
                for (const k in value) {
                    if (Object.hasOwnProperty.call(value, k)) {
                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                        replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];
                    }
                }
                return replacement;
            }
            return value;
        });
    }
    get Context() {
        return this.context;
    }
    get Recognition() {
        return this.recognition;
    }
    set Recognition(value) {
        this.recognition = value.toLowerCase();
    }
}
class Context {
    constructor(os) {
        this.system = new System();
        this.os = os;
    }
}
class System {
    constructor() {
        // Note: below will be patched for official builds.
        const SPEECHSDK_CLIENTSDK_VERSION = "1.30.1";
        this.name = "SpeechSDK";
        this.version = SPEECHSDK_CLIENTSDK_VERSION;
        this.build = "JavaScript";
        this.lang = "JavaScript";
    }
}
class OS {
    constructor(platform, name, version) {
        this.platform = platform;
        this.name = name;
        this.version = version;
    }
}
class Device {
    constructor(manufacturer, model, version) {
        this.manufacturer = manufacturer;
        this.model = model;
        this.version = version;
    }
}
var connectivity;
(function (connectivity) {
    connectivity["Bluetooth"] = "Bluetooth";
    connectivity["Wired"] = "Wired";
    connectivity["WiFi"] = "WiFi";
    connectivity["Cellular"] = "Cellular";
    connectivity["InBuilt"] = "InBuilt";
    connectivity["Unknown"] = "Unknown";
})(connectivity || (connectivity = {}));
var type;
(function (type) {
    type["Phone"] = "Phone";
    type["Speaker"] = "Speaker";
    type["Car"] = "Car";
    type["Headset"] = "Headset";
    type["Thermostat"] = "Thermostat";
    type["Microphones"] = "Microphones";
    type["Deskphone"] = "Deskphone";
    type["RemoteControl"] = "RemoteControl";
    type["Unknown"] = "Unknown";
    type["File"] = "File";
    type["Stream"] = "Stream";
})(type || (type = {}));

//# sourceMappingURL=RecognizerConfig.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RequestSession.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RequestSession.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RequestSession": () => (/* binding */ RequestSession)
/* harmony export */ });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Events.js");
/* harmony import */ var _RecognitionEvents__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RecognitionEvents */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognitionEvents.js");
/* harmony import */ var _ServiceTelemetryListener_Internal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ServiceTelemetryListener.Internal */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceTelemetryListener.Internal.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class RequestSession {
    constructor(audioSourceId) {
        this.privIsDisposed = false;
        this.privDetachables = new Array();
        this.privIsAudioNodeDetached = false;
        this.privIsRecognizing = false;
        this.privIsSpeechEnded = false;
        this.privTurnStartAudioOffset = 0;
        this.privLastRecoOffset = 0;
        this.privHypothesisReceived = false;
        this.privBytesSent = 0;
        this.privRecogNumber = 0;
        this.privInTurn = false;
        this.privConnectionAttempts = 0;
        this.privAudioSourceId = audioSourceId;
        this.privRequestId = (0,_common_Exports__WEBPACK_IMPORTED_MODULE_0__.createNoDashGuid)();
        this.privAudioNodeId = (0,_common_Exports__WEBPACK_IMPORTED_MODULE_0__.createNoDashGuid)();
        this.privTurnDeferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_1__.Deferred();
        // We're not in a turn, so resolve.
        this.privTurnDeferral.resolve();
    }
    get sessionId() {
        return this.privSessionId;
    }
    get requestId() {
        return this.privRequestId;
    }
    get audioNodeId() {
        return this.privAudioNodeId;
    }
    get turnCompletionPromise() {
        return this.privTurnDeferral.promise;
    }
    get isSpeechEnded() {
        return this.privIsSpeechEnded;
    }
    get isRecognizing() {
        return this.privIsRecognizing;
    }
    get currentTurnAudioOffset() {
        return this.privTurnStartAudioOffset;
    }
    get recogNumber() {
        return this.privRecogNumber;
    }
    get numConnectionAttempts() {
        return this.privConnectionAttempts;
    }
    // The number of bytes sent for the current connection.
    // Counter is reset to 0 each time a connection is established.
    get bytesSent() {
        return this.privBytesSent;
    }
    listenForServiceTelemetry(eventSource) {
        if (!!this.privServiceTelemetryListener) {
            this.privDetachables.push(eventSource.attachListener(this.privServiceTelemetryListener));
        }
    }
    startNewRecognition() {
        this.privIsSpeechEnded = false;
        this.privIsRecognizing = true;
        this.privTurnStartAudioOffset = 0;
        this.privLastRecoOffset = 0;
        this.privRecogNumber++;
        this.privServiceTelemetryListener = new _ServiceTelemetryListener_Internal__WEBPACK_IMPORTED_MODULE_2__.ServiceTelemetryListener(this.privRequestId, this.privAudioSourceId, this.privAudioNodeId);
        this.onEvent(new _RecognitionEvents__WEBPACK_IMPORTED_MODULE_3__.RecognitionTriggeredEvent(this.requestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));
    }
    onAudioSourceAttachCompleted(audioNode, isError) {
        return __awaiter(this, void 0, void 0, function* () {
            this.privAudioNode = audioNode;
            this.privIsAudioNodeDetached = false;
            if (isError) {
                yield this.onComplete();
            }
            else {
                this.onEvent(new _RecognitionEvents__WEBPACK_IMPORTED_MODULE_3__.ListeningStartedEvent(this.privRequestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));
            }
        });
    }
    onPreConnectionStart(authFetchEventId, connectionId) {
        this.privAuthFetchEventId = authFetchEventId;
        this.privSessionId = connectionId;
        this.onEvent(new _RecognitionEvents__WEBPACK_IMPORTED_MODULE_3__.ConnectingToServiceEvent(this.privRequestId, this.privAuthFetchEventId, this.privSessionId));
    }
    onAuthCompleted(isError) {
        return __awaiter(this, void 0, void 0, function* () {
            if (isError) {
                yield this.onComplete();
            }
        });
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onConnectionEstablishCompleted(statusCode, reason) {
        return __awaiter(this, void 0, void 0, function* () {
            if (statusCode === 200) {
                this.onEvent(new _RecognitionEvents__WEBPACK_IMPORTED_MODULE_3__.RecognitionStartedEvent(this.requestId, this.privAudioSourceId, this.privAudioNodeId, this.privAuthFetchEventId, this.privSessionId));
                if (!!this.privAudioNode) {
                    this.privAudioNode.replay();
                }
                this.privTurnStartAudioOffset = this.privLastRecoOffset;
                this.privBytesSent = 0;
                return;
            }
            else if (statusCode === 403) {
                yield this.onComplete();
            }
        });
    }
    onServiceTurnEndResponse(continuousRecognition) {
        return __awaiter(this, void 0, void 0, function* () {
            this.privTurnDeferral.resolve();
            if (!continuousRecognition || this.isSpeechEnded) {
                yield this.onComplete();
                this.privInTurn = false;
            }
            else {
                // Start a new request set.
                this.privTurnStartAudioOffset = this.privLastRecoOffset;
                this.privAudioNode.replay();
            }
        });
    }
    onSpeechContext() {
        this.privRequestId = (0,_common_Exports__WEBPACK_IMPORTED_MODULE_0__.createNoDashGuid)();
    }
    onServiceTurnStartResponse() {
        if (!!this.privTurnDeferral && !!this.privInTurn) {
            // What? How are we starting a turn with another not done?
            this.privTurnDeferral.reject("Another turn started before current completed.");
            // Avoid UnhandledPromiseRejection if privTurnDeferral is not being awaited
            // eslint-disable-next-line @typescript-eslint/no-empty-function
            this.privTurnDeferral.promise.then().catch(() => { });
        }
        this.privInTurn = true;
        this.privTurnDeferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_1__.Deferred();
    }
    onHypothesis(offset) {
        if (!this.privHypothesisReceived) {
            this.privHypothesisReceived = true;
            this.privServiceTelemetryListener.hypothesisReceived(this.privAudioNode.findTimeAtOffset(offset));
        }
    }
    onPhraseRecognized(offset) {
        this.privServiceTelemetryListener.phraseReceived(this.privAudioNode.findTimeAtOffset(offset));
        this.onServiceRecognized(offset);
    }
    onServiceRecognized(offset) {
        this.privLastRecoOffset = offset;
        this.privHypothesisReceived = false;
        this.privAudioNode.shrinkBuffers(offset);
        this.privConnectionAttempts = 0;
    }
    onAudioSent(bytesSent) {
        this.privBytesSent += bytesSent;
    }
    onRetryConnection() {
        this.privConnectionAttempts++;
    }
    dispose() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.privIsDisposed) {
                // we should have completed by now. If we did not its an unknown error.
                this.privIsDisposed = true;
                for (const detachable of this.privDetachables) {
                    yield detachable.detach();
                }
                if (!!this.privServiceTelemetryListener) {
                    this.privServiceTelemetryListener.dispose();
                }
                this.privIsRecognizing = false;
            }
        });
    }
    getTelemetry() {
        if (this.privServiceTelemetryListener.hasTelemetry) {
            return this.privServiceTelemetryListener.getTelemetry();
        }
        else {
            return null;
        }
    }
    onStopRecognizing() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.onComplete();
        });
    }
    // Should be called with the audioNode for this session has indicated that it is out of speech.
    onSpeechEnded() {
        this.privIsSpeechEnded = true;
    }
    onEvent(event) {
        if (!!this.privServiceTelemetryListener) {
            this.privServiceTelemetryListener.onEvent(event);
        }
        _common_Exports__WEBPACK_IMPORTED_MODULE_4__.Events.instance.onEvent(event);
    }
    onComplete() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!!this.privIsRecognizing) {
                this.privIsRecognizing = false;
                yield this.detachAudioNode();
            }
        });
    }
    detachAudioNode() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.privIsAudioNodeDetached) {
                this.privIsAudioNodeDetached = true;
                if (this.privAudioNode) {
                    yield this.privAudioNode.detach();
                }
            }
        });
    }
}

//# sourceMappingURL=RequestSession.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/ActivityResponsePayload.js":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/ActivityResponsePayload.js ***!
  \*****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ActivityPayloadResponse": () => (/* binding */ ActivityPayloadResponse),
/* harmony export */   "MessageDataStreamType": () => (/* binding */ MessageDataStreamType)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
// response
class ActivityPayloadResponse {
    constructor(json) {
        this.privActivityResponse = JSON.parse(json);
    }
    static fromJSON(json) {
        return new ActivityPayloadResponse(json);
    }
    get conversationId() {
        return this.privActivityResponse.conversationId;
    }
    get messageDataStreamType() {
        return this.privActivityResponse.messageDataStreamType;
    }
    get messagePayload() {
        return this.privActivityResponse.messagePayload;
    }
    get version() {
        return this.privActivityResponse.version;
    }
}
var MessageDataStreamType;
(function (MessageDataStreamType) {
    MessageDataStreamType[MessageDataStreamType["None"] = 0] = "None";
    MessageDataStreamType[MessageDataStreamType["TextToSpeechAudio"] = 1] = "TextToSpeechAudio";
})(MessageDataStreamType || (MessageDataStreamType = {}));

//# sourceMappingURL=ActivityResponsePayload.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/DetailedSpeechPhrase.js":
/*!**************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/DetailedSpeechPhrase.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DetailedSpeechPhrase": () => (/* binding */ DetailedSpeechPhrase)
/* harmony export */ });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/Enums.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

class DetailedSpeechPhrase {
    constructor(json) {
        this.privDetailedSpeechPhrase = JSON.parse(json);
        this.privDetailedSpeechPhrase.RecognitionStatus = _Exports__WEBPACK_IMPORTED_MODULE_0__.RecognitionStatus[this.privDetailedSpeechPhrase.RecognitionStatus];
    }
    static fromJSON(json) {
        return new DetailedSpeechPhrase(json);
    }
    getJsonWithCorrectedOffsets(baseOffset) {
        if (!!this.privDetailedSpeechPhrase.NBest) {
            let firstWordOffset;
            for (const phrase of this.privDetailedSpeechPhrase.NBest) {
                if (!!phrase.Words && !!phrase.Words[0]) {
                    firstWordOffset = phrase.Words[0].Offset;
                    break;
                }
            }
            if (!!firstWordOffset && firstWordOffset < baseOffset) {
                const offset = baseOffset - firstWordOffset;
                for (const details of this.privDetailedSpeechPhrase.NBest) {
                    if (!!details.Words) {
                        for (const word of details.Words) {
                            word.Offset += offset;
                        }
                    }
                    if (!!details.DisplayWords) {
                        for (const word of details.DisplayWords) {
                            word.Offset += offset;
                        }
                    }
                }
            }
        }
        return JSON.stringify(this.privDetailedSpeechPhrase);
    }
    get RecognitionStatus() {
        return this.privDetailedSpeechPhrase.RecognitionStatus;
    }
    get NBest() {
        return this.privDetailedSpeechPhrase.NBest;
    }
    get Duration() {
        return this.privDetailedSpeechPhrase.Duration;
    }
    get Offset() {
        return this.privDetailedSpeechPhrase.Offset;
    }
    get Language() {
        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Language;
    }
    get LanguageDetectionConfidence() {
        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Confidence;
    }
    get Text() {
        if (!!this.privDetailedSpeechPhrase.NBest && this.privDetailedSpeechPhrase.NBest[0]) {
            return this.privDetailedSpeechPhrase.NBest[0].Display || this.privDetailedSpeechPhrase.NBest[0].DisplayText;
        }
        return this.privDetailedSpeechPhrase.DisplayText;
    }
    get SpeakerId() {
        return this.privDetailedSpeechPhrase.SpeakerId;
    }
}

//# sourceMappingURL=DetailedSpeechPhrase.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/Enums.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/Enums.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RecognitionStatus": () => (/* binding */ RecognitionStatus),
/* harmony export */   "SynthesisStatus": () => (/* binding */ SynthesisStatus)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * @class SynthesisStatus
 * @private
 */
var SynthesisStatus;
(function (SynthesisStatus) {
    /**
     * The response contains valid audio data.
     * @member SynthesisStatus.Success
     */
    SynthesisStatus[SynthesisStatus["Success"] = 0] = "Success";
    /**
     * Indicates the end of audio data. No valid audio data is included in the message.
     * @member SynthesisStatus.SynthesisEnd
     */
    SynthesisStatus[SynthesisStatus["SynthesisEnd"] = 1] = "SynthesisEnd";
    /**
     * Indicates an error occurred during synthesis data processing.
     * @member SynthesisStatus.Error
     */
    SynthesisStatus[SynthesisStatus["Error"] = 2] = "Error";
})(SynthesisStatus || (SynthesisStatus = {}));
var RecognitionStatus;
(function (RecognitionStatus) {
    RecognitionStatus[RecognitionStatus["Success"] = 0] = "Success";
    RecognitionStatus[RecognitionStatus["NoMatch"] = 1] = "NoMatch";
    RecognitionStatus[RecognitionStatus["InitialSilenceTimeout"] = 2] = "InitialSilenceTimeout";
    RecognitionStatus[RecognitionStatus["BabbleTimeout"] = 3] = "BabbleTimeout";
    RecognitionStatus[RecognitionStatus["Error"] = 4] = "Error";
    RecognitionStatus[RecognitionStatus["EndOfDictation"] = 5] = "EndOfDictation";
    RecognitionStatus[RecognitionStatus["TooManyRequests"] = 6] = "TooManyRequests";
    RecognitionStatus[RecognitionStatus["BadRequest"] = 7] = "BadRequest";
    RecognitionStatus[RecognitionStatus["Forbidden"] = 8] = "Forbidden";
})(RecognitionStatus || (RecognitionStatus = {}));

//# sourceMappingURL=Enums.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/IntentResponse.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/IntentResponse.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IntentResponse": () => (/* binding */ IntentResponse)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
// response
class IntentResponse {
    constructor(json) {
        if (json === "") {
            this.privIntentResponse = {};
        }
        else {
            this.privIntentResponse = JSON.parse(json);
        }
    }
    static fromJSON(json) {
        return new IntentResponse(json);
    }
    get query() {
        return this.privIntentResponse.query;
    }
    get topScoringIntent() {
        return this.privIntentResponse.topScoringIntent;
    }
    get entities() {
        return this.privIntentResponse.entities;
    }
}

//# sourceMappingURL=IntentResponse.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SimpleSpeechPhrase.js":
/*!************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SimpleSpeechPhrase.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SimpleSpeechPhrase": () => (/* binding */ SimpleSpeechPhrase)
/* harmony export */ });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/Enums.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

class SimpleSpeechPhrase {
    constructor(json) {
        this.privSimpleSpeechPhrase = JSON.parse(json);
        this.privSimpleSpeechPhrase.RecognitionStatus = _Exports__WEBPACK_IMPORTED_MODULE_0__.RecognitionStatus[this.privSimpleSpeechPhrase.RecognitionStatus];
    }
    static fromJSON(json) {
        return new SimpleSpeechPhrase(json);
    }
    get RecognitionStatus() {
        return this.privSimpleSpeechPhrase.RecognitionStatus;
    }
    get DisplayText() {
        return this.privSimpleSpeechPhrase.DisplayText;
    }
    get Offset() {
        return this.privSimpleSpeechPhrase.Offset;
    }
    get Duration() {
        return this.privSimpleSpeechPhrase.Duration;
    }
    get Language() {
        return this.privSimpleSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privSimpleSpeechPhrase.PrimaryLanguage.Language;
    }
    get LanguageDetectionConfidence() {
        return this.privSimpleSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privSimpleSpeechPhrase.PrimaryLanguage.Confidence;
    }
    get SpeakerId() {
        return this.privSimpleSpeechPhrase.SpeakerId;
    }
}

//# sourceMappingURL=SimpleSpeechPhrase.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SpeakerResponse.js":
/*!*********************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SpeakerResponse.js ***!
  \*********************************************************************************************************************************/
/***/ (() => {

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/* eslint-disable max-classes-per-file */

//# sourceMappingURL=SpeakerResponse.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SpeechDetected.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SpeechDetected.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeechDetected": () => (/* binding */ SpeechDetected)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
class SpeechDetected {
    constructor(json) {
        this.privSpeechStartDetected = JSON.parse(json);
    }
    static fromJSON(json) {
        return new SpeechDetected(json);
    }
    get Offset() {
        return this.privSpeechStartDetected.Offset;
    }
}

//# sourceMappingURL=SpeechDetected.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SpeechHypothesis.js":
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SpeechHypothesis.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeechHypothesis": () => (/* binding */ SpeechHypothesis)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
class SpeechHypothesis {
    constructor(json) {
        this.privSpeechHypothesis = JSON.parse(json);
    }
    static fromJSON(json) {
        return new SpeechHypothesis(json);
    }
    get Text() {
        return this.privSpeechHypothesis.Text;
    }
    get Offset() {
        return this.privSpeechHypothesis.Offset;
    }
    get Duration() {
        return this.privSpeechHypothesis.Duration;
    }
    get Language() {
        return this.privSpeechHypothesis.PrimaryLanguage === undefined ? undefined : this.privSpeechHypothesis.PrimaryLanguage.Language;
    }
    get LanguageDetectionConfidence() {
        return this.privSpeechHypothesis.PrimaryLanguage === undefined ? undefined : this.privSpeechHypothesis.PrimaryLanguage.Confidence;
    }
    get SpeakerId() {
        return this.privSpeechHypothesis.SpeakerId;
    }
}

//# sourceMappingURL=SpeechHypothesis.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SpeechKeyword.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SpeechKeyword.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeechKeyword": () => (/* binding */ SpeechKeyword)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
class SpeechKeyword {
    constructor(json) {
        this.privSpeechKeyword = JSON.parse(json);
    }
    static fromJSON(json) {
        return new SpeechKeyword(json);
    }
    get Status() {
        return this.privSpeechKeyword.Status;
    }
    get Text() {
        return this.privSpeechKeyword.Text;
    }
    get Offset() {
        return this.privSpeechKeyword.Offset;
    }
    get Duration() {
        return this.privSpeechKeyword.Duration;
    }
}

//# sourceMappingURL=SpeechKeyword.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SynthesisAudioMetadata.js":
/*!****************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SynthesisAudioMetadata.js ***!
  \****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MetadataType": () => (/* binding */ MetadataType),
/* harmony export */   "SynthesisAudioMetadata": () => (/* binding */ SynthesisAudioMetadata)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var MetadataType;
(function (MetadataType) {
    MetadataType["WordBoundary"] = "WordBoundary";
    MetadataType["Bookmark"] = "Bookmark";
    MetadataType["Viseme"] = "Viseme";
    MetadataType["SentenceBoundary"] = "SentenceBoundary";
    MetadataType["SessionEnd"] = "SessionEnd";
})(MetadataType || (MetadataType = {}));
class SynthesisAudioMetadata {
    constructor(json) {
        this.privSynthesisAudioMetadata = JSON.parse(json);
    }
    static fromJSON(json) {
        return new SynthesisAudioMetadata(json);
    }
    get Metadata() {
        return this.privSynthesisAudioMetadata.Metadata;
    }
}

//# sourceMappingURL=SynthesisAudioMetadata.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/TranslationHypothesis.js":
/*!***************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/TranslationHypothesis.js ***!
  \***************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TranslationHypothesis": () => (/* binding */ TranslationHypothesis)
/* harmony export */ });
/* harmony import */ var _TranslationStatus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../TranslationStatus */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranslationStatus.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

class TranslationHypothesis {
    constructor(json) {
        this.privTranslationHypothesis = JSON.parse(json);
        this.privTranslationHypothesis.Translation.TranslationStatus = _TranslationStatus__WEBPACK_IMPORTED_MODULE_0__.TranslationStatus[this.privTranslationHypothesis.Translation.TranslationStatus];
    }
    static fromJSON(json) {
        return new TranslationHypothesis(json);
    }
    get Duration() {
        return this.privTranslationHypothesis.Duration;
    }
    get Offset() {
        return this.privTranslationHypothesis.Offset;
    }
    get Text() {
        return this.privTranslationHypothesis.Text;
    }
    get Translation() {
        return this.privTranslationHypothesis.Translation;
    }
}

//# sourceMappingURL=TranslationHypothesis.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/TranslationPhrase.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/TranslationPhrase.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TranslationPhrase": () => (/* binding */ TranslationPhrase)
/* harmony export */ });
/* harmony import */ var _sdk_Contracts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../sdk/Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/Enums.js");
/* harmony import */ var _TranslationStatus__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../TranslationStatus */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranslationStatus.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.



class TranslationPhrase {
    constructor(phrase) {
        this.privTranslationPhrase = phrase;
        this.privTranslationPhrase.RecognitionStatus = _Exports__WEBPACK_IMPORTED_MODULE_0__.RecognitionStatus[this.privTranslationPhrase.RecognitionStatus];
        if (this.privTranslationPhrase.Translation !== undefined) {
            this.privTranslationPhrase.Translation.TranslationStatus = _TranslationStatus__WEBPACK_IMPORTED_MODULE_1__.TranslationStatus[this.privTranslationPhrase.Translation.TranslationStatus];
        }
    }
    static fromJSON(json) {
        return new TranslationPhrase(JSON.parse(json));
    }
    static fromTranslationResponse(translationResponse) {
        _sdk_Contracts__WEBPACK_IMPORTED_MODULE_2__.Contracts.throwIfNullOrUndefined(translationResponse, "translationResponse");
        const phrase = translationResponse.SpeechPhrase;
        translationResponse.SpeechPhrase = undefined;
        phrase.Translation = translationResponse;
        phrase.Text = phrase.DisplayText;
        return new TranslationPhrase(phrase);
    }
    get RecognitionStatus() {
        return this.privTranslationPhrase.RecognitionStatus;
    }
    get Offset() {
        return this.privTranslationPhrase.Offset;
    }
    get Duration() {
        return this.privTranslationPhrase.Duration;
    }
    get Text() {
        return this.privTranslationPhrase.Text;
    }
    get Language() {
        var _a;
        return (_a = this.privTranslationPhrase.PrimaryLanguage) === null || _a === void 0 ? void 0 : _a.Language;
    }
    get Confidence() {
        var _a;
        return (_a = this.privTranslationPhrase.PrimaryLanguage) === null || _a === void 0 ? void 0 : _a.Confidence;
    }
    get Translation() {
        return this.privTranslationPhrase.Translation;
    }
}

//# sourceMappingURL=TranslationPhrase.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/TranslationSynthesisEnd.js":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/TranslationSynthesisEnd.js ***!
  \*****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TranslationSynthesisEnd": () => (/* binding */ TranslationSynthesisEnd)
/* harmony export */ });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/Enums.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

class TranslationSynthesisEnd {
    constructor(json) {
        this.privSynthesisEnd = JSON.parse(json);
        if (!!this.privSynthesisEnd.SynthesisStatus) {
            this.privSynthesisEnd.SynthesisStatus = _Exports__WEBPACK_IMPORTED_MODULE_0__.SynthesisStatus[this.privSynthesisEnd.SynthesisStatus];
        }
        if (!!this.privSynthesisEnd.Status) {
            this.privSynthesisEnd.SynthesisStatus = _Exports__WEBPACK_IMPORTED_MODULE_0__.SynthesisStatus[this.privSynthesisEnd.Status];
        }
    }
    static fromJSON(json) {
        return new TranslationSynthesisEnd(json);
    }
    get SynthesisStatus() {
        return this.privSynthesisEnd.SynthesisStatus;
    }
    get FailureReason() {
        return this.privSynthesisEnd.FailureReason;
    }
}

//# sourceMappingURL=TranslationSynthesisEnd.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/TurnStatusPayload.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/TurnStatusPayload.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TurnStatusResponsePayload": () => (/* binding */ TurnStatusResponsePayload)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
class TurnStatusResponsePayload {
    constructor(json) {
        this.privMessageStatusResponse = JSON.parse(json);
    }
    static fromJSON(json) {
        return new TurnStatusResponsePayload(json);
    }
    get interactionId() {
        return this.privMessageStatusResponse.interactionId;
    }
    get conversationId() {
        return this.privMessageStatusResponse.conversationId;
    }
    get statusCode() {
        // Payloads may contain a limited set of textual representations or a numeric status
        // code. The textual values are here converted into numeric ones.
        switch (this.privMessageStatusResponse.statusCode) {
            case "Success":
                return 200;
            case "Failed":
                return 400;
            case "TimedOut":
                return 429;
            default:
                // eslint-disable-next-line @typescript-eslint/no-unsafe-return
                return this.privMessageStatusResponse.statusCode;
        }
    }
}

//# sourceMappingURL=TurnStatusPayload.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceRecognizerBase.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceRecognizerBase.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ServiceRecognizerBase": () => (/* binding */ ServiceRecognizerBase)
/* harmony export */ });
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ReplayableAudioNode.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/EventSource.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Timeout.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionEvents.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/IConnection.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationReason.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationErrorCodes.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SessionEventArgs.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/RecognitionEventArgs.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RequestSession.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DynamicGrammarBuilder.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechContext.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/AgentConfig.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognizerConfig.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SpeechDetected.js");
/* harmony import */ var _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./SpeechConnectionMessage.Internal */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechConnectionMessage.Internal.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class ServiceRecognizerBase {
    constructor(authentication, connectionFactory, audioSource, recognizerConfig, recognizer) {
        // A promise for a configured connection.
        // Do not consume directly, call fetchConnection instead.
        this.privConnectionConfigurationPromise = undefined;
        // A promise for a connection, but one that has not had the speech context sent yet.
        // Do not consume directly, call fetchConnection instead.
        this.privConnectionPromise = undefined;
        this.privSetTimeout = setTimeout;
        this.privIsLiveAudio = false;
        this.recognizeOverride = undefined;
        this.recognizeSpeaker = undefined;
        this.disconnectOverride = undefined;
        this.receiveMessageOverride = undefined;
        this.sendPrePayloadJSONOverride = undefined;
        this.postConnectImplOverride = undefined;
        this.configConnectionOverride = undefined;
        this.handleSpeechPhraseMessage = undefined;
        this.handleSpeechHypothesisMessage = undefined;
        if (!authentication) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_0__.ArgumentNullError("authentication");
        }
        if (!connectionFactory) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_0__.ArgumentNullError("connectionFactory");
        }
        if (!audioSource) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_0__.ArgumentNullError("audioSource");
        }
        if (!recognizerConfig) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_0__.ArgumentNullError("recognizerConfig");
        }
        this.privMustReportEndOfStream = false;
        this.privAuthentication = authentication;
        this.privConnectionFactory = connectionFactory;
        this.privAudioSource = audioSource;
        this.privRecognizerConfig = recognizerConfig;
        this.privIsDisposed = false;
        this.privRecognizer = recognizer;
        this.privRequestSession = new _Exports__WEBPACK_IMPORTED_MODULE_1__.RequestSession(this.privAudioSource.id());
        this.privConnectionEvents = new _common_Exports__WEBPACK_IMPORTED_MODULE_2__.EventSource();
        this.privServiceEvents = new _common_Exports__WEBPACK_IMPORTED_MODULE_2__.EventSource();
        this.privDynamicGrammar = new _Exports__WEBPACK_IMPORTED_MODULE_3__.DynamicGrammarBuilder();
        this.privSpeechContext = new _Exports__WEBPACK_IMPORTED_MODULE_4__.SpeechContext(this.privDynamicGrammar);
        this.privAgentConfig = new _Exports__WEBPACK_IMPORTED_MODULE_5__.AgentConfig();
        if (typeof (Blob) !== "undefined" && typeof (Worker) !== "undefined") {
            this.privSetTimeout = _common_Exports__WEBPACK_IMPORTED_MODULE_6__.Timeout.setTimeout;
        }
        this.connectionEvents.attach((connectionEvent) => {
            if (connectionEvent.name === "ConnectionClosedEvent") {
                const connectionClosedEvent = connectionEvent;
                if (connectionClosedEvent.statusCode === 1003 ||
                    connectionClosedEvent.statusCode === 1007 ||
                    connectionClosedEvent.statusCode === 1002 ||
                    connectionClosedEvent.statusCode === 4000 ||
                    this.privRequestSession.numConnectionAttempts > this.privRecognizerConfig.maxRetryCount) {
                    void this.cancelRecognitionLocal(_sdk_Exports__WEBPACK_IMPORTED_MODULE_7__.CancellationReason.Error, connectionClosedEvent.statusCode === 1007 ? _sdk_Exports__WEBPACK_IMPORTED_MODULE_8__.CancellationErrorCode.BadRequestParameters : _sdk_Exports__WEBPACK_IMPORTED_MODULE_8__.CancellationErrorCode.ConnectionFailure, `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);
                }
            }
        });
        const phraseDetection = {};
        if (recognizerConfig.autoDetectSourceLanguages !== undefined) {
            const sourceLanguages = recognizerConfig.autoDetectSourceLanguages.split(",");
            let speechContextLidMode;
            if (recognizerConfig.languageIdMode === "Continuous") {
                speechContextLidMode = "DetectContinuous";
            }
            else { // recognizerConfig.languageIdMode === "AtStart"
                speechContextLidMode = "DetectAtAudioStart";
            }
            this.privSpeechContext.setSection("languageId", {
                Priority: "PrioritizeLatency",
                languages: sourceLanguages,
                mode: speechContextLidMode,
                onSuccess: { action: "Recognize" },
                onUnknown: { action: "None" }
            });
            this.privSpeechContext.setSection("phraseOutput", {
                interimResults: {
                    resultType: "Auto"
                },
                phraseResults: {
                    resultType: "Always"
                }
            });
            const customModels = recognizerConfig.sourceLanguageModels;
            if (customModels !== undefined) {
                phraseDetection.customModels = customModels;
                phraseDetection.onInterim = { action: "None" };
                phraseDetection.onSuccess = { action: "None" };
            }
        }
        const isEmpty = (obj) => {
            // eslint-disable-next-line guard-for-in, brace-style
            for (const x in obj) {
                return false;
            }
            return true;
        };
        if (!isEmpty(phraseDetection)) {
            this.privSpeechContext.setSection("phraseDetection", phraseDetection);
        }
    }
    setSpeechSegmentationTimeout() {
        const speechSegmentationTimeout = this.privRecognizerConfig.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_9__.PropertyId.Speech_SegmentationSilenceTimeoutMs, undefined);
        if (speechSegmentationTimeout !== undefined) {
            const mode = this.recognitionMode === _Exports__WEBPACK_IMPORTED_MODULE_10__.RecognitionMode.Conversation ? "CONVERSATION" :
                this.recognitionMode === _Exports__WEBPACK_IMPORTED_MODULE_10__.RecognitionMode.Dictation ? "DICTATION" : "INTERACTIVE";
            const segmentationSilenceTimeoutMs = parseInt(speechSegmentationTimeout, 10);
            const phraseDetection = this.privSpeechContext.getSection("phraseDetection");
            phraseDetection.mode = mode;
            phraseDetection[mode] = {
                segmentation: {
                    mode: "Custom",
                    segmentationSilenceTimeoutMs
                }
            };
            this.privSpeechContext.setSection("phraseDetection", phraseDetection);
        }
    }
    get audioSource() {
        return this.privAudioSource;
    }
    get speechContext() {
        return this.privSpeechContext;
    }
    get dynamicGrammar() {
        return this.privDynamicGrammar;
    }
    get agentConfig() {
        return this.privAgentConfig;
    }
    set conversationTranslatorToken(token) {
        this.privRecognizerConfig.parameters.setProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_9__.PropertyId.ConversationTranslator_Token, token);
    }
    set voiceProfileType(type) {
        this.privRecognizerConfig.parameters.setProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_9__.PropertyId.SpeechServiceConnection_SpeakerIdMode, type);
    }
    set authentication(auth) {
        this.privAuthentication = this.authentication;
    }
    isDisposed() {
        return this.privIsDisposed;
    }
    dispose(reason) {
        return __awaiter(this, void 0, void 0, function* () {
            this.privIsDisposed = true;
            if (this.privConnectionConfigurationPromise !== undefined) {
                try {
                    const connection = yield this.privConnectionConfigurationPromise;
                    yield connection.dispose(reason);
                }
                catch (error) {
                    // The connection is in a bad state. But we're trying to kill it, so...
                    return;
                }
            }
        });
    }
    get connectionEvents() {
        return this.privConnectionEvents;
    }
    get serviceEvents() {
        return this.privServiceEvents;
    }
    get recognitionMode() {
        return this.privRecognizerConfig.recognitionMode;
    }
    recognize(recoMode, successCallback, errorCallBack) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.recognizeOverride !== undefined) {
                yield this.recognizeOverride(recoMode, successCallback, errorCallBack);
                return;
            }
            // Clear the existing configuration promise to force a re-transmission of config and context.
            this.privConnectionConfigurationPromise = undefined;
            this.privRecognizerConfig.recognitionMode = recoMode;
            this.setSpeechSegmentationTimeout();
            this.privSuccessCallback = successCallback;
            this.privErrorCallback = errorCallBack;
            this.privRequestSession.startNewRecognition();
            this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);
            // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().
            const conPromise = this.connectImpl();
            let audioNode;
            try {
                const audioStreamNode = yield this.audioSource.attach(this.privRequestSession.audioNodeId);
                const format = yield this.audioSource.format;
                const deviceInfo = yield this.audioSource.deviceInfo;
                this.privIsLiveAudio = deviceInfo.type && deviceInfo.type === _Exports__WEBPACK_IMPORTED_MODULE_10__.type.Microphones;
                audioNode = new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_11__.ReplayableAudioNode(audioStreamNode, format.avgBytesPerSec);
                yield this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);
                this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };
            }
            catch (error) {
                yield this.privRequestSession.onStopRecognizing();
                throw error;
            }
            try {
                yield conPromise;
            }
            catch (error) {
                yield this.cancelRecognitionLocal(_sdk_Exports__WEBPACK_IMPORTED_MODULE_7__.CancellationReason.Error, _sdk_Exports__WEBPACK_IMPORTED_MODULE_8__.CancellationErrorCode.ConnectionFailure, error);
                return;
            }
            const sessionStartEventArgs = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_12__.SessionEventArgs(this.privRequestSession.sessionId);
            if (!!this.privRecognizer.sessionStarted) {
                this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);
            }
            void this.receiveMessage();
            const audioSendPromise = this.sendAudio(audioNode);
            audioSendPromise.catch((error) => __awaiter(this, void 0, void 0, function* () {
                yield this.cancelRecognitionLocal(_sdk_Exports__WEBPACK_IMPORTED_MODULE_7__.CancellationReason.Error, _sdk_Exports__WEBPACK_IMPORTED_MODULE_8__.CancellationErrorCode.RuntimeError, error);
            }));
            return;
        });
    }
    stopRecognizing() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.privRequestSession.isRecognizing) {
                try {
                    yield this.audioSource.turnOff();
                    yield this.sendFinalAudio();
                    yield this.privRequestSession.onStopRecognizing();
                    yield this.privRequestSession.turnCompletionPromise;
                }
                finally {
                    yield this.privRequestSession.dispose();
                }
            }
            return;
        });
    }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.connectImpl();
            return Promise.resolve();
        });
    }
    connectAsync(cb, err) {
        this.connectImpl().then(() => {
            try {
                if (!!cb) {
                    cb();
                }
            }
            catch (e) {
                if (!!err) {
                    err(e);
                }
            }
        }, (reason) => {
            try {
                if (!!err) {
                    err(reason);
                }
                /* eslint-disable no-empty */
            }
            catch (error) {
            }
        });
    }
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.cancelRecognitionLocal(_sdk_Exports__WEBPACK_IMPORTED_MODULE_7__.CancellationReason.Error, _sdk_Exports__WEBPACK_IMPORTED_MODULE_8__.CancellationErrorCode.NoError, "Disconnecting");
            if (this.disconnectOverride !== undefined) {
                yield this.disconnectOverride();
            }
            if (this.privConnectionPromise !== undefined) {
                try {
                    yield (yield this.privConnectionPromise).dispose();
                }
                catch (error) {
                }
            }
            this.privConnectionPromise = undefined;
        });
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    sendMessage(message) {
        return;
    }
    sendNetworkMessage(path, payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const type = typeof payload === "string" ? _common_Exports__WEBPACK_IMPORTED_MODULE_13__.MessageType.Text : _common_Exports__WEBPACK_IMPORTED_MODULE_13__.MessageType.Binary;
            const contentType = typeof payload === "string" ? "application/json" : "";
            const connection = yield this.fetchConnection();
            return connection.send(new _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_14__.SpeechConnectionMessage(type, path, this.privRequestSession.requestId, contentType, payload));
        });
    }
    set activityTemplate(messagePayload) {
        this.privActivityTemplate = messagePayload;
    }
    get activityTemplate() {
        return this.privActivityTemplate;
    }
    sendTelemetryData() {
        return __awaiter(this, void 0, void 0, function* () {
            const telemetryData = this.privRequestSession.getTelemetry();
            if (ServiceRecognizerBase.telemetryDataEnabled !== true ||
                this.privIsDisposed ||
                null === telemetryData) {
                return;
            }
            if (!!ServiceRecognizerBase.telemetryData) {
                try {
                    ServiceRecognizerBase.telemetryData(telemetryData);
                    /* eslint-disable no-empty */
                }
                catch (_a) { }
            }
            const connection = yield this.fetchConnection();
            yield connection.send(new _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_14__.SpeechConnectionMessage(_common_Exports__WEBPACK_IMPORTED_MODULE_13__.MessageType.Text, "telemetry", this.privRequestSession.requestId, "application/json", telemetryData));
        });
    }
    // Cancels recognition.
    cancelRecognitionLocal(cancellationReason, errorCode, error) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!!this.privRequestSession.isRecognizing) {
                yield this.privRequestSession.onStopRecognizing();
                this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, cancellationReason, errorCode, error);
            }
        });
    }
    receiveMessage() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (this.privIsDisposed) {
                    // We're done.
                    return;
                }
                let connection = yield this.fetchConnection();
                const message = yield connection.read();
                if (this.receiveMessageOverride !== undefined) {
                    return this.receiveMessageOverride();
                }
                // indicates we are draining the queue and it came with no message;
                if (!message) {
                    if (!this.privRequestSession.isRecognizing) {
                        return;
                    }
                    else {
                        return this.receiveMessage();
                    }
                }
                this.privServiceHasSentMessage = true;
                const connectionMessage = _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_14__.SpeechConnectionMessage.fromConnectionMessage(message);
                if (connectionMessage.requestId.toLowerCase() === this.privRequestSession.requestId.toLowerCase()) {
                    switch (connectionMessage.path.toLowerCase()) {
                        case "turn.start":
                            this.privMustReportEndOfStream = true;
                            this.privRequestSession.onServiceTurnStartResponse();
                            break;
                        case "speech.startdetected":
                            const speechStartDetected = _Exports__WEBPACK_IMPORTED_MODULE_15__.SpeechDetected.fromJSON(connectionMessage.textBody);
                            const speechStartEventArgs = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_16__.RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);
                            if (!!this.privRecognizer.speechStartDetected) {
                                this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);
                            }
                            break;
                        case "speech.enddetected":
                            let json;
                            if (connectionMessage.textBody.length > 0) {
                                json = connectionMessage.textBody;
                            }
                            else {
                                // If the request was empty, the JSON returned is empty.
                                json = "{ Offset: 0 }";
                            }
                            const speechStopDetected = _Exports__WEBPACK_IMPORTED_MODULE_15__.SpeechDetected.fromJSON(json);
                            const speechStopEventArgs = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_16__.RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);
                            if (!!this.privRecognizer.speechEndDetected) {
                                this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);
                            }
                            break;
                        case "turn.end":
                            yield this.sendTelemetryData();
                            if (this.privRequestSession.isSpeechEnded && this.privMustReportEndOfStream) {
                                this.privMustReportEndOfStream = false;
                                yield this.cancelRecognitionLocal(_sdk_Exports__WEBPACK_IMPORTED_MODULE_7__.CancellationReason.EndOfStream, _sdk_Exports__WEBPACK_IMPORTED_MODULE_8__.CancellationErrorCode.NoError, undefined);
                            }
                            const sessionStopEventArgs = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_12__.SessionEventArgs(this.privRequestSession.sessionId);
                            yield this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition);
                            if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {
                                if (!!this.privRecognizer.sessionStopped) {
                                    this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);
                                }
                                return;
                            }
                            else {
                                connection = yield this.fetchConnection();
                                yield this.sendPrePayloadJSON(connection);
                            }
                            break;
                        default:
                            if (!(yield this.processTypeSpecificMessages(connectionMessage))) {
                                // here are some messages that the derived class has not processed, dispatch them to connect class
                                if (!!this.privServiceEvents) {
                                    this.serviceEvents.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_17__.ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));
                                }
                            }
                    }
                }
                return this.receiveMessage();
            }
            catch (error) {
                return null;
            }
        });
    }
    sendSpeechContext(connection, generateNewRequestId) {
        const speechContextJson = this.speechContext.toJSON();
        if (generateNewRequestId) {
            this.privRequestSession.onSpeechContext();
        }
        if (speechContextJson) {
            return connection.send(new _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_14__.SpeechConnectionMessage(_common_Exports__WEBPACK_IMPORTED_MODULE_13__.MessageType.Text, "speech.context", this.privRequestSession.requestId, "application/json", speechContextJson));
        }
        return;
    }
    noOp() {
        // operation not supported
        return;
    }
    // Encapsulated for derived service recognizers that need to send additional JSON
    sendPrePayloadJSON(connection, generateNewRequestId = true) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.sendPrePayloadJSONOverride !== undefined) {
                return this.sendPrePayloadJSONOverride(connection);
            }
            yield this.sendSpeechContext(connection, generateNewRequestId);
            yield this.sendWaveHeader(connection);
            return;
        });
    }
    sendWaveHeader(connection) {
        return __awaiter(this, void 0, void 0, function* () {
            const format = yield this.audioSource.format;
            // this.writeBufferToConsole(format.header);
            return connection.send(new _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_14__.SpeechConnectionMessage(_common_Exports__WEBPACK_IMPORTED_MODULE_13__.MessageType.Binary, "audio", this.privRequestSession.requestId, "audio/x-wav", format.header));
        });
    }
    // Establishes a websocket connection to the end point.
    connectImpl() {
        if (this.privConnectionPromise !== undefined) {
            return this.privConnectionPromise.then((connection) => {
                if (connection.state() === _common_Exports__WEBPACK_IMPORTED_MODULE_18__.ConnectionState.Disconnected) {
                    this.privConnectionId = null;
                    this.privConnectionPromise = undefined;
                    this.privServiceHasSentMessage = false;
                    return this.connectImpl();
                }
                return this.privConnectionPromise;
            }, () => {
                this.privConnectionId = null;
                this.privConnectionPromise = undefined;
                this.privServiceHasSentMessage = false;
                return this.connectImpl();
            });
        }
        this.privConnectionPromise = this.retryableConnect();
        // Attach an empty handler to allow the promise to run in the background while
        // other startup events happen. It'll eventually be awaited on.
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        this.privConnectionPromise.catch(() => { });
        if (this.postConnectImplOverride !== undefined) {
            return this.postConnectImplOverride(this.privConnectionPromise);
        }
        return this.privConnectionPromise;
    }
    sendSpeechServiceConfig(connection, requestSession, SpeechServiceConfigJson) {
        requestSession.onSpeechContext();
        // filter out anything that is not required for the service to work.
        if (ServiceRecognizerBase.telemetryDataEnabled !== true) {
            const withTelemetry = JSON.parse(SpeechServiceConfigJson);
            const replacement = {
                context: {
                    system: withTelemetry.context.system,
                },
            };
            SpeechServiceConfigJson = JSON.stringify(replacement);
        }
        if (this.privRecognizerConfig.parameters.getProperty("f0f5debc-f8c9-4892-ac4b-90a7ab359fd2", "false").toLowerCase() === "true") {
            const json = JSON.parse(SpeechServiceConfigJson);
            json.context.DisableReferenceChannel = "True";
            json.context.MicSpec = "1_0_0";
            SpeechServiceConfigJson = JSON.stringify(json);
        }
        if (SpeechServiceConfigJson) {
            return connection.send(new _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_14__.SpeechConnectionMessage(_common_Exports__WEBPACK_IMPORTED_MODULE_13__.MessageType.Text, "speech.config", requestSession.requestId, "application/json", SpeechServiceConfigJson));
        }
        return;
    }
    fetchConnection() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.privConnectionConfigurationPromise !== undefined) {
                return this.privConnectionConfigurationPromise.then((connection) => {
                    if (connection.state() === _common_Exports__WEBPACK_IMPORTED_MODULE_18__.ConnectionState.Disconnected) {
                        this.privConnectionId = null;
                        this.privConnectionConfigurationPromise = undefined;
                        this.privServiceHasSentMessage = false;
                        return this.fetchConnection();
                    }
                    return this.privConnectionConfigurationPromise;
                }, () => {
                    this.privConnectionId = null;
                    this.privConnectionConfigurationPromise = undefined;
                    this.privServiceHasSentMessage = false;
                    return this.fetchConnection();
                });
            }
            this.privConnectionConfigurationPromise = this.configureConnection();
            return yield this.privConnectionConfigurationPromise;
        });
    }
    sendAudio(audioStreamNode) {
        return __awaiter(this, void 0, void 0, function* () {
            const audioFormat = yield this.audioSource.format;
            // The time we last sent data to the service.
            let nextSendTime = Date.now();
            // Max amount to send before we start to throttle
            const fastLaneSizeMs = this.privRecognizerConfig.parameters.getProperty("SPEECH-TransmitLengthBeforThrottleMs", "5000");
            const maxSendUnthrottledBytes = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);
            const startRecogNumber = this.privRequestSession.recogNumber;
            const readAndUploadCycle = () => __awaiter(this, void 0, void 0, function* () {
                // If speech is done, stop sending audio.
                if (!this.privIsDisposed &&
                    !this.privRequestSession.isSpeechEnded &&
                    this.privRequestSession.isRecognizing &&
                    this.privRequestSession.recogNumber === startRecogNumber) {
                    const connection = yield this.fetchConnection();
                    const audioStreamChunk = yield audioStreamNode.read();
                    // we have a new audio chunk to upload.
                    if (this.privRequestSession.isSpeechEnded) {
                        // If service already recognized audio end then don't send any more audio
                        return;
                    }
                    let payload;
                    let sendDelay;
                    if (!audioStreamChunk || audioStreamChunk.isEnd) {
                        payload = null;
                        sendDelay = 0;
                    }
                    else {
                        payload = audioStreamChunk.buffer;
                        this.privRequestSession.onAudioSent(payload.byteLength);
                        if (maxSendUnthrottledBytes >= this.privRequestSession.bytesSent) {
                            sendDelay = 0;
                        }
                        else {
                            sendDelay = Math.max(0, nextSendTime - Date.now());
                        }
                    }
                    if (0 !== sendDelay) {
                        yield this.delay(sendDelay);
                    }
                    if (payload !== null) {
                        nextSendTime = Date.now() + (payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2));
                    }
                    // Are we still alive?
                    if (!this.privIsDisposed &&
                        !this.privRequestSession.isSpeechEnded &&
                        this.privRequestSession.isRecognizing &&
                        this.privRequestSession.recogNumber === startRecogNumber) {
                        connection.send(new _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_14__.SpeechConnectionMessage(_common_Exports__WEBPACK_IMPORTED_MODULE_13__.MessageType.Binary, "audio", this.privRequestSession.requestId, null, payload)).catch(() => {
                            // eslint-disable-next-line @typescript-eslint/no-empty-function
                            this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition).catch(() => { });
                        });
                        if (!(audioStreamChunk === null || audioStreamChunk === void 0 ? void 0 : audioStreamChunk.isEnd)) {
                            // this.writeBufferToConsole(payload);
                            // Regardless of success or failure, schedule the next upload.
                            // If the underlying connection was broken, the next cycle will
                            // get a new connection and re-transmit missing audio automatically.
                            return readAndUploadCycle();
                        }
                        else {
                            // the audio stream has been closed, no need to schedule next
                            // read-upload cycle.
                            if (!this.privIsLiveAudio) {
                                this.privRequestSession.onSpeechEnded();
                            }
                        }
                    }
                }
            });
            return readAndUploadCycle();
        });
    }
    retryableConnect() {
        return __awaiter(this, void 0, void 0, function* () {
            let isUnAuthorized = false;
            this.privAuthFetchEventId = (0,_common_Exports__WEBPACK_IMPORTED_MODULE_19__.createNoDashGuid)();
            const sessionId = this.privRequestSession.sessionId;
            this.privConnectionId = (sessionId !== undefined) ? sessionId : (0,_common_Exports__WEBPACK_IMPORTED_MODULE_19__.createNoDashGuid)();
            this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);
            let lastStatusCode = 0;
            let lastReason = "";
            while (this.privRequestSession.numConnectionAttempts <= this.privRecognizerConfig.maxRetryCount) {
                // Get the auth information for the connection. This is a bit of overkill for the current API surface, but leaving the plumbing in place to be able to raise a developer-customer
                // facing event when a connection fails to let them try and provide new auth information.
                const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);
                const auth = yield authPromise;
                yield this.privRequestSession.onAuthCompleted(false);
                // Create the connection
                const connection = this.privConnectionFactory.create(this.privRecognizerConfig, auth, this.privConnectionId);
                // Attach the telemetry handlers.
                this.privRequestSession.listenForServiceTelemetry(connection.events);
                // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,
                // it'll stop sending events.
                connection.events.attach((event) => {
                    this.connectionEvents.onEvent(event);
                });
                const response = yield connection.open();
                // 200 == everything is fine.
                if (response.statusCode === 200) {
                    yield this.privRequestSession.onConnectionEstablishCompleted(response.statusCode);
                    return Promise.resolve(connection);
                }
                else if (response.statusCode === 1006) {
                    isUnAuthorized = true;
                }
                lastStatusCode = response.statusCode;
                lastReason = response.reason;
                this.privRequestSession.onRetryConnection();
            }
            yield this.privRequestSession.onConnectionEstablishCompleted(lastStatusCode, lastReason);
            return Promise.reject(`Unable to contact server. StatusCode: ${lastStatusCode}, ${this.privRecognizerConfig.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_9__.PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${lastReason}`);
        });
    }
    delay(delayMs) {
        return new Promise((resolve) => this.privSetTimeout(resolve, delayMs));
    }
    writeBufferToConsole(buffer) {
        let out = "Buffer Size: ";
        if (null === buffer) {
            out += "null";
        }
        else {
            const readView = new Uint8Array(buffer);
            out += `${buffer.byteLength}\r\n`;
            for (let i = 0; i < buffer.byteLength; i++) {
                out += readView[i].toString(16).padStart(2, "0") + " ";
                if (((i + 1) % 16) === 0) {
                    // eslint-disable-next-line no-console
                    console.info(out);
                    out = "";
                }
            }
        }
        // eslint-disable-next-line no-console
        console.info(out);
    }
    sendFinalAudio() {
        return __awaiter(this, void 0, void 0, function* () {
            const connection = yield this.fetchConnection();
            yield connection.send(new _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_14__.SpeechConnectionMessage(_common_Exports__WEBPACK_IMPORTED_MODULE_13__.MessageType.Binary, "audio", this.privRequestSession.requestId, null, null));
            return;
        });
    }
    // Takes an established websocket connection to the endpoint and sends speech configuration information.
    configureConnection() {
        return __awaiter(this, void 0, void 0, function* () {
            const connection = yield this.connectImpl();
            if (this.configConnectionOverride !== undefined) {
                return this.configConnectionOverride(connection);
            }
            yield this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());
            yield this.sendPrePayloadJSON(connection, false);
            return connection;
        });
    }
}
ServiceRecognizerBase.telemetryDataEnabled = true;

//# sourceMappingURL=ServiceRecognizerBase.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceTelemetryListener.Internal.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceTelemetryListener.Internal.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ServiceTelemetryListener": () => (/* binding */ ServiceTelemetryListener)
/* harmony export */ });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/AudioSourceEvents.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionEvents.js");
/* harmony import */ var _RecognitionEvents__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RecognitionEvents */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognitionEvents.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/* eslint-disable max-classes-per-file */


class ServiceTelemetryListener {
    constructor(requestId, audioSourceId, audioNodeId) {
        this.privIsDisposed = false;
        this.privListeningTriggerMetric = null;
        this.privMicMetric = null;
        this.privConnectionEstablishMetric = null;
        this.privRequestId = requestId;
        this.privAudioSourceId = audioSourceId;
        this.privAudioNodeId = audioNodeId;
        this.privReceivedMessages = {};
        this.privPhraseLatencies = [];
        this.privHypothesisLatencies = [];
    }
    phraseReceived(audioReceivedTime) {
        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.
            this.privPhraseLatencies.push(Date.now() - audioReceivedTime);
        }
    }
    hypothesisReceived(audioReceivedTime) {
        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.
            this.privHypothesisLatencies.push(Date.now() - audioReceivedTime);
        }
    }
    onEvent(e) {
        if (this.privIsDisposed) {
            return;
        }
        if (e instanceof _RecognitionEvents__WEBPACK_IMPORTED_MODULE_0__.RecognitionTriggeredEvent && e.requestId === this.privRequestId) {
            this.privListeningTriggerMetric = {
                End: e.eventTime,
                Name: "ListeningTrigger",
                Start: e.eventTime,
            };
        }
        if (e instanceof _common_Exports__WEBPACK_IMPORTED_MODULE_1__.AudioStreamNodeAttachingEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {
            this.privMicStartTime = e.eventTime;
        }
        if (e instanceof _common_Exports__WEBPACK_IMPORTED_MODULE_1__.AudioStreamNodeAttachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {
            this.privMicStartTime = e.eventTime;
        }
        if (e instanceof _common_Exports__WEBPACK_IMPORTED_MODULE_1__.AudioSourceErrorEvent && e.audioSourceId === this.privAudioSourceId) {
            if (!this.privMicMetric) {
                this.privMicMetric = {
                    End: e.eventTime,
                    Error: e.error,
                    Name: "Microphone",
                    Start: this.privMicStartTime,
                };
            }
        }
        if (e instanceof _common_Exports__WEBPACK_IMPORTED_MODULE_1__.AudioStreamNodeErrorEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {
            if (!this.privMicMetric) {
                this.privMicMetric = {
                    End: e.eventTime,
                    Error: e.error,
                    Name: "Microphone",
                    Start: this.privMicStartTime,
                };
            }
        }
        if (e instanceof _common_Exports__WEBPACK_IMPORTED_MODULE_1__.AudioStreamNodeDetachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {
            if (!this.privMicMetric) {
                this.privMicMetric = {
                    End: e.eventTime,
                    Name: "Microphone",
                    Start: this.privMicStartTime,
                };
            }
        }
        if (e instanceof _RecognitionEvents__WEBPACK_IMPORTED_MODULE_0__.ConnectingToServiceEvent && e.requestId === this.privRequestId) {
            this.privConnectionId = e.sessionId;
        }
        if (e instanceof _common_Exports__WEBPACK_IMPORTED_MODULE_2__.ConnectionStartEvent && e.connectionId === this.privConnectionId) {
            this.privConnectionStartTime = e.eventTime;
        }
        if (e instanceof _common_Exports__WEBPACK_IMPORTED_MODULE_2__.ConnectionEstablishedEvent && e.connectionId === this.privConnectionId) {
            if (!this.privConnectionEstablishMetric) {
                this.privConnectionEstablishMetric = {
                    End: e.eventTime,
                    Id: this.privConnectionId,
                    Name: "Connection",
                    Start: this.privConnectionStartTime,
                };
            }
        }
        if (e instanceof _common_Exports__WEBPACK_IMPORTED_MODULE_2__.ConnectionEstablishErrorEvent && e.connectionId === this.privConnectionId) {
            if (!this.privConnectionEstablishMetric) {
                this.privConnectionEstablishMetric = {
                    End: e.eventTime,
                    Error: this.getConnectionError(e.statusCode),
                    Id: this.privConnectionId,
                    Name: "Connection",
                    Start: this.privConnectionStartTime,
                };
            }
        }
        if (e instanceof _common_Exports__WEBPACK_IMPORTED_MODULE_2__.ConnectionMessageReceivedEvent && e.connectionId === this.privConnectionId) {
            if (e.message && e.message.headers && e.message.headers.path) {
                if (!this.privReceivedMessages[e.message.headers.path]) {
                    this.privReceivedMessages[e.message.headers.path] = new Array();
                }
                const maxMessagesToSend = 50;
                if (this.privReceivedMessages[e.message.headers.path].length < maxMessagesToSend) {
                    this.privReceivedMessages[e.message.headers.path].push(e.networkReceivedTime);
                }
            }
        }
    }
    getTelemetry() {
        const metrics = new Array();
        if (this.privListeningTriggerMetric) {
            metrics.push(this.privListeningTriggerMetric);
        }
        if (this.privMicMetric) {
            metrics.push(this.privMicMetric);
        }
        if (this.privConnectionEstablishMetric) {
            metrics.push(this.privConnectionEstablishMetric);
        }
        if (this.privPhraseLatencies.length > 0) {
            metrics.push({
                PhraseLatencyMs: this.privPhraseLatencies,
            });
        }
        if (this.privHypothesisLatencies.length > 0) {
            metrics.push({
                FirstHypothesisLatencyMs: this.privHypothesisLatencies,
            });
        }
        const telemetry = {
            Metrics: metrics,
            ReceivedMessages: this.privReceivedMessages,
        };
        const json = JSON.stringify(telemetry);
        // We dont want to send the same telemetry again. So clean those out.
        this.privReceivedMessages = {};
        this.privListeningTriggerMetric = null;
        this.privMicMetric = null;
        this.privConnectionEstablishMetric = null;
        this.privPhraseLatencies = [];
        this.privHypothesisLatencies = [];
        return json;
    }
    // Determines if there are any telemetry events to send to the service.
    get hasTelemetry() {
        return (Object.keys(this.privReceivedMessages).length !== 0 ||
            this.privListeningTriggerMetric !== null ||
            this.privMicMetric !== null ||
            this.privConnectionEstablishMetric !== null ||
            this.privPhraseLatencies.length !== 0 ||
            this.privHypothesisLatencies.length !== 0);
    }
    dispose() {
        this.privIsDisposed = true;
    }
    getConnectionError(statusCode) {
        /*
        -- Websocket status codes --
        NormalClosure = 1000,
        EndpointUnavailable = 1001,
        ProtocolError = 1002,
        InvalidMessageType = 1003,
        Empty = 1005,
        InvalidPayloadData = 1007,
        PolicyViolation = 1008,
        MessageTooBig = 1009,
        MandatoryExtension = 1010,
        InternalServerError = 1011
        */
        switch (statusCode) {
            case 400:
            case 1002:
            case 1003:
            case 1005:
            case 1007:
            case 1008:
            case 1009: return "BadRequest";
            case 401: return "Unauthorized";
            case 403: return "Forbidden";
            case 503:
            case 1001: return "ServerUnavailable";
            case 500:
            case 1011: return "ServerError";
            case 408:
            case 504: return "Timeout";
            default: return "statuscode:" + statusCode.toString();
        }
    }
}

//# sourceMappingURL=ServiceTelemetryListener.Internal.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeakerRecognitionConfig.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeakerRecognitionConfig.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeakerRecognitionConfig": () => (/* binding */ SpeakerRecognitionConfig)
/* harmony export */ });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognizerConfig.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

class SpeakerRecognitionConfig {
    constructor(context, parameters) {
        this.privContext = context ? context : new _Exports__WEBPACK_IMPORTED_MODULE_0__.Context(null);
        this.privParameters = parameters;
    }
    get parameters() {
        return this.privParameters;
    }
    get Context() {
        return this.privContext;
    }
}

//# sourceMappingURL=SpeakerRecognitionConfig.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeakerRecognitionConnectionFactory.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeakerRecognitionConnectionFactory.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeakerRecognitionConnectionFactory": () => (/* binding */ SpeakerRecognitionConnectionFactory),
/* harmony export */   "VoiceProfileConnectionFactory": () => (/* binding */ VoiceProfileConnectionFactory)
/* harmony export */ });
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/WebsocketConnection.js");
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ProxyInfo.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ConnectionFactoryBase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ConnectionFactoryBase.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/WebsocketMessageFormatter.js");
/* harmony import */ var _HeaderNames__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./HeaderNames */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/HeaderNames.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/* eslint-disable max-classes-per-file */





class SpeakerRecognitionConnectionFactoryBase extends _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_0__.ConnectionFactoryBase {
    create(config, authInfo, endpointPath, connectionId) {
        let endpoint = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_Endpoint);
        if (!endpoint) {
            const region = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_Region);
            const hostSuffix = _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_0__.ConnectionFactoryBase.getHostSuffix(region);
            const host = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_Host, `wss://${region}.spr-frontend.speech${hostSuffix}`);
            const scenario = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_SpeakerIdMode, "TextIndependentIdentification");
            endpoint = `${host}/speaker/ws/${this.scenarioToPath(scenario)}/${endpointPath}`;
        }
        const queryParams = {
            format: "simple",
            language: config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_RecoLanguage),
        };
        this.setCommonUrlParams(config, queryParams, endpoint);
        const headers = {};
        if (authInfo.token !== undefined && authInfo.token !== "") {
            headers[authInfo.headerName] = authInfo.token;
        }
        headers[_HeaderNames__WEBPACK_IMPORTED_MODULE_2__.HeaderNames.ConnectionId] = connectionId;
        headers[_HeaderNames__WEBPACK_IMPORTED_MODULE_2__.HeaderNames.SpIDAuthKey] = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_Key);
        config.parameters.setProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_Url, endpoint);
        const enableCompression = config.parameters.getProperty("SPEECH-EnableWebsocketCompression", "false") === "true";
        return new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_3__.WebsocketConnection(endpoint, queryParams, headers, new _Exports__WEBPACK_IMPORTED_MODULE_4__.WebsocketMessageFormatter(), _common_browser_Exports__WEBPACK_IMPORTED_MODULE_5__.ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);
    }
    scenarioToPath(mode) {
        switch (mode) {
            case "TextIndependentVerification":
            case "2":
                return "verification/text-independent";
            case "TextDependentVerification":
            case "1":
                return "verification/text-dependent";
            default:
                return "identification/text-independent";
        }
    }
}
class SpeakerRecognitionConnectionFactory extends SpeakerRecognitionConnectionFactoryBase {
    create(config, authInfo, connectionId) {
        return super.create(config, authInfo, "recognition", connectionId);
    }
}
class VoiceProfileConnectionFactory extends SpeakerRecognitionConnectionFactoryBase {
    create(config, authInfo, connectionId) {
        return super.create(config, authInfo, "profile", connectionId);
    }
}

//# sourceMappingURL=SpeakerRecognitionConnectionFactory.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeakerServiceRecognizer.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeakerServiceRecognizer.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeakerServiceRecognizer": () => (/* binding */ SpeakerServiceRecognizer)
/* harmony export */ });
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ReplayableAudioNode.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeakerRecognitionResult.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ResultReason.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationErrorCodes.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationReason.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SessionEventArgs.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceRecognizerBase.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./SpeechConnectionMessage.Internal */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechConnectionMessage.Internal.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





// eslint-disable-next-line max-classes-per-file
class SpeakerServiceRecognizer extends _Exports__WEBPACK_IMPORTED_MODULE_0__.ServiceRecognizerBase {
    constructor(authentication, connectionFactory, audioSource, recognizerConfig, recognizer) {
        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);
        this.privSpeakerRecognizer = recognizer;
        this.privSpeakerAudioSource = audioSource;
        this.recognizeSpeaker = (model) => this.recognizeSpeakerOnce(model);
        this.sendPrePayloadJSONOverride = () => this.noOp();
    }
    processTypeSpecificMessages(connectionMessage) {
        let processed = false;
        const resultProps = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyCollection();
        if (connectionMessage.messageType === _common_Exports__WEBPACK_IMPORTED_MODULE_2__.MessageType.Text) {
            resultProps.setProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);
        }
        switch (connectionMessage.path.toLowerCase()) {
            case "speaker.response":
                const response = JSON.parse(connectionMessage.textBody);
                let result;
                if (response.status.statusCode.toLowerCase() !== "success") {
                    result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_4__.SpeakerRecognitionResult(response, _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.ResultReason.Canceled, _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__.CancellationErrorCode.ServiceError, response.status.reason);
                }
                else {
                    result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_4__.SpeakerRecognitionResult(response, _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.ResultReason.RecognizedSpeaker);
                }
                if (!!this.privResultDeferral) {
                    this.privResultDeferral.resolve(result);
                }
                processed = true;
                break;
            default:
                break;
        }
        const defferal = new _common_Exports__WEBPACK_IMPORTED_MODULE_7__.Deferred();
        defferal.resolve(processed);
        return defferal.promise;
    }
    // Cancels recognition.
    cancelRecognition(sessionId, requestId, cancellationReason, errorCode, error) {
        const properties = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyCollection();
        properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_8__.CancellationErrorCodePropertyName, _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__.CancellationErrorCode[errorCode]);
        if (!!this.privResultDeferral) {
            const result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_4__.SpeakerRecognitionResult({
                scenario: this.privSpeakerModel.scenario,
                status: { statusCode: error, reason: error }
            }, _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.ResultReason.Canceled, errorCode, error);
            try {
                this.privResultDeferral.resolve(result);
            }
            catch (error) {
                this.privResultDeferral.reject(error);
            }
        }
    }
    recognizeSpeakerOnce(model) {
        return __awaiter(this, void 0, void 0, function* () {
            this.privSpeakerModel = model;
            this.voiceProfileType = model.scenario;
            if (!this.privResultDeferral) {
                this.privResultDeferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_7__.Deferred();
            }
            this.privRequestSession.startNewRecognition();
            this.privRequestSession.listenForServiceTelemetry(this.privSpeakerAudioSource.events);
            this.privRecognizerConfig.parameters.setProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.Speech_SessionId, this.privRequestSession.sessionId);
            // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().
            const conPromise = this.connectImpl();
            const preAudioPromise = this.sendPreAudioMessages(this.extractSpeakerContext(model));
            const node = yield this.privSpeakerAudioSource.attach(this.privRequestSession.audioNodeId);
            const format = yield this.privSpeakerAudioSource.format;
            const deviceInfo = yield this.privSpeakerAudioSource.deviceInfo;
            const audioNode = new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_9__.ReplayableAudioNode(node, format.avgBytesPerSec);
            yield this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);
            this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };
            try {
                yield conPromise;
                yield preAudioPromise;
            }
            catch (err) {
                this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_10__.CancellationReason.Error, _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__.CancellationErrorCode.ConnectionFailure, err);
            }
            const sessionStartEventArgs = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_11__.SessionEventArgs(this.privRequestSession.sessionId);
            if (!!this.privRecognizer.sessionStarted) {
                this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);
            }
            void this.receiveMessage();
            const audioSendPromise = this.sendAudio(audioNode);
            // /* eslint-disable no-empty */
            audioSendPromise.then(() => { }, (error) => {
                this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_10__.CancellationReason.Error, _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__.CancellationErrorCode.RuntimeError, error);
            });
            return this.privResultDeferral.promise;
        });
    }
    sendPreAudioMessages(context) {
        return __awaiter(this, void 0, void 0, function* () {
            const connection = yield this.fetchConnection();
            yield this.sendSpeakerRecognition(connection, context);
            // await this.sendWaveHeader(connection);
        });
    }
    sendSpeakerRecognition(connection, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const speakerContextJson = JSON.stringify(context);
            return connection.send(new _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_12__.SpeechConnectionMessage(_common_Exports__WEBPACK_IMPORTED_MODULE_2__.MessageType.Text, "speaker.context", this.privRequestSession.requestId, "application/json; charset=utf-8", speakerContextJson));
        });
    }
    extractSpeakerContext(model) {
        return {
            features: {
                interimResult: "enabled",
                progressiveDetection: "disabled",
            },
            profileIds: model.profileIds,
            scenario: model.scenario,
        };
    }
}

//# sourceMappingURL=SpeakerServiceRecognizer.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechConnectionFactory.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechConnectionFactory.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeechConnectionFactory": () => (/* binding */ SpeechConnectionFactory)
/* harmony export */ });
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/WebsocketConnection.js");
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ProxyInfo.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/OutputFormat.js");
/* harmony import */ var _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ConnectionFactoryBase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ConnectionFactoryBase.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognizerConfig.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/WebsocketMessageFormatter.js");
/* harmony import */ var _HeaderNames__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./HeaderNames */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/HeaderNames.js");
/* harmony import */ var _QueryParameterNames__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./QueryParameterNames */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/QueryParameterNames.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.







class SpeechConnectionFactory extends _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_0__.ConnectionFactoryBase {
    constructor() {
        super(...arguments);
        this.interactiveRelativeUri = "/speech/recognition/interactive/cognitiveservices/v1";
        this.conversationRelativeUri = "/speech/recognition/conversation/cognitiveservices/v1";
        this.dictationRelativeUri = "/speech/recognition/dictation/cognitiveservices/v1";
        this.universalUri = "/speech/universal/v";
    }
    create(config, authInfo, connectionId) {
        let endpoint = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_Endpoint, undefined);
        const region = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_Region, undefined);
        const hostSuffix = _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_0__.ConnectionFactoryBase.getHostSuffix(region);
        const host = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_Host, "wss://" + region + ".stt.speech" + hostSuffix);
        const queryParams = {};
        const endpointId = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_EndpointId, undefined);
        const language = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_RecoLanguage, undefined);
        if (endpointId) {
            if (!endpoint || endpoint.search(_QueryParameterNames__WEBPACK_IMPORTED_MODULE_2__.QueryParameterNames.CustomSpeechDeploymentId) === -1) {
                queryParams[_QueryParameterNames__WEBPACK_IMPORTED_MODULE_2__.QueryParameterNames.CustomSpeechDeploymentId] = endpointId;
            }
        }
        else if (language) {
            if (!endpoint || endpoint.search(_QueryParameterNames__WEBPACK_IMPORTED_MODULE_2__.QueryParameterNames.Language) === -1) {
                queryParams[_QueryParameterNames__WEBPACK_IMPORTED_MODULE_2__.QueryParameterNames.Language] = language;
            }
        }
        if (!endpoint || endpoint.search(_QueryParameterNames__WEBPACK_IMPORTED_MODULE_2__.QueryParameterNames.Format) === -1) {
            queryParams[_QueryParameterNames__WEBPACK_IMPORTED_MODULE_2__.QueryParameterNames.Format] = config.parameters.getProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_3__.OutputFormatPropertyName, _sdk_Exports__WEBPACK_IMPORTED_MODULE_4__.OutputFormat[_sdk_Exports__WEBPACK_IMPORTED_MODULE_4__.OutputFormat.Simple]).toLowerCase();
        }
        if (config.autoDetectSourceLanguages !== undefined) {
            queryParams[_QueryParameterNames__WEBPACK_IMPORTED_MODULE_2__.QueryParameterNames.EnableLanguageId] = "true";
        }
        this.setCommonUrlParams(config, queryParams, endpoint);
        if (!endpoint) {
            switch (config.recognitionMode) {
                case _Exports__WEBPACK_IMPORTED_MODULE_5__.RecognitionMode.Conversation:
                    if (config.parameters.getProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_3__.ForceDictationPropertyName, "false") === "true") {
                        endpoint = host + this.dictationRelativeUri;
                    }
                    else {
                        if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {
                            endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;
                        }
                        else {
                            endpoint = host + this.conversationRelativeUri;
                        }
                    }
                    break;
                case _Exports__WEBPACK_IMPORTED_MODULE_5__.RecognitionMode.Dictation:
                    endpoint = host + this.dictationRelativeUri;
                    break;
                default:
                    if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {
                        endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;
                    }
                    else {
                        endpoint = host + this.interactiveRelativeUri; // default is interactive
                    }
                    break;
            }
        }
        const headers = {};
        if (authInfo.token !== undefined && authInfo.token !== "") {
            headers[authInfo.headerName] = authInfo.token;
        }
        headers[_HeaderNames__WEBPACK_IMPORTED_MODULE_6__.HeaderNames.ConnectionId] = connectionId;
        const enableCompression = config.parameters.getProperty("SPEECH-EnableWebsocketCompression", "false") === "true";
        const webSocketConnection = new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_7__.WebsocketConnection(endpoint, queryParams, headers, new _Exports__WEBPACK_IMPORTED_MODULE_8__.WebsocketMessageFormatter(), _common_browser_Exports__WEBPACK_IMPORTED_MODULE_9__.ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);
        // Set the value of SpeechServiceConnection_Url to webSocketConnection.uri (and not to `endpoint`), since this value is the final
        // URI that was used to make the connection (including query parameters).
        const uri = webSocketConnection.uri;
        config.parameters.setProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_Url, uri);
        return webSocketConnection;
    }
}

//# sourceMappingURL=SpeechConnectionFactory.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechConnectionMessage.Internal.js":
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechConnectionMessage.Internal.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeechConnectionMessage": () => (/* binding */ SpeechConnectionMessage)
/* harmony export */ });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js");
/* harmony import */ var _HeaderNames__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./HeaderNames */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/HeaderNames.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


class SpeechConnectionMessage extends _common_Exports__WEBPACK_IMPORTED_MODULE_0__.ConnectionMessage {
    constructor(messageType, path, requestId, contentType, body, streamId, additionalHeaders, id) {
        if (!path) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_1__.ArgumentNullError("path");
        }
        if (!requestId) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_1__.ArgumentNullError("requestId");
        }
        const headers = {};
        headers[_HeaderNames__WEBPACK_IMPORTED_MODULE_2__.HeaderNames.Path] = path;
        headers[_HeaderNames__WEBPACK_IMPORTED_MODULE_2__.HeaderNames.RequestId] = requestId;
        headers[_HeaderNames__WEBPACK_IMPORTED_MODULE_2__.HeaderNames.RequestTimestamp] = new Date().toISOString();
        if (contentType) {
            headers[_HeaderNames__WEBPACK_IMPORTED_MODULE_2__.HeaderNames.ContentType] = contentType;
        }
        if (streamId) {
            headers[_HeaderNames__WEBPACK_IMPORTED_MODULE_2__.HeaderNames.RequestStreamId] = streamId;
        }
        if (additionalHeaders) {
            for (const headerName in additionalHeaders) {
                if (headerName) {
                    headers[headerName] = additionalHeaders[headerName];
                }
            }
        }
        if (id) {
            super(messageType, body, headers, id);
        }
        else {
            super(messageType, body, headers);
        }
        this.privPath = path;
        this.privRequestId = requestId;
        this.privContentType = contentType;
        this.privStreamId = streamId;
        this.privAdditionalHeaders = additionalHeaders;
    }
    get path() {
        return this.privPath;
    }
    get requestId() {
        return this.privRequestId;
    }
    get contentType() {
        return this.privContentType;
    }
    get streamId() {
        return this.privStreamId;
    }
    get additionalHeaders() {
        return this.privAdditionalHeaders;
    }
    static fromConnectionMessage(message) {
        let path = null;
        let requestId = null;
        let contentType = null;
        // let requestTimestamp = null;
        let streamId = null;
        const additionalHeaders = {};
        if (message.headers) {
            for (const headerName in message.headers) {
                if (headerName) {
                    if (headerName.toLowerCase() === _HeaderNames__WEBPACK_IMPORTED_MODULE_2__.HeaderNames.Path.toLowerCase()) {
                        path = message.headers[headerName];
                    }
                    else if (headerName.toLowerCase() === _HeaderNames__WEBPACK_IMPORTED_MODULE_2__.HeaderNames.RequestId.toLowerCase()) {
                        requestId = message.headers[headerName];
                        // } else if (headerName.toLowerCase() === HeaderNames.RequestTimestamp.toLowerCase()) {
                        //  requestTimestamp = message.headers[headerName];
                    }
                    else if (headerName.toLowerCase() === _HeaderNames__WEBPACK_IMPORTED_MODULE_2__.HeaderNames.ContentType.toLowerCase()) {
                        contentType = message.headers[headerName];
                    }
                    else if (headerName.toLowerCase() === _HeaderNames__WEBPACK_IMPORTED_MODULE_2__.HeaderNames.RequestStreamId.toLowerCase()) {
                        streamId = message.headers[headerName];
                    }
                    else {
                        additionalHeaders[headerName] = message.headers[headerName];
                    }
                }
            }
        }
        return new SpeechConnectionMessage(message.messageType, path, requestId, contentType, message.body, streamId, additionalHeaders, message.id);
    }
}

//# sourceMappingURL=SpeechConnectionMessage.Internal.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechContext.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechContext.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeechContext": () => (/* binding */ SpeechContext)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Represents the JSON used in the speech.context message sent to the speech service.
 * The dynamic grammar is always refreshed from the encapsulated dynamic grammar object.
 */
class SpeechContext {
    constructor(dynamicGrammar) {
        this.privContext = {};
        this.privDynamicGrammar = dynamicGrammar;
    }
    /**
     * Gets a section of the speech.context object.
     * @param sectionName Name of the section to get.
     * @return string or Context JSON serializable object that represents the value.
     */
    getSection(sectionName) {
        return (this.privContext[sectionName] || {});
    }
    /**
     * Adds a section to the speech.context object.
     * @param sectionName Name of the section to add.
     * @param value JSON serializable object that represents the value.
     */
    setSection(sectionName, value) {
        this.privContext[sectionName] = value;
    }
    /**
     * @Internal
     * This is only used by pronunciation assessment config.
     * Do not use externally, object returned will change without warning or notice.
     */
    setPronunciationAssessmentParams(params) {
        if (this.privContext.phraseDetection === undefined) {
            this.privContext.phraseDetection = {
                enrichment: {
                    pronunciationAssessment: {}
                }
            };
        }
        this.privContext.phraseDetection.enrichment.pronunciationAssessment = JSON.parse(params);
        this.setWordLevelTimings();
        this.privContext.phraseOutput.detailed.options.push("PronunciationAssessment");
        if (this.privContext.phraseOutput.detailed.options.indexOf("SNR") === -1) {
            this.privContext.phraseOutput.detailed.options.push("SNR");
        }
    }
    setWordLevelTimings() {
        if (this.privContext.phraseOutput === undefined) {
            this.privContext.phraseOutput = {
                detailed: {
                    options: []
                },
                format: {}
            };
        }
        if (this.privContext.phraseOutput.detailed === undefined) {
            this.privContext.phraseOutput.detailed = {
                options: []
            };
        }
        this.privContext.phraseOutput.format = "Detailed";
        if (this.privContext.phraseOutput.detailed.options.indexOf("WordTimings") === -1) {
            this.privContext.phraseOutput.detailed.options.push("WordTimings");
        }
    }
    toJSON() {
        const dgi = this.privDynamicGrammar.generateGrammarObject();
        this.setSection("dgi", dgi);
        const ret = JSON.stringify(this.privContext);
        return ret;
    }
}

//# sourceMappingURL=SpeechContext.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechServiceInterfaces.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechServiceInterfaces.js ***!
  \*************************************************************************************************************************/
/***/ (() => {

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

//# sourceMappingURL=SpeechServiceInterfaces.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechServiceRecognizer.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechServiceRecognizer.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeechServiceRecognizer": () => (/* binding */ SpeechServiceRecognizer)
/* harmony export */ });
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionResult.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ResultReason.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionEventArgs.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/OutputFormat.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationErrorCodes.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionCanceledEventArgs.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceRecognizerBase.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SpeechHypothesis.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SimpleSpeechPhrase.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/EnumTranslation.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/Enums.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/DetailedSpeechPhrase.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


// eslint-disable-next-line max-classes-per-file
class SpeechServiceRecognizer extends _Exports__WEBPACK_IMPORTED_MODULE_0__.ServiceRecognizerBase {
    constructor(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer) {
        super(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer);
        this.privSpeechRecognizer = speechRecognizer;
    }
    processTypeSpecificMessages(connectionMessage) {
        return __awaiter(this, void 0, void 0, function* () {
            let result;
            const resultProps = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyCollection();
            resultProps.setProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);
            let processed = false;
            switch (connectionMessage.path.toLowerCase()) {
                case "speech.hypothesis":
                case "speech.fragment":
                    const hypothesis = _Exports__WEBPACK_IMPORTED_MODULE_3__.SpeechHypothesis.fromJSON(connectionMessage.textBody);
                    const offset = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;
                    result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_4__.SpeechRecognitionResult(this.privRequestSession.requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.ResultReason.RecognizingSpeech, hypothesis.Text, hypothesis.Duration, offset, hypothesis.Language, hypothesis.LanguageDetectionConfidence, undefined, // Speaker Id
                    undefined, connectionMessage.textBody, resultProps);
                    this.privRequestSession.onHypothesis(offset);
                    const ev = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__.SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);
                    if (!!this.privSpeechRecognizer.recognizing) {
                        try {
                            this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer, ev);
                            /* eslint-disable no-empty */
                        }
                        catch (error) {
                            // Not going to let errors in the event handler
                            // trip things up.
                        }
                    }
                    processed = true;
                    break;
                case "speech.phrase":
                    const simple = _Exports__WEBPACK_IMPORTED_MODULE_7__.SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);
                    const resultReason = _Exports__WEBPACK_IMPORTED_MODULE_8__.EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);
                    this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);
                    if (_sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.ResultReason.Canceled === resultReason) {
                        const cancelReason = _Exports__WEBPACK_IMPORTED_MODULE_8__.EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);
                        const cancellationErrorCode = _Exports__WEBPACK_IMPORTED_MODULE_8__.EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);
                        yield this.cancelRecognitionLocal(cancelReason, cancellationErrorCode, _Exports__WEBPACK_IMPORTED_MODULE_8__.EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));
                    }
                    else {
                        if (!(this.privRequestSession.isSpeechEnded && resultReason === _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.ResultReason.NoMatch && simple.RecognitionStatus !== _Exports__WEBPACK_IMPORTED_MODULE_9__.RecognitionStatus.InitialSilenceTimeout)) {
                            if (this.privRecognizerConfig.parameters.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_10__.OutputFormatPropertyName) === _sdk_Exports__WEBPACK_IMPORTED_MODULE_11__.OutputFormat[_sdk_Exports__WEBPACK_IMPORTED_MODULE_11__.OutputFormat.Simple]) {
                                result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_4__.SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, simple.DisplayText, simple.Duration, simple.Offset + this.privRequestSession.currentTurnAudioOffset, simple.Language, simple.LanguageDetectionConfidence, undefined, // Speaker Id
                                undefined, connectionMessage.textBody, resultProps);
                            }
                            else {
                                const detailed = _Exports__WEBPACK_IMPORTED_MODULE_12__.DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);
                                const totalOffset = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;
                                const offsetCorrectedJson = detailed.getJsonWithCorrectedOffsets(totalOffset);
                                result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_4__.SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, detailed.RecognitionStatus === _Exports__WEBPACK_IMPORTED_MODULE_9__.RecognitionStatus.Success ? detailed.NBest[0].Display : undefined, detailed.Duration, totalOffset, detailed.Language, detailed.LanguageDetectionConfidence, undefined, // Speaker Id
                                undefined, offsetCorrectedJson, resultProps);
                            }
                            const event = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__.SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);
                            if (!!this.privSpeechRecognizer.recognized) {
                                try {
                                    this.privSpeechRecognizer.recognized(this.privSpeechRecognizer, event);
                                    /* eslint-disable no-empty */
                                }
                                catch (error) {
                                    // Not going to let errors in the event handler
                                    // trip things up.
                                }
                            }
                        }
                        if (!!this.privSuccessCallback) {
                            try {
                                this.privSuccessCallback(result);
                            }
                            catch (e) {
                                if (!!this.privErrorCallback) {
                                    this.privErrorCallback(e);
                                }
                            }
                            // Only invoke the call back once.
                            // and if it's successful don't invoke the
                            // error after that.
                            this.privSuccessCallback = undefined;
                            this.privErrorCallback = undefined;
                        }
                    }
                    processed = true;
                    break;
                default:
                    break;
            }
            return processed;
        });
    }
    // Cancels recognition.
    cancelRecognition(sessionId, requestId, cancellationReason, errorCode, error) {
        const properties = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyCollection();
        properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_10__.CancellationErrorCodePropertyName, _sdk_Exports__WEBPACK_IMPORTED_MODULE_13__.CancellationErrorCode[errorCode]);
        if (!!this.privSpeechRecognizer.canceled) {
            const cancelEvent = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_14__.SpeechRecognitionCanceledEventArgs(cancellationReason, error, errorCode, undefined, sessionId);
            try {
                this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);
                /* eslint-disable no-empty */
            }
            catch (_a) { }
        }
        if (!!this.privSuccessCallback) {
            const result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_4__.SpeechRecognitionResult(requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.ResultReason.Canceled, undefined, // Text
            undefined, // Duration
            undefined, // Offset
            undefined, // Language
            undefined, // Language Detection Confidence
            undefined, // Speaker Id
            error, undefined, // Json
            properties);
            try {
                this.privSuccessCallback(result);
                this.privSuccessCallback = undefined;
                /* eslint-disable no-empty */
            }
            catch (_b) { }
        }
    }
}

//# sourceMappingURL=SpeechServiceRecognizer.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechSynthesisConnectionFactory.js":
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechSynthesisConnectionFactory.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeechSynthesisConnectionFactory": () => (/* binding */ SpeechSynthesisConnectionFactory)
/* harmony export */ });
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/WebsocketConnection.js");
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ProxyInfo.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ConnectionFactoryBase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ConnectionFactoryBase.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/WebsocketMessageFormatter.js");
/* harmony import */ var _HeaderNames__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./HeaderNames */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/HeaderNames.js");
/* harmony import */ var _QueryParameterNames__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./QueryParameterNames */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/QueryParameterNames.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.






class SpeechSynthesisConnectionFactory {
    constructor() {
        this.synthesisUri = "/cognitiveservices/websocket/v1";
    }
    create(config, authInfo, connectionId) {
        let endpoint = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyId.SpeechServiceConnection_Endpoint, undefined);
        const region = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyId.SpeechServiceConnection_Region, undefined);
        const hostSuffix = _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_1__.ConnectionFactoryBase.getHostSuffix(region);
        const endpointId = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyId.SpeechServiceConnection_EndpointId, undefined);
        const hostPrefix = (endpointId === undefined) ? "tts" : "voice";
        const host = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyId.SpeechServiceConnection_Host, "wss://" + region + "." + hostPrefix + ".speech" + hostSuffix);
        const queryParams = {};
        if (!endpoint) {
            endpoint = host + this.synthesisUri;
        }
        const headers = {};
        if (authInfo.token !== undefined && authInfo.token !== "") {
            headers[authInfo.headerName] = authInfo.token;
        }
        headers[_HeaderNames__WEBPACK_IMPORTED_MODULE_2__.HeaderNames.ConnectionId] = connectionId;
        if (endpointId !== undefined) {
            headers[_QueryParameterNames__WEBPACK_IMPORTED_MODULE_3__.QueryParameterNames.CustomVoiceDeploymentId] = endpointId;
        }
        config.parameters.setProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyId.SpeechServiceConnection_Url, endpoint);
        const enableCompression = config.parameters.getProperty("SPEECH-EnableWebsocketCompression", "false") === "true";
        return new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_4__.WebsocketConnection(endpoint, queryParams, headers, new _Exports__WEBPACK_IMPORTED_MODULE_5__.WebsocketMessageFormatter(), _common_browser_Exports__WEBPACK_IMPORTED_MODULE_6__.ProxyInfo.fromParameters(config.parameters), enableCompression, connectionId);
    }
}

//# sourceMappingURL=SpeechSynthesisConnectionFactory.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisAdapterBase.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisAdapterBase.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SynthesisAdapterBase": () => (/* binding */ SynthesisAdapterBase)
/* harmony export */ });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/EventSource.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionEvents.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/IConnection.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationReason.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationErrorCodes.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisEventArgs.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisResult.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ResultReason.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisWordBoundaryEventArgs.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisBookmarkEventArgs.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisVisemeEventArgs.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisTurn.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisContext.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/AgentConfig.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SynthesisAudioMetadata.js");
/* harmony import */ var _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./SpeechConnectionMessage.Internal */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechConnectionMessage.Internal.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class SynthesisAdapterBase {
    constructor(authentication, connectionFactory, synthesizerConfig, speechSynthesizer, audioDestination) {
        this.speakOverride = undefined;
        this.receiveMessageOverride = undefined;
        this.connectImplOverride = undefined;
        this.configConnectionOverride = undefined;
        // A promise for a configured connection.
        // Do not consume directly, call fetchConnection instead.
        this.privConnectionConfigurationPromise = undefined;
        if (!authentication) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_0__.ArgumentNullError("authentication");
        }
        if (!connectionFactory) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_0__.ArgumentNullError("connectionFactory");
        }
        if (!synthesizerConfig) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_0__.ArgumentNullError("synthesizerConfig");
        }
        this.privAuthentication = authentication;
        this.privConnectionFactory = connectionFactory;
        this.privSynthesizerConfig = synthesizerConfig;
        this.privIsDisposed = false;
        this.privSpeechSynthesizer = speechSynthesizer;
        this.privSessionAudioDestination = audioDestination;
        this.privSynthesisTurn = new _Exports__WEBPACK_IMPORTED_MODULE_1__.SynthesisTurn();
        this.privConnectionEvents = new _common_Exports__WEBPACK_IMPORTED_MODULE_2__.EventSource();
        this.privServiceEvents = new _common_Exports__WEBPACK_IMPORTED_MODULE_2__.EventSource();
        this.privSynthesisContext = new _Exports__WEBPACK_IMPORTED_MODULE_3__.SynthesisContext(this.privSpeechSynthesizer);
        this.privAgentConfig = new _Exports__WEBPACK_IMPORTED_MODULE_4__.AgentConfig();
        this.connectionEvents.attach((connectionEvent) => {
            if (connectionEvent.name === "ConnectionClosedEvent") {
                const connectionClosedEvent = connectionEvent;
                if (connectionClosedEvent.statusCode !== 1000) {
                    this.cancelSynthesisLocal(_sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.CancellationReason.Error, connectionClosedEvent.statusCode === 1007 ? _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__.CancellationErrorCode.BadRequestParameters : _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__.CancellationErrorCode.ConnectionFailure, `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);
                }
            }
        });
    }
    get synthesisContext() {
        return this.privSynthesisContext;
    }
    get agentConfig() {
        return this.privAgentConfig;
    }
    get connectionEvents() {
        return this.privConnectionEvents;
    }
    get serviceEvents() {
        return this.privServiceEvents;
    }
    set activityTemplate(messagePayload) {
        this.privActivityTemplate = messagePayload;
    }
    get activityTemplate() {
        return this.privActivityTemplate;
    }
    set audioOutputFormat(format) {
        this.privAudioOutputFormat = format;
        this.privSynthesisTurn.audioOutputFormat = format;
        if (this.privSessionAudioDestination !== undefined) {
            this.privSessionAudioDestination.format = format;
        }
        if (this.synthesisContext !== undefined) {
            this.synthesisContext.audioOutputFormat = format;
        }
    }
    static addHeader(audio, format) {
        if (!format.hasHeader) {
            return audio;
        }
        format.updateHeader(audio.byteLength);
        const tmp = new Uint8Array(audio.byteLength + format.header.byteLength);
        tmp.set(new Uint8Array(format.header), 0);
        tmp.set(new Uint8Array(audio), format.header.byteLength);
        return tmp.buffer;
    }
    isDisposed() {
        return this.privIsDisposed;
    }
    dispose(reason) {
        return __awaiter(this, void 0, void 0, function* () {
            this.privIsDisposed = true;
            if (this.privSessionAudioDestination !== undefined) {
                this.privSessionAudioDestination.close();
            }
            if (this.privConnectionConfigurationPromise !== undefined) {
                const connection = yield this.privConnectionConfigurationPromise;
                yield connection.dispose(reason);
            }
        });
    }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.connectImpl();
        });
    }
    sendNetworkMessage(path, payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const type = typeof payload === "string" ? _common_Exports__WEBPACK_IMPORTED_MODULE_7__.MessageType.Text : _common_Exports__WEBPACK_IMPORTED_MODULE_7__.MessageType.Binary;
            const contentType = typeof payload === "string" ? "application/json" : "";
            const connection = yield this.fetchConnection();
            return connection.send(new _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_8__.SpeechConnectionMessage(type, path, this.privSynthesisTurn.requestId, contentType, payload));
        });
    }
    Speak(text, isSSML, requestId, successCallback, errorCallBack, audioDestination) {
        return __awaiter(this, void 0, void 0, function* () {
            let ssml;
            if (isSSML) {
                ssml = text;
            }
            else {
                ssml = this.privSpeechSynthesizer.buildSsml(text);
            }
            if (this.speakOverride !== undefined) {
                return this.speakOverride(ssml, requestId, successCallback, errorCallBack);
            }
            this.privSuccessCallback = successCallback;
            this.privErrorCallback = errorCallBack;
            this.privSynthesisTurn.startNewSynthesis(requestId, text, isSSML, audioDestination);
            try {
                yield this.connectImpl();
                const connection = yield this.fetchConnection();
                yield this.sendSynthesisContext(connection);
                yield this.sendSsmlMessage(connection, ssml, requestId);
                const synthesisStartEventArgs = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_9__.SpeechSynthesisEventArgs(new _sdk_Exports__WEBPACK_IMPORTED_MODULE_10__.SpeechSynthesisResult(requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_11__.ResultReason.SynthesizingAudioStarted));
                if (!!this.privSpeechSynthesizer.synthesisStarted) {
                    this.privSpeechSynthesizer.synthesisStarted(this.privSpeechSynthesizer, synthesisStartEventArgs);
                }
                void this.receiveMessage();
            }
            catch (e) {
                this.cancelSynthesisLocal(_sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.CancellationReason.Error, _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__.CancellationErrorCode.ConnectionFailure, e);
                return Promise.reject(e);
            }
        });
    }
    // Cancels synthesis.
    cancelSynthesis(requestId, cancellationReason, errorCode, error) {
        const properties = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_12__.PropertyCollection();
        properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_13__.CancellationErrorCodePropertyName, _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__.CancellationErrorCode[errorCode]);
        const result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_10__.SpeechSynthesisResult(requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_11__.ResultReason.Canceled, undefined, error, properties);
        if (!!this.privSpeechSynthesizer.SynthesisCanceled) {
            const cancelEvent = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_9__.SpeechSynthesisEventArgs(result);
            try {
                this.privSpeechSynthesizer.SynthesisCanceled(this.privSpeechSynthesizer, cancelEvent);
                /* eslint-disable no-empty */
            }
            catch (_a) { }
        }
        if (!!this.privSuccessCallback) {
            try {
                this.privSuccessCallback(result);
                /* eslint-disable no-empty */
            }
            catch (_b) { }
        }
    }
    // Cancels synthesis.
    cancelSynthesisLocal(cancellationReason, errorCode, error) {
        if (!!this.privSynthesisTurn.isSynthesizing) {
            this.privSynthesisTurn.onStopSynthesizing();
            this.cancelSynthesis(this.privSynthesisTurn.requestId, cancellationReason, errorCode, error);
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    processTypeSpecificMessages(connectionMessage) {
        return true;
    }
    receiveMessage() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const connection = yield this.fetchConnection();
                const message = yield connection.read();
                if (this.receiveMessageOverride !== undefined) {
                    return this.receiveMessageOverride();
                }
                if (this.privIsDisposed) {
                    // We're done.
                    return;
                }
                // indicates we are draining the queue and it came with no message;
                if (!message) {
                    if (!this.privSynthesisTurn.isSynthesizing) {
                        return;
                    }
                    else {
                        return this.receiveMessage();
                    }
                }
                const connectionMessage = _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_8__.SpeechConnectionMessage.fromConnectionMessage(message);
                if (connectionMessage.requestId.toLowerCase() === this.privSynthesisTurn.requestId.toLowerCase()) {
                    switch (connectionMessage.path.toLowerCase()) {
                        case "turn.start":
                            this.privSynthesisTurn.onServiceTurnStartResponse();
                            break;
                        case "response":
                            this.privSynthesisTurn.onServiceResponseMessage(connectionMessage.textBody);
                            break;
                        case "audio":
                            if (this.privSynthesisTurn.streamId.toLowerCase() === connectionMessage.streamId.toLowerCase()
                                && !!connectionMessage.binaryBody) {
                                this.privSynthesisTurn.onAudioChunkReceived(connectionMessage.binaryBody);
                                if (!!this.privSpeechSynthesizer.synthesizing) {
                                    try {
                                        const audioWithHeader = SynthesisAdapterBase.addHeader(connectionMessage.binaryBody, this.privSynthesisTurn.audioOutputFormat);
                                        const ev = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_9__.SpeechSynthesisEventArgs(new _sdk_Exports__WEBPACK_IMPORTED_MODULE_10__.SpeechSynthesisResult(this.privSynthesisTurn.requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_11__.ResultReason.SynthesizingAudio, audioWithHeader));
                                        this.privSpeechSynthesizer.synthesizing(this.privSpeechSynthesizer, ev);
                                    }
                                    catch (error) {
                                        // Not going to let errors in the event handler
                                        // trip things up.
                                    }
                                }
                                if (this.privSessionAudioDestination !== undefined) {
                                    this.privSessionAudioDestination.write(connectionMessage.binaryBody);
                                }
                            }
                            break;
                        case "audio.metadata":
                            const metadataList = _Exports__WEBPACK_IMPORTED_MODULE_14__.SynthesisAudioMetadata.fromJSON(connectionMessage.textBody).Metadata;
                            for (const metadata of metadataList) {
                                switch (metadata.Type) {
                                    case _Exports__WEBPACK_IMPORTED_MODULE_14__.MetadataType.WordBoundary:
                                    case _Exports__WEBPACK_IMPORTED_MODULE_14__.MetadataType.SentenceBoundary:
                                        this.privSynthesisTurn.onTextBoundaryEvent(metadata);
                                        const wordBoundaryEventArgs = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_15__.SpeechSynthesisWordBoundaryEventArgs(metadata.Data.Offset, metadata.Data.Duration, metadata.Data.text.Text, metadata.Data.text.Length, metadata.Type === _Exports__WEBPACK_IMPORTED_MODULE_14__.MetadataType.WordBoundary
                                            ? this.privSynthesisTurn.currentTextOffset : this.privSynthesisTurn.currentSentenceOffset, metadata.Data.text.BoundaryType);
                                        if (!!this.privSpeechSynthesizer.wordBoundary) {
                                            try {
                                                this.privSpeechSynthesizer.wordBoundary(this.privSpeechSynthesizer, wordBoundaryEventArgs);
                                            }
                                            catch (error) {
                                                // Not going to let errors in the event handler
                                                // trip things up.
                                            }
                                        }
                                        break;
                                    case _Exports__WEBPACK_IMPORTED_MODULE_14__.MetadataType.Bookmark:
                                        const bookmarkEventArgs = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_16__.SpeechSynthesisBookmarkEventArgs(metadata.Data.Offset, metadata.Data.Bookmark);
                                        if (!!this.privSpeechSynthesizer.bookmarkReached) {
                                            try {
                                                this.privSpeechSynthesizer.bookmarkReached(this.privSpeechSynthesizer, bookmarkEventArgs);
                                            }
                                            catch (error) {
                                                // Not going to let errors in the event handler
                                                // trip things up.
                                            }
                                        }
                                        break;
                                    case _Exports__WEBPACK_IMPORTED_MODULE_14__.MetadataType.Viseme:
                                        this.privSynthesisTurn.onVisemeMetadataReceived(metadata);
                                        if (metadata.Data.IsLastAnimation) {
                                            const visemeEventArgs = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_17__.SpeechSynthesisVisemeEventArgs(metadata.Data.Offset, metadata.Data.VisemeId, this.privSynthesisTurn.getAndClearVisemeAnimation());
                                            if (!!this.privSpeechSynthesizer.visemeReceived) {
                                                try {
                                                    this.privSpeechSynthesizer.visemeReceived(this.privSpeechSynthesizer, visemeEventArgs);
                                                }
                                                catch (error) {
                                                    // Not going to let errors in the event handler
                                                    // trip things up.
                                                }
                                            }
                                        }
                                        break;
                                    case _Exports__WEBPACK_IMPORTED_MODULE_14__.MetadataType.SessionEnd:
                                        this.privSynthesisTurn.onSessionEnd(metadata);
                                        break;
                                }
                            }
                            break;
                        case "turn.end":
                            this.privSynthesisTurn.onServiceTurnEndResponse();
                            let result;
                            try {
                                const audioBuffer = yield this.privSynthesisTurn.getAllReceivedAudioWithHeader();
                                result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_10__.SpeechSynthesisResult(this.privSynthesisTurn.requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_11__.ResultReason.SynthesizingAudioCompleted, audioBuffer, undefined, undefined, this.privSynthesisTurn.audioDuration);
                                if (!!this.privSuccessCallback) {
                                    this.privSuccessCallback(result);
                                }
                            }
                            catch (error) {
                                if (!!this.privErrorCallback) {
                                    this.privErrorCallback(error);
                                }
                            }
                            if (this.privSpeechSynthesizer.synthesisCompleted) {
                                try {
                                    this.privSpeechSynthesizer.synthesisCompleted(this.privSpeechSynthesizer, new _sdk_Exports__WEBPACK_IMPORTED_MODULE_9__.SpeechSynthesisEventArgs(result));
                                }
                                catch (e) {
                                    // Not going to let errors in the event handler
                                    // trip things up.
                                }
                            }
                            break;
                        default:
                            if (!this.processTypeSpecificMessages(connectionMessage)) {
                                // here are some messages that the derived class has not processed, dispatch them to connect class
                                if (!!this.privServiceEvents) {
                                    this.serviceEvents.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_18__.ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));
                                }
                            }
                    }
                }
                return this.receiveMessage();
            }
            catch (e) {
                // TODO: What goes here?
            }
        });
    }
    sendSynthesisContext(connection) {
        const synthesisContextJson = this.synthesisContext.toJSON();
        if (synthesisContextJson) {
            return connection.send(new _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_8__.SpeechConnectionMessage(_common_Exports__WEBPACK_IMPORTED_MODULE_7__.MessageType.Text, "synthesis.context", this.privSynthesisTurn.requestId, "application/json", synthesisContextJson));
        }
        return;
    }
    connectImpl(isUnAuthorized = false) {
        if (this.privConnectionPromise != null) {
            return this.privConnectionPromise.then((connection) => {
                if (connection.state() === _common_Exports__WEBPACK_IMPORTED_MODULE_19__.ConnectionState.Disconnected) {
                    this.privConnectionId = null;
                    this.privConnectionPromise = null;
                    return this.connectImpl();
                }
                return this.privConnectionPromise;
            }, () => {
                this.privConnectionId = null;
                this.privConnectionPromise = null;
                return this.connectImpl();
            });
        }
        this.privAuthFetchEventId = (0,_common_Exports__WEBPACK_IMPORTED_MODULE_20__.createNoDashGuid)();
        this.privConnectionId = (0,_common_Exports__WEBPACK_IMPORTED_MODULE_20__.createNoDashGuid)();
        this.privSynthesisTurn.onPreConnectionStart(this.privAuthFetchEventId);
        const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);
        this.privConnectionPromise = authPromise.then((result) => __awaiter(this, void 0, void 0, function* () {
            this.privSynthesisTurn.onAuthCompleted(false);
            const connection = this.privConnectionFactory.create(this.privSynthesizerConfig, result, this.privConnectionId);
            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,
            // it'll stop sending events.
            connection.events.attach((event) => {
                this.connectionEvents.onEvent(event);
            });
            const response = yield connection.open();
            if (response.statusCode === 200) {
                this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);
                return Promise.resolve(connection);
            }
            else if (response.statusCode === 403 && !isUnAuthorized) {
                return this.connectImpl(true);
            }
            else {
                this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);
                return Promise.reject(`Unable to contact server. StatusCode: ${response.statusCode}, ${this.privSynthesizerConfig.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_21__.PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${response.reason}`);
            }
        }), (error) => {
            this.privSynthesisTurn.onAuthCompleted(true);
            throw new Error(error);
        });
        // Attach an empty handler to allow the promise to run in the background while
        // other startup events happen. It'll eventually be awaited on.
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        this.privConnectionPromise.catch(() => { });
        return this.privConnectionPromise;
    }
    sendSpeechServiceConfig(connection, SpeechServiceConfigJson) {
        if (SpeechServiceConfigJson) {
            return connection.send(new _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_8__.SpeechConnectionMessage(_common_Exports__WEBPACK_IMPORTED_MODULE_7__.MessageType.Text, "speech.config", this.privSynthesisTurn.requestId, "application/json", SpeechServiceConfigJson));
        }
    }
    sendSsmlMessage(connection, ssml, requestId) {
        return connection.send(new _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_8__.SpeechConnectionMessage(_common_Exports__WEBPACK_IMPORTED_MODULE_7__.MessageType.Text, "ssml", requestId, "application/ssml+xml", ssml));
    }
    fetchConnection() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.privConnectionConfigurationPromise !== undefined) {
                return this.privConnectionConfigurationPromise.then((connection) => {
                    if (connection.state() === _common_Exports__WEBPACK_IMPORTED_MODULE_19__.ConnectionState.Disconnected) {
                        this.privConnectionId = null;
                        this.privConnectionConfigurationPromise = undefined;
                        return this.fetchConnection();
                    }
                    return this.privConnectionConfigurationPromise;
                }, () => {
                    this.privConnectionId = null;
                    this.privConnectionConfigurationPromise = undefined;
                    return this.fetchConnection();
                });
            }
            this.privConnectionConfigurationPromise = this.configureConnection();
            return yield this.privConnectionConfigurationPromise;
        });
    }
    // Takes an established websocket connection to the endpoint and sends speech configuration information.
    configureConnection() {
        return __awaiter(this, void 0, void 0, function* () {
            const connection = yield this.connectImpl();
            if (this.configConnectionOverride !== undefined) {
                return this.configConnectionOverride(connection);
            }
            yield this.sendSpeechServiceConfig(connection, this.privSynthesizerConfig.SpeechServiceConfig.serialize());
            return connection;
        });
    }
}
SynthesisAdapterBase.telemetryDataEnabled = true;

//# sourceMappingURL=SynthesisAdapterBase.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisContext.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisContext.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SynthesisContext": () => (/* binding */ SynthesisContext)
/* harmony export */ });
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Represents the JSON used in the synthesis.context message sent to the speech service.
 * The dynamic grammar is always refreshed from the encapsulated dynamic grammar object.
 */
class SynthesisContext {
    constructor(speechSynthesizer) {
        this.privContext = {};
        this.privSpeechSynthesizer = speechSynthesizer;
    }
    /**
     * Adds a section to the synthesis.context object.
     * @param sectionName Name of the section to add.
     * @param value JSON serializable object that represents the value.
     */
    setSection(sectionName, value) {
        this.privContext[sectionName] = value;
    }
    /**
     * Sets the audio output format for synthesis context generation.
     * @param format {AudioOutputFormatImpl} the output format
     */
    set audioOutputFormat(format) {
        this.privAudioOutputFormat = format;
    }
    toJSON() {
        const synthesisSection = this.buildSynthesisContext();
        this.setSection("synthesis", synthesisSection);
        return JSON.stringify(this.privContext);
    }
    buildSynthesisContext() {
        return {
            audio: {
                metadataOptions: {
                    bookmarkEnabled: (!!this.privSpeechSynthesizer.bookmarkReached),
                    punctuationBoundaryEnabled: this.privSpeechSynthesizer.properties.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyId.SpeechServiceResponse_RequestPunctuationBoundary, (!!this.privSpeechSynthesizer.wordBoundary)),
                    sentenceBoundaryEnabled: this.privSpeechSynthesizer.properties.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyId.SpeechServiceResponse_RequestSentenceBoundary, false),
                    sessionEndEnabled: true,
                    visemeEnabled: (!!this.privSpeechSynthesizer.visemeReceived),
                    wordBoundaryEnabled: this.privSpeechSynthesizer.properties.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyId.SpeechServiceResponse_RequestWordBoundary, (!!this.privSpeechSynthesizer.wordBoundary)),
                },
                outputFormat: this.privAudioOutputFormat.requestAudioFormatString,
            },
            language: {
                autoDetection: this.privSpeechSynthesizer.autoDetectSourceLanguage
            }
        };
    }
}

//# sourceMappingURL=SynthesisContext.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisEvents.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisEvents.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConnectingToSynthesisServiceEvent": () => (/* binding */ ConnectingToSynthesisServiceEvent),
/* harmony export */   "SpeechSynthesisEvent": () => (/* binding */ SpeechSynthesisEvent),
/* harmony export */   "SynthesisStartedEvent": () => (/* binding */ SynthesisStartedEvent),
/* harmony export */   "SynthesisTriggeredEvent": () => (/* binding */ SynthesisTriggeredEvent)
/* harmony export */ });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/PlatformEvent.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/* eslint-disable max-classes-per-file */

class SpeechSynthesisEvent extends _common_Exports__WEBPACK_IMPORTED_MODULE_0__.PlatformEvent {
    constructor(eventName, requestId, eventType = _common_Exports__WEBPACK_IMPORTED_MODULE_0__.EventType.Info) {
        super(eventName, eventType);
        this.privRequestId = requestId;
    }
    get requestId() {
        return this.privRequestId;
    }
}
class SynthesisTriggeredEvent extends SpeechSynthesisEvent {
    constructor(requestId, sessionAudioDestinationId, turnAudioDestinationId) {
        super("SynthesisTriggeredEvent", requestId);
        this.privSessionAudioDestinationId = sessionAudioDestinationId;
        this.privTurnAudioDestinationId = turnAudioDestinationId;
    }
    get audioSessionDestinationId() {
        return this.privSessionAudioDestinationId;
    }
    get audioTurnDestinationId() {
        return this.privTurnAudioDestinationId;
    }
}
class ConnectingToSynthesisServiceEvent extends SpeechSynthesisEvent {
    constructor(requestId, authFetchEventId) {
        super("ConnectingToSynthesisServiceEvent", requestId);
        this.privAuthFetchEventId = authFetchEventId;
    }
    get authFetchEventId() {
        return this.privAuthFetchEventId;
    }
}
class SynthesisStartedEvent extends SpeechSynthesisEvent {
    constructor(requestId, authFetchEventId) {
        super("SynthesisStartedEvent", requestId);
        this.privAuthFetchEventId = authFetchEventId;
    }
    get authFetchEventId() {
        return this.privAuthFetchEventId;
    }
}

//# sourceMappingURL=SynthesisEvents.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisRestAdapter.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisRestAdapter.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SynthesisRestAdapter": () => (/* binding */ SynthesisRestAdapter)
/* harmony export */ });
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/RestConfigBase.js");
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/RestMessageAdapter.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ConnectionFactoryBase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ConnectionFactoryBase.js");
/* harmony import */ var _HeaderNames__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./HeaderNames */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/HeaderNames.js");




/**
 * Implements methods for speaker recognition classes, sending requests to endpoint
 * and parsing response into expected format
 * @class SynthesisRestAdapter
 */
class SynthesisRestAdapter {
    constructor(config, authentication) {
        let endpoint = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyId.SpeechServiceConnection_Endpoint, undefined);
        if (!endpoint) {
            const region = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyId.SpeechServiceConnection_Region, "westus");
            const hostSuffix = _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_1__.ConnectionFactoryBase.getHostSuffix(region);
            endpoint = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyId.SpeechServiceConnection_Host, `https://${region}.tts.speech${hostSuffix}`);
        }
        this.privUri = `${endpoint}/cognitiveservices/voices/list`;
        const options = _common_browser_Exports__WEBPACK_IMPORTED_MODULE_2__.RestConfigBase.requestOptions;
        this.privRestAdapter = new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_3__.RestMessageAdapter(options);
        this.privAuthentication = authentication;
    }
    /**
     * Sends list voices request to endpoint.
     * @function
     * @public
     * @param connectionId - guid for connectionId
     * @returns {Promise<IRestResponse>} rest response to status request
     */
    getVoicesList(connectionId) {
        this.privRestAdapter.setHeaders(_HeaderNames__WEBPACK_IMPORTED_MODULE_4__.HeaderNames.ConnectionId, connectionId);
        return this.privAuthentication.fetch(connectionId).then((authInfo) => {
            this.privRestAdapter.setHeaders(authInfo.headerName, authInfo.token);
            return this.privRestAdapter.request(_common_browser_Exports__WEBPACK_IMPORTED_MODULE_3__.RestRequestType.Get, this.privUri);
        });
    }
}

//# sourceMappingURL=SynthesisRestAdapter.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisTurn.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisTurn.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SynthesisTurn": () => (/* binding */ SynthesisTurn)
/* harmony export */ });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Events.js");
/* harmony import */ var _sdk_Audio_AudioOutputStream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../sdk/Audio/AudioOutputStream */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioOutputStream.js");
/* harmony import */ var _ServiceMessages_SynthesisAudioMetadata__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ServiceMessages/SynthesisAudioMetadata */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SynthesisAudioMetadata.js");
/* harmony import */ var _SynthesisAdapterBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SynthesisAdapterBase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisAdapterBase.js");
/* harmony import */ var _SynthesisEvents__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./SynthesisEvents */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisEvents.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class SynthesisTurn {
    constructor() {
        this.privIsDisposed = false;
        this.privIsSynthesizing = false;
        this.privIsSynthesisEnded = false;
        this.privBytesReceived = 0;
        this.privInTurn = false;
        this.privTextOffset = 0;
        this.privNextSearchTextIndex = 0;
        this.privSentenceOffset = 0;
        this.privNextSearchSentenceIndex = 0;
        this.privRequestId = (0,_common_Exports__WEBPACK_IMPORTED_MODULE_0__.createNoDashGuid)();
        this.privTurnDeferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_1__.Deferred();
        // We're not in a turn, so resolve.
        this.privTurnDeferral.resolve();
    }
    get requestId() {
        return this.privRequestId;
    }
    get streamId() {
        return this.privStreamId;
    }
    set streamId(value) {
        this.privStreamId = value;
    }
    get audioOutputFormat() {
        return this.privAudioOutputFormat;
    }
    set audioOutputFormat(format) {
        this.privAudioOutputFormat = format;
    }
    get turnCompletionPromise() {
        return this.privTurnDeferral.promise;
    }
    get isSynthesisEnded() {
        return this.privIsSynthesisEnded;
    }
    get isSynthesizing() {
        return this.privIsSynthesizing;
    }
    get currentTextOffset() {
        return this.privTextOffset;
    }
    get currentSentenceOffset() {
        return this.privSentenceOffset;
    }
    // The number of bytes received for current turn
    get bytesReceived() {
        return this.privBytesReceived;
    }
    get audioDuration() {
        return this.privAudioDuration;
    }
    getAllReceivedAudio() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!!this.privReceivedAudio) {
                return Promise.resolve(this.privReceivedAudio);
            }
            if (!this.privIsSynthesisEnded) {
                return null;
            }
            yield this.readAllAudioFromStream();
            return Promise.resolve(this.privReceivedAudio);
        });
    }
    getAllReceivedAudioWithHeader() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!!this.privReceivedAudioWithHeader) {
                return this.privReceivedAudioWithHeader;
            }
            if (!this.privIsSynthesisEnded) {
                return null;
            }
            if (this.audioOutputFormat.hasHeader) {
                const audio = yield this.getAllReceivedAudio();
                this.privReceivedAudioWithHeader = _SynthesisAdapterBase__WEBPACK_IMPORTED_MODULE_2__.SynthesisAdapterBase.addHeader(audio, this.audioOutputFormat);
                return this.privReceivedAudioWithHeader;
            }
            else {
                return this.getAllReceivedAudio();
            }
        });
    }
    startNewSynthesis(requestId, rawText, isSSML, audioDestination) {
        this.privIsSynthesisEnded = false;
        this.privIsSynthesizing = true;
        this.privRequestId = requestId;
        this.privRawText = rawText;
        this.privIsSSML = isSSML;
        this.privAudioOutputStream = new _sdk_Audio_AudioOutputStream__WEBPACK_IMPORTED_MODULE_3__.PullAudioOutputStreamImpl();
        this.privAudioOutputStream.format = this.privAudioOutputFormat;
        this.privReceivedAudio = null;
        this.privReceivedAudioWithHeader = null;
        this.privBytesReceived = 0;
        this.privTextOffset = 0;
        this.privNextSearchTextIndex = 0;
        this.privSentenceOffset = 0;
        this.privNextSearchSentenceIndex = 0;
        this.privPartialVisemeAnimation = "";
        if (audioDestination !== undefined) {
            this.privTurnAudioDestination = audioDestination;
            this.privTurnAudioDestination.format = this.privAudioOutputFormat;
        }
        this.onEvent(new _SynthesisEvents__WEBPACK_IMPORTED_MODULE_4__.SynthesisTriggeredEvent(this.requestId, undefined, audioDestination === undefined ? undefined : audioDestination.id()));
    }
    onPreConnectionStart(authFetchEventId) {
        this.privAuthFetchEventId = authFetchEventId;
        this.onEvent(new _SynthesisEvents__WEBPACK_IMPORTED_MODULE_4__.ConnectingToSynthesisServiceEvent(this.privRequestId, this.privAuthFetchEventId));
    }
    onAuthCompleted(isError) {
        if (isError) {
            this.onComplete();
        }
    }
    onConnectionEstablishCompleted(statusCode) {
        if (statusCode === 200) {
            this.onEvent(new _SynthesisEvents__WEBPACK_IMPORTED_MODULE_4__.SynthesisStartedEvent(this.requestId, this.privAuthFetchEventId));
            this.privBytesReceived = 0;
            return;
        }
        else if (statusCode === 403) {
            this.onComplete();
        }
    }
    onServiceResponseMessage(responseJson) {
        const response = JSON.parse(responseJson);
        this.streamId = response.audio.streamId;
    }
    onServiceTurnEndResponse() {
        this.privInTurn = false;
        this.privTurnDeferral.resolve();
        this.onComplete();
    }
    onServiceTurnStartResponse() {
        if (!!this.privTurnDeferral && !!this.privInTurn) {
            // What? How are we starting a turn with another not done?
            this.privTurnDeferral.reject("Another turn started before current completed.");
            // Avoid UnhandledPromiseRejection if privTurnDeferral is not being awaited
            // eslint-disable-next-line @typescript-eslint/no-empty-function
            this.privTurnDeferral.promise.then().catch(() => { });
        }
        this.privInTurn = true;
        this.privTurnDeferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_1__.Deferred();
    }
    onAudioChunkReceived(data) {
        if (this.isSynthesizing) {
            this.privAudioOutputStream.write(data);
            this.privBytesReceived += data.byteLength;
            if (this.privTurnAudioDestination !== undefined) {
                this.privTurnAudioDestination.write(data);
            }
        }
    }
    onTextBoundaryEvent(metadata) {
        this.updateTextOffset(metadata.Data.text.Text, metadata.Type);
    }
    onVisemeMetadataReceived(metadata) {
        if (metadata.Data.AnimationChunk !== undefined) {
            this.privPartialVisemeAnimation += metadata.Data.AnimationChunk;
        }
    }
    onSessionEnd(metadata) {
        this.privAudioDuration = metadata.Data.Offset;
    }
    dispose() {
        if (!this.privIsDisposed) {
            // we should have completed by now. If we did not its an unknown error.
            this.privIsDisposed = true;
        }
    }
    onStopSynthesizing() {
        this.onComplete();
    }
    /**
     * Gets the viseme animation string (merged from animation chunk), and clears the internal
     * partial animation.
     */
    getAndClearVisemeAnimation() {
        const animation = this.privPartialVisemeAnimation;
        this.privPartialVisemeAnimation = "";
        return animation;
    }
    onEvent(event) {
        _common_Exports__WEBPACK_IMPORTED_MODULE_5__.Events.instance.onEvent(event);
    }
    /**
     * Check if the text is an XML(SSML) tag
     * @param text
     * @private
     */
    static isXmlTag(text) {
        return text.length >= 2 && text[0] === "<" && text[text.length - 1] === ">";
    }
    updateTextOffset(text, type) {
        if (type === _ServiceMessages_SynthesisAudioMetadata__WEBPACK_IMPORTED_MODULE_6__.MetadataType.WordBoundary) {
            this.privTextOffset = this.privRawText.indexOf(text, this.privNextSearchTextIndex);
            if (this.privTextOffset >= 0) {
                this.privNextSearchTextIndex = this.privTextOffset + text.length;
                if (this.privIsSSML) {
                    if (this.withinXmlTag(this.privTextOffset) && !SynthesisTurn.isXmlTag(text)) {
                        this.updateTextOffset(text, type);
                    }
                }
            }
        }
        else {
            this.privSentenceOffset = this.privRawText.indexOf(text, this.privNextSearchSentenceIndex);
            if (this.privSentenceOffset >= 0) {
                this.privNextSearchSentenceIndex = this.privSentenceOffset + text.length;
                if (this.privIsSSML) {
                    if (this.withinXmlTag(this.privSentenceOffset) && !SynthesisTurn.isXmlTag(text)) {
                        this.updateTextOffset(text, type);
                    }
                }
            }
        }
    }
    onComplete() {
        if (this.privIsSynthesizing) {
            this.privIsSynthesizing = false;
            this.privIsSynthesisEnded = true;
            this.privAudioOutputStream.close();
            this.privInTurn = false;
            if (this.privTurnAudioDestination !== undefined) {
                this.privTurnAudioDestination.close();
                this.privTurnAudioDestination = undefined;
            }
        }
    }
    readAllAudioFromStream() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.privIsSynthesisEnded) {
                this.privReceivedAudio = new ArrayBuffer(this.bytesReceived);
                try {
                    yield this.privAudioOutputStream.read(this.privReceivedAudio);
                }
                catch (e) {
                    this.privReceivedAudio = new ArrayBuffer(0);
                }
            }
        });
    }
    /**
     * Check if current idx is in XML(SSML) tag
     * @param idx
     * @private
     */
    withinXmlTag(idx) {
        return this.privRawText.indexOf("<", idx + 1) > this.privRawText.indexOf(">", idx + 1);
    }
}

//# sourceMappingURL=SynthesisTurn.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesizerConfig.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesizerConfig.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SynthesisServiceType": () => (/* binding */ SynthesisServiceType),
/* harmony export */   "SynthesizerConfig": () => (/* binding */ SynthesizerConfig)
/* harmony export */ });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognizerConfig.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

var SynthesisServiceType;
(function (SynthesisServiceType) {
    SynthesisServiceType[SynthesisServiceType["Standard"] = 0] = "Standard";
    SynthesisServiceType[SynthesisServiceType["Custom"] = 1] = "Custom";
})(SynthesisServiceType || (SynthesisServiceType = {}));
class SynthesizerConfig {
    constructor(speechServiceConfig, parameters) {
        this.privSynthesisServiceType = SynthesisServiceType.Standard;
        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new _Exports__WEBPACK_IMPORTED_MODULE_0__.SpeechServiceConfig(new _Exports__WEBPACK_IMPORTED_MODULE_0__.Context(null));
        this.privParameters = parameters;
    }
    get parameters() {
        return this.privParameters;
    }
    get synthesisServiceType() {
        return this.privSynthesisServiceType;
    }
    set synthesisServiceType(value) {
        this.privSynthesisServiceType = value;
    }
    get SpeechServiceConfig() {
        return this.privSpeechServiceConfig;
    }
}

//# sourceMappingURL=SynthesizerConfig.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranscriberConnectionFactory.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranscriberConnectionFactory.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TranscriberConnectionFactory": () => (/* binding */ TranscriberConnectionFactory)
/* harmony export */ });
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/WebsocketConnection.js");
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ProxyInfo.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/OutputFormat.js");
/* harmony import */ var _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ConnectionFactoryBase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ConnectionFactoryBase.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/WebsocketMessageFormatter.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _HeaderNames__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./HeaderNames */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/HeaderNames.js");
/* harmony import */ var _QueryParameterNames__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./QueryParameterNames */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/QueryParameterNames.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.






class TranscriberConnectionFactory extends _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_0__.ConnectionFactoryBase {
    constructor() {
        super(...arguments);
        this.multiaudioRelativeUri = "/speech/recognition/multiaudio";
    }
    create(config, authInfo, connectionId) {
        let endpoint = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_Endpoint, undefined);
        const region = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_Region, "centralus");
        const hostSuffix = _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_0__.ConnectionFactoryBase.getHostSuffix(region);
        const hostDefault = "wss://transcribe." + region + ".cts.speech" + hostSuffix + this.multiaudioRelativeUri;
        const host = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_Host, hostDefault);
        const queryParams = {};
        this.setQueryParams(queryParams, config, endpoint);
        if (!endpoint) {
            endpoint = host;
        }
        const headers = {};
        if (authInfo.token !== undefined && authInfo.token !== "") {
            headers[authInfo.headerName] = authInfo.token;
        }
        headers[_HeaderNames__WEBPACK_IMPORTED_MODULE_2__.HeaderNames.ConnectionId] = connectionId;
        config.parameters.setProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_Url, endpoint);
        const enableCompression = config.parameters.getProperty("SPEECH-EnableWebsocketCompression", "false") === "true";
        return new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_3__.WebsocketConnection(endpoint, queryParams, headers, new _Exports__WEBPACK_IMPORTED_MODULE_4__.WebsocketMessageFormatter(), _common_browser_Exports__WEBPACK_IMPORTED_MODULE_5__.ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);
    }
    setQueryParams(queryParams, config, endpointUrl) {
        const endpointId = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_EndpointId, undefined);
        const language = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_RecoLanguage, undefined);
        if (endpointId && !(_QueryParameterNames__WEBPACK_IMPORTED_MODULE_6__.QueryParameterNames.CustomSpeechDeploymentId in queryParams)) {
            queryParams[_QueryParameterNames__WEBPACK_IMPORTED_MODULE_6__.QueryParameterNames.CustomSpeechDeploymentId] = endpointId;
        }
        if (language && !(_QueryParameterNames__WEBPACK_IMPORTED_MODULE_6__.QueryParameterNames.Language in queryParams)) {
            queryParams[_QueryParameterNames__WEBPACK_IMPORTED_MODULE_6__.QueryParameterNames.Language] = language;
        }
        const wordLevelTimings = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, "false").toLowerCase() === "true";
        const detailed = config.parameters.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_7__.OutputFormatPropertyName, _sdk_Exports__WEBPACK_IMPORTED_MODULE_8__.OutputFormat[_sdk_Exports__WEBPACK_IMPORTED_MODULE_8__.OutputFormat.Simple]) !== _sdk_Exports__WEBPACK_IMPORTED_MODULE_8__.OutputFormat[_sdk_Exports__WEBPACK_IMPORTED_MODULE_8__.OutputFormat.Simple];
        if (wordLevelTimings || detailed) {
            queryParams[_QueryParameterNames__WEBPACK_IMPORTED_MODULE_6__.QueryParameterNames.Format] = _sdk_Exports__WEBPACK_IMPORTED_MODULE_8__.OutputFormat[_sdk_Exports__WEBPACK_IMPORTED_MODULE_8__.OutputFormat.Detailed].toLowerCase();
        }
        this.setCommonUrlParams(config, queryParams, endpointUrl);
    }
}

//# sourceMappingURL=TranscriberConnectionFactory.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationConnectionConfig.js":
/*!********************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationConnectionConfig.js ***!
  \********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConversationConnectionConfig": () => (/* binding */ ConversationConnectionConfig)
/* harmony export */ });
/* harmony import */ var _common_browser_RestConfigBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common.browser/RestConfigBase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/RestConfigBase.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

class ConversationConnectionConfig extends _common_browser_RestConfigBase__WEBPACK_IMPORTED_MODULE_0__.RestConfigBase {
    static get host() {
        return ConversationConnectionConfig.privHost;
    }
    static get apiVersion() {
        return ConversationConnectionConfig.privApiVersion;
    }
    static get clientAppId() {
        return ConversationConnectionConfig.privClientAppId;
    }
    static get defaultLanguageCode() {
        return ConversationConnectionConfig.privDefaultLanguageCode;
    }
    static get restPath() {
        return ConversationConnectionConfig.privRestPath;
    }
    static get webSocketPath() {
        return ConversationConnectionConfig.privWebSocketPath;
    }
    static get transcriptionEventKeys() {
        return ConversationConnectionConfig.privTranscriptionEventKeys;
    }
}
ConversationConnectionConfig.privHost = "dev.microsofttranslator.com";
ConversationConnectionConfig.privRestPath = "/capito/room";
ConversationConnectionConfig.privApiVersion = "2.0";
ConversationConnectionConfig.privDefaultLanguageCode = "en-US";
ConversationConnectionConfig.privClientAppId = "FC539C22-1767-4F1F-84BC-B4D811114F15";
ConversationConnectionConfig.privWebSocketPath = "/capito/translate";
ConversationConnectionConfig.privTranscriptionEventKeys = ["iCalUid", "callId", "organizer", "FLAC", "MTUri", "DifferentiateGuestSpeakers", "audiorecording", "Threadid", "OrganizerMri", "OrganizerTenantId", "UserToken"];

//# sourceMappingURL=ConversationConnectionConfig.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationConnectionFactory.js":
/*!*********************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationConnectionFactory.js ***!
  \*********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConversationConnectionFactory": () => (/* binding */ ConversationConnectionFactory)
/* harmony export */ });
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/WebsocketConnection.js");
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ProxyInfo.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");
/* harmony import */ var _sdk_Contracts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../sdk/Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ConnectionFactoryBase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ConnectionFactoryBase.js");
/* harmony import */ var _ConversationConnectionConfig__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ConversationConnectionConfig */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationConnectionConfig.js");
/* harmony import */ var _ConversationWebsocketMessageFormatter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ConversationWebsocketMessageFormatter */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationWebsocketMessageFormatter.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.







/**
 * Create a connection to the Conversation Translator websocket for sending instant messages and commands, and for receiving translated messages.
 * The conversation must already have been started or joined.
 */
class ConversationConnectionFactory extends _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_0__.ConnectionFactoryBase {
    create(config, authInfo, connectionId) {
        const endpointHost = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.ConversationTranslator_Host, _ConversationConnectionConfig__WEBPACK_IMPORTED_MODULE_2__.ConversationConnectionConfig.host);
        const correlationId = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.ConversationTranslator_CorrelationId, (0,_common_Exports__WEBPACK_IMPORTED_MODULE_3__.createGuid)());
        const endpoint = `wss://${endpointHost}${_ConversationConnectionConfig__WEBPACK_IMPORTED_MODULE_2__.ConversationConnectionConfig.webSocketPath}`;
        const token = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.ConversationTranslator_Token, undefined);
        _sdk_Contracts__WEBPACK_IMPORTED_MODULE_4__.Contracts.throwIfNullOrUndefined(token, "token");
        const queryParams = {};
        queryParams[_ConversationConnectionConfig__WEBPACK_IMPORTED_MODULE_2__.ConversationConnectionConfig.configParams.apiVersion] = _ConversationConnectionConfig__WEBPACK_IMPORTED_MODULE_2__.ConversationConnectionConfig.apiVersion;
        queryParams[_ConversationConnectionConfig__WEBPACK_IMPORTED_MODULE_2__.ConversationConnectionConfig.configParams.token] = token;
        queryParams[_ConversationConnectionConfig__WEBPACK_IMPORTED_MODULE_2__.ConversationConnectionConfig.configParams.correlationId] = correlationId;
        const enableCompression = config.parameters.getProperty("SPEECH-EnableWebsocketCompression", "false") === "true";
        return new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_5__.WebsocketConnection(endpoint, queryParams, {}, new _ConversationWebsocketMessageFormatter__WEBPACK_IMPORTED_MODULE_6__.ConversationWebsocketMessageFormatter(), _common_browser_Exports__WEBPACK_IMPORTED_MODULE_7__.ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);
    }
}

//# sourceMappingURL=ConversationConnectionFactory.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationConnectionMessage.js":
/*!*********************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationConnectionMessage.js ***!
  \*********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConversationConnectionMessage": () => (/* binding */ ConversationConnectionMessage)
/* harmony export */ });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

class ConversationConnectionMessage extends _common_Exports__WEBPACK_IMPORTED_MODULE_0__.ConnectionMessage {
    constructor(messageType, body, headers, id) {
        super(messageType, body, headers, id);
        const json = JSON.parse(this.textBody);
        if (json.type !== undefined) {
            this.privConversationMessageType = json.type;
        }
    }
    get conversationMessageType() {
        return this.privConversationMessageType;
    }
}

//# sourceMappingURL=ConversationConnectionMessage.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationManager.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationManager.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConversationManager": () => (/* binding */ ConversationManager)
/* harmony export */ });
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/RestMessageAdapter.js");
/* harmony import */ var _sdk_Contracts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../sdk/Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _ConversationConnectionConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ConversationConnectionConfig */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationConnectionConfig.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.




class ConversationManager {
    constructor() {
        //
        this.privRequestParams = _ConversationConnectionConfig__WEBPACK_IMPORTED_MODULE_0__.ConversationConnectionConfig.configParams;
        this.privErrors = _ConversationConnectionConfig__WEBPACK_IMPORTED_MODULE_0__.ConversationConnectionConfig.restErrors;
        this.privHost = _ConversationConnectionConfig__WEBPACK_IMPORTED_MODULE_0__.ConversationConnectionConfig.host;
        this.privApiVersion = _ConversationConnectionConfig__WEBPACK_IMPORTED_MODULE_0__.ConversationConnectionConfig.apiVersion;
        this.privRestPath = _ConversationConnectionConfig__WEBPACK_IMPORTED_MODULE_0__.ConversationConnectionConfig.restPath;
        this.privRestAdapter = new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_1__.RestMessageAdapter({});
    }
    /**
     * Make a POST request to the Conversation Manager service endpoint to create or join a conversation.
     * @param args
     * @param conversationCode
     * @param callback
     * @param errorCallback
     */
    createOrJoin(args, conversationCode, cb, err) {
        try {
            _sdk_Contracts__WEBPACK_IMPORTED_MODULE_2__.Contracts.throwIfNullOrUndefined(args, "args");
            const languageCode = args.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_RecoLanguage, _ConversationConnectionConfig__WEBPACK_IMPORTED_MODULE_0__.ConversationConnectionConfig.defaultLanguageCode);
            const nickname = args.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.ConversationTranslator_Name, "conversation_host");
            const endpointHost = args.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.ConversationTranslator_Host, this.privHost);
            const correlationId = args.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.ConversationTranslator_CorrelationId);
            const subscriptionKey = args.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_Key);
            const subscriptionRegion = args.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_Region);
            const authToken = args.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceAuthorization_Token);
            _sdk_Contracts__WEBPACK_IMPORTED_MODULE_2__.Contracts.throwIfNullOrWhitespace(languageCode, "languageCode");
            _sdk_Contracts__WEBPACK_IMPORTED_MODULE_2__.Contracts.throwIfNullOrWhitespace(nickname, "nickname");
            _sdk_Contracts__WEBPACK_IMPORTED_MODULE_2__.Contracts.throwIfNullOrWhitespace(endpointHost, "endpointHost");
            const queryParams = {};
            queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;
            queryParams[this.privRequestParams.languageCode] = languageCode;
            queryParams[this.privRequestParams.nickname] = nickname;
            const headers = {};
            if (correlationId) {
                headers[this.privRequestParams.correlationId] = correlationId;
            }
            headers[this.privRequestParams.clientAppId] = _ConversationConnectionConfig__WEBPACK_IMPORTED_MODULE_0__.ConversationConnectionConfig.clientAppId;
            if (conversationCode !== undefined) {
                queryParams[this.privRequestParams.roomId] = conversationCode;
            }
            else {
                _sdk_Contracts__WEBPACK_IMPORTED_MODULE_2__.Contracts.throwIfNullOrUndefined(subscriptionRegion, this.privErrors.authInvalidSubscriptionRegion);
                headers[this.privRequestParams.subscriptionRegion] = subscriptionRegion;
                if (subscriptionKey) {
                    headers[this.privRequestParams.subscriptionKey] = subscriptionKey;
                }
                else if (authToken) {
                    headers[this.privRequestParams.authorization] = `Bearer ${authToken}`;
                }
                else {
                    _sdk_Contracts__WEBPACK_IMPORTED_MODULE_2__.Contracts.throwIfNullOrUndefined(subscriptionKey, this.privErrors.authInvalidSubscriptionKey);
                }
            }
            const config = {};
            config.headers = headers;
            this.privRestAdapter.options = config;
            const endpoint = `https://${endpointHost}${this.privRestPath}`;
            // TODO: support a proxy and certificate validation
            this.privRestAdapter.request(_common_browser_Exports__WEBPACK_IMPORTED_MODULE_1__.RestRequestType.Post, endpoint, queryParams, null).then((response) => {
                const requestId = _common_browser_Exports__WEBPACK_IMPORTED_MODULE_1__.RestMessageAdapter.extractHeaderValue(this.privRequestParams.requestId, response.headers);
                if (!response.ok) {
                    if (!!err) {
                        // get the error
                        let errorMessage = this.privErrors.invalidCreateJoinConversationResponse.replace("{status}", response.status.toString());
                        let errMessageRaw;
                        try {
                            errMessageRaw = JSON.parse(response.data);
                            errorMessage += ` [${errMessageRaw.error.code}: ${errMessageRaw.error.message}]`;
                        }
                        catch (e) {
                            errorMessage += ` [${response.data}]`;
                        }
                        if (requestId) {
                            errorMessage += ` ${requestId}`;
                        }
                        err(errorMessage);
                    }
                    return;
                }
                const conversation = JSON.parse(response.data);
                if (conversation) {
                    conversation.requestId = requestId;
                }
                if (!!cb) {
                    try {
                        cb(conversation);
                    }
                    catch (e) {
                        if (!!err) {
                            err(e);
                        }
                    }
                    cb = undefined;
                }
                // eslint-disable-next-line @typescript-eslint/no-empty-function
            }).catch(() => { });
        }
        catch (error) {
            if (!!err) {
                if (error instanceof Error) {
                    const typedError = error;
                    err(typedError.name + ": " + typedError.message);
                }
                else {
                    err(error);
                }
            }
        }
    }
    /**
     * Make a DELETE request to the Conversation Manager service endpoint to leave the conversation.
     * @param args
     * @param sessionToken
     * @param callback
     */
    leave(args, sessionToken) {
        return new Promise((resolve, reject) => {
            try {
                _sdk_Contracts__WEBPACK_IMPORTED_MODULE_2__.Contracts.throwIfNullOrUndefined(args, this.privErrors.invalidArgs.replace("{arg}", "config"));
                _sdk_Contracts__WEBPACK_IMPORTED_MODULE_2__.Contracts.throwIfNullOrWhitespace(sessionToken, this.privErrors.invalidArgs.replace("{arg}", "token"));
                const endpointHost = args.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.ConversationTranslator_Host, this.privHost);
                const correlationId = args.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.ConversationTranslator_CorrelationId);
                const queryParams = {};
                queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;
                queryParams[this.privRequestParams.sessionToken] = sessionToken;
                const headers = {};
                if (correlationId) {
                    headers[this.privRequestParams.correlationId] = correlationId;
                }
                const config = {};
                config.headers = headers;
                this.privRestAdapter.options = config;
                const endpoint = `https://${endpointHost}${this.privRestPath}`;
                // TODO: support a proxy and certificate validation
                this.privRestAdapter.request(_common_browser_Exports__WEBPACK_IMPORTED_MODULE_1__.RestRequestType.Delete, endpoint, queryParams, null).then((response) => {
                    if (!response.ok) {
                        // ignore errors on delete
                    }
                    resolve();
                    // eslint-disable-next-line @typescript-eslint/no-empty-function
                }).catch(() => { });
            }
            catch (error) {
                if (error instanceof Error) {
                    const typedError = error;
                    reject(typedError.name + ": " + typedError.message);
                }
                else {
                    reject(error);
                }
            }
        });
    }
}

//# sourceMappingURL=ConversationManager.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationRequestSession.js":
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationRequestSession.js ***!
  \******************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConversationRequestSession": () => (/* binding */ ConversationRequestSession)
/* harmony export */ });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

/**
 * Placeholder class for the Conversation Request Session. Based off RequestSession.
 * TODO: define what telemetry is required.
 */
class ConversationRequestSession {
    constructor(sessionId) {
        this.privIsDisposed = false;
        this.privDetachables = new Array();
        this.privSessionId = sessionId;
        this.privRequestId = (0,_common_Exports__WEBPACK_IMPORTED_MODULE_0__.createNoDashGuid)();
        this.privRequestCompletionDeferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_1__.Deferred();
    }
    get sessionId() {
        return this.privSessionId;
    }
    get requestId() {
        return this.privRequestId;
    }
    get completionPromise() {
        return this.privRequestCompletionDeferral.promise;
    }
    onPreConnectionStart(authFetchEventId, connectionId) {
        this.privSessionId = connectionId;
    }
    onAuthCompleted(isError) {
        if (isError) {
            this.onComplete();
        }
    }
    onConnectionEstablishCompleted(statusCode) {
        if (statusCode === 200) {
            return;
        }
        else if (statusCode === 403) {
            this.onComplete();
        }
    }
    onServiceTurnEndResponse(continuousRecognition) {
        if (!continuousRecognition) {
            this.onComplete();
        }
        else {
            this.privRequestId = (0,_common_Exports__WEBPACK_IMPORTED_MODULE_0__.createNoDashGuid)();
        }
    }
    dispose() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.privIsDisposed) {
                // we should have completed by now. If we did not its an unknown error.
                this.privIsDisposed = true;
                for (const detachable of this.privDetachables) {
                    yield detachable.detach();
                }
            }
        });
    }
    onComplete() {
        //
    }
}

//# sourceMappingURL=ConversationRequestSession.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationServiceAdapter.js":
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationServiceAdapter.js ***!
  \******************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConversationServiceAdapter": () => (/* binding */ ConversationServiceAdapter)
/* harmony export */ });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/IConnection.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationReason.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationErrorCodes.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationTranslationCanceledEventArgs.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationExpirationEventArgs.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ResultReason.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationTranslationResult.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Translations.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceRecognizerBase.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/CognitiveTokenAuthentication.js");
/* harmony import */ var _ConversationConnectionMessage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ConversationConnectionMessage */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationConnectionMessage.js");
/* harmony import */ var _ConversationRequestSession__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ConversationRequestSession */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationRequestSession.js");
/* harmony import */ var _ConversationTranslatorEventArgs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ConversationTranslatorEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationTranslatorEventArgs.js");
/* harmony import */ var _ConversationTranslatorInterfaces__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ConversationTranslatorInterfaces */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationTranslatorInterfaces.js");
/* harmony import */ var _ServiceMessages_Exports__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ServiceMessages/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ServiceMessages/CommandResponsePayload.js");
/* harmony import */ var _ServiceMessages_Exports__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ServiceMessages/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ServiceMessages/ParticipantResponsePayload.js");
/* harmony import */ var _ServiceMessages_Exports__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./ServiceMessages/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ServiceMessages/TranslationResponsePayload.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








/**
 * The service adapter handles sending and receiving messages to the Conversation Translator websocket.
 */
class ConversationServiceAdapter extends _Exports__WEBPACK_IMPORTED_MODULE_0__.ServiceRecognizerBase {
    constructor(authentication, connectionFactory, audioSource, recognizerConfig, conversationServiceConnector) {
        super(authentication, connectionFactory, audioSource, recognizerConfig, conversationServiceConnector);
        this.privConnectionConfigPromise = undefined;
        this.privLastPartialUtteranceId = "";
        this.privConversationServiceConnector = conversationServiceConnector;
        this.privConversationAuthentication = authentication;
        this.receiveMessageOverride = () => this.receiveConversationMessageOverride();
        this.recognizeOverride = () => this.noOp();
        this.postConnectImplOverride = (connection) => this.conversationConnectImpl(connection);
        this.configConnectionOverride = () => this.configConnection();
        this.disconnectOverride = () => this.privDisconnect();
        this.privConversationRequestSession = new _ConversationRequestSession__WEBPACK_IMPORTED_MODULE_1__.ConversationRequestSession((0,_common_Exports__WEBPACK_IMPORTED_MODULE_2__.createNoDashGuid)());
        this.privConversationConnectionFactory = connectionFactory;
        this.privConversationIsDisposed = false;
    }
    isDisposed() {
        return super.isDisposed() || this.privConversationIsDisposed;
    }
    dispose(reason) {
        const _super = Object.create(null, {
            dispose: { get: () => super.dispose }
        });
        return __awaiter(this, void 0, void 0, function* () {
            this.privConversationIsDisposed = true;
            if (this.privConnectionConfigPromise !== undefined) {
                const connection = yield this.privConnectionConfigPromise;
                yield connection.dispose(reason);
            }
            yield _super.dispose.call(this, reason);
        });
    }
    sendMessage(message) {
        return __awaiter(this, void 0, void 0, function* () {
            const connection = yield this.fetchConnection();
            return connection.send(new _ConversationConnectionMessage__WEBPACK_IMPORTED_MODULE_3__.ConversationConnectionMessage(_common_Exports__WEBPACK_IMPORTED_MODULE_4__.MessageType.Text, message));
        });
    }
    sendMessageAsync(message) {
        return __awaiter(this, void 0, void 0, function* () {
            const connection = yield this.fetchConnection();
            yield connection.send(new _ConversationConnectionMessage__WEBPACK_IMPORTED_MODULE_3__.ConversationConnectionMessage(_common_Exports__WEBPACK_IMPORTED_MODULE_4__.MessageType.Text, message));
        });
    }
    privDisconnect() {
        if (this.terminateMessageLoop) {
            return;
        }
        this.cancelRecognition(this.privConversationRequestSession.sessionId, this.privConversationRequestSession.requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.CancellationReason.Error, _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__.CancellationErrorCode.NoError, "Disconnecting");
        this.terminateMessageLoop = true;
        return Promise.resolve();
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    processTypeSpecificMessages() {
        return __awaiter(this, void 0, void 0, function* () {
            return true;
        });
    }
    // Cancels recognition.
    cancelRecognition(sessionId, requestId, cancellationReason, errorCode, error) {
        this.terminateMessageLoop = true;
        const cancelEvent = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_7__.ConversationTranslationCanceledEventArgs(cancellationReason, error, errorCode, undefined, sessionId);
        try {
            if (!!this.privConversationServiceConnector.canceled) {
                this.privConversationServiceConnector.canceled(this.privConversationServiceConnector, cancelEvent);
            }
        }
        catch (_a) {
            // continue on error
        }
    }
    /**
     * Establishes a websocket connection to the end point.
     */
    conversationConnectImpl(connection) {
        return __awaiter(this, void 0, void 0, function* () {
            this.privConnectionLoop = this.startMessageLoop();
            return connection;
        });
    }
    /**
     * Process incoming websocket messages
     */
    receiveConversationMessageOverride() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isDisposed() || this.terminateMessageLoop) {
                return Promise.resolve();
            }
            // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages
            const communicationCustodian = new _common_Exports__WEBPACK_IMPORTED_MODULE_8__.Deferred();
            try {
                const connection = yield this.fetchConnection();
                const message = yield connection.read();
                if (this.isDisposed() || this.terminateMessageLoop) {
                    // We're done.
                    communicationCustodian.resolve();
                    return Promise.resolve();
                }
                if (!message) {
                    return this.receiveConversationMessageOverride();
                }
                const sessionId = this.privConversationRequestSession.sessionId;
                const conversationMessageType = message.conversationMessageType.toLowerCase();
                let sendFinal = false;
                try {
                    switch (conversationMessageType) {
                        case "info":
                        case "participant_command":
                        case "command":
                            const commandPayload = _ServiceMessages_Exports__WEBPACK_IMPORTED_MODULE_9__.CommandResponsePayload.fromJSON(message.textBody);
                            switch (commandPayload.command.toLowerCase()) {
                                /**
                                 * 'ParticpantList' is the first message sent to the user after the websocket connection has opened.
                                 * The consuming client must wait for this message to arrive
                                 * before starting to send their own data.
                                 */
                                case "participantlist":
                                    const participantsPayload = _ServiceMessages_Exports__WEBPACK_IMPORTED_MODULE_10__.ParticipantsListPayloadResponse.fromJSON(message.textBody);
                                    const participantsResult = participantsPayload.participants.map((p) => {
                                        const participant = {
                                            avatar: p.avatar,
                                            displayName: p.nickname,
                                            id: p.participantId,
                                            isHost: p.ishost,
                                            isMuted: p.ismuted,
                                            isUsingTts: p.usetts,
                                            preferredLanguage: p.locale
                                        };
                                        return participant;
                                    });
                                    if (!!this.privConversationServiceConnector.participantsListReceived) {
                                        this.privConversationServiceConnector.participantsListReceived(this.privConversationServiceConnector, new _ConversationTranslatorEventArgs__WEBPACK_IMPORTED_MODULE_11__.ParticipantsListEventArgs(participantsPayload.roomid, participantsPayload.token, participantsPayload.translateTo, participantsPayload.profanityFilter, participantsPayload.roomProfanityFilter, participantsPayload.roomLocked, participantsPayload.muteAll, participantsResult, sessionId));
                                    }
                                    break;
                                /**
                                 * 'SetTranslateToLanguages' represents the list of languages being used in the Conversation by all users(?).
                                 * This is sent at the start of the Conversation
                                 */
                                case "settranslatetolanguages":
                                    if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {
                                        this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector, new _ConversationTranslatorEventArgs__WEBPACK_IMPORTED_MODULE_11__.ParticipantAttributeEventArgs(commandPayload.participantId, _ConversationTranslatorInterfaces__WEBPACK_IMPORTED_MODULE_12__.ConversationTranslatorCommandTypes.setTranslateToLanguages, commandPayload.value, sessionId));
                                    }
                                    break;
                                /**
                                 * 'SetProfanityFiltering' lets the client set the level of profanity filtering.
                                 * If sent by the participant the setting will effect only their own profanity level.
                                 * If sent by the host, the setting will effect all participants including the host.
                                 * Note: the profanity filters differ from Speech Service (?): 'marked', 'raw', 'removed', 'tagged'
                                 */
                                case "setprofanityfiltering":
                                    if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {
                                        this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector, new _ConversationTranslatorEventArgs__WEBPACK_IMPORTED_MODULE_11__.ParticipantAttributeEventArgs(commandPayload.participantId, _ConversationTranslatorInterfaces__WEBPACK_IMPORTED_MODULE_12__.ConversationTranslatorCommandTypes.setProfanityFiltering, commandPayload.value, sessionId));
                                    }
                                    break;
                                /**
                                 * 'SetMute' is sent if the participant has been muted by the host.
                                 * Check the 'participantId' to determine if the current user has been muted.
                                 */
                                case "setmute":
                                    if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {
                                        this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector, new _ConversationTranslatorEventArgs__WEBPACK_IMPORTED_MODULE_11__.ParticipantAttributeEventArgs(commandPayload.participantId, _ConversationTranslatorInterfaces__WEBPACK_IMPORTED_MODULE_12__.ConversationTranslatorCommandTypes.setMute, commandPayload.value, sessionId));
                                    }
                                    break;
                                /**
                                 * 'SetMuteAll' is sent if the Conversation has been muted by the host.
                                 */
                                case "setmuteall":
                                    if (!!this.privConversationServiceConnector.muteAllCommandReceived) {
                                        this.privConversationServiceConnector.muteAllCommandReceived(this.privConversationServiceConnector, new _ConversationTranslatorEventArgs__WEBPACK_IMPORTED_MODULE_11__.MuteAllEventArgs(commandPayload.value, sessionId));
                                    }
                                    break;
                                /**
                                 * 'RoomExpirationWarning' is sent towards the end of the Conversation session to give a timeout warning.
                                 */
                                case "roomexpirationwarning":
                                    if (!!this.privConversationServiceConnector.conversationExpiration) {
                                        this.privConversationServiceConnector.conversationExpiration(this.privConversationServiceConnector, new _sdk_Exports__WEBPACK_IMPORTED_MODULE_13__.ConversationExpirationEventArgs(commandPayload.value, this.privConversationRequestSession.sessionId));
                                    }
                                    break;
                                /**
                                 * 'SetUseTts' is sent as a confirmation if the user requests TTS to be turned on or off.
                                 */
                                case "setusetts":
                                    if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {
                                        this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector, new _ConversationTranslatorEventArgs__WEBPACK_IMPORTED_MODULE_11__.ParticipantAttributeEventArgs(commandPayload.participantId, _ConversationTranslatorInterfaces__WEBPACK_IMPORTED_MODULE_12__.ConversationTranslatorCommandTypes.setUseTTS, commandPayload.value, sessionId));
                                    }
                                    break;
                                /**
                                 * 'SetLockState' is set if the host has locked or unlocked the Conversation.
                                 */
                                case "setlockstate":
                                    if (!!this.privConversationServiceConnector.lockRoomCommandReceived) {
                                        this.privConversationServiceConnector.lockRoomCommandReceived(this.privConversationServiceConnector, new _ConversationTranslatorEventArgs__WEBPACK_IMPORTED_MODULE_11__.LockRoomEventArgs(commandPayload.value, sessionId));
                                    }
                                    break;
                                /**
                                 * 'ChangeNickname' is received if a user changes their display name.
                                 * Any cached particpiants list should be updated to reflect the display name.
                                 */
                                case "changenickname":
                                    if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {
                                        this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector, new _ConversationTranslatorEventArgs__WEBPACK_IMPORTED_MODULE_11__.ParticipantAttributeEventArgs(commandPayload.participantId, _ConversationTranslatorInterfaces__WEBPACK_IMPORTED_MODULE_12__.ConversationTranslatorCommandTypes.changeNickname, commandPayload.nickname, sessionId));
                                    }
                                    break;
                                /**
                                 * 'JoinSession' is sent when a user joins the Conversation.
                                 */
                                case "joinsession":
                                    const joinParticipantPayload = _ServiceMessages_Exports__WEBPACK_IMPORTED_MODULE_10__.ParticipantPayloadResponse.fromJSON(message.textBody);
                                    const joiningParticipant = {
                                        avatar: joinParticipantPayload.avatar,
                                        displayName: joinParticipantPayload.nickname,
                                        id: joinParticipantPayload.participantId,
                                        isHost: joinParticipantPayload.ishost,
                                        isMuted: joinParticipantPayload.ismuted,
                                        isUsingTts: joinParticipantPayload.usetts,
                                        preferredLanguage: joinParticipantPayload.locale,
                                    };
                                    if (!!this.privConversationServiceConnector.participantJoinCommandReceived) {
                                        this.privConversationServiceConnector.participantJoinCommandReceived(this.privConversationServiceConnector, new _ConversationTranslatorEventArgs__WEBPACK_IMPORTED_MODULE_11__.ParticipantEventArgs(joiningParticipant, sessionId));
                                    }
                                    break;
                                /**
                                 * 'LeaveSession' is sent when a user leaves the Conversation'.
                                 */
                                case "leavesession":
                                    const leavingParticipant = {
                                        id: commandPayload.participantId
                                    };
                                    if (!!this.privConversationServiceConnector.participantLeaveCommandReceived) {
                                        this.privConversationServiceConnector.participantLeaveCommandReceived(this.privConversationServiceConnector, new _ConversationTranslatorEventArgs__WEBPACK_IMPORTED_MODULE_11__.ParticipantEventArgs(leavingParticipant, sessionId));
                                    }
                                    break;
                                /**
                                 * 'DisconnectSession' is sent when a user is disconnected from the session (e.g. network problem).
                                 * Check the 'ParticipantId' to check whether the message is for the current user.
                                 */
                                case "disconnectsession":
                                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                                    const disconnectParticipant = {
                                        id: commandPayload.participantId
                                    };
                                    break;
                                case "token":
                                    const token = new _Exports__WEBPACK_IMPORTED_MODULE_14__.CognitiveTokenAuthentication(() => {
                                        const authorizationToken = commandPayload.token;
                                        return Promise.resolve(authorizationToken);
                                    }, () => {
                                        const authorizationToken = commandPayload.token;
                                        return Promise.resolve(authorizationToken);
                                    });
                                    this.authentication = token;
                                    break;
                                /**
                                 * Message not recognized.
                                 */
                                default:
                                    break;
                            }
                            break;
                        /**
                         * 'partial' (or 'hypothesis') represents a unfinalized speech message.
                         */
                        case "partial":
                        /**
                         * 'final' (or 'phrase') represents a finalized speech message.
                         */
                        case "final":
                            const speechPayload = _ServiceMessages_Exports__WEBPACK_IMPORTED_MODULE_15__.SpeechResponsePayload.fromJSON(message.textBody);
                            const conversationResultReason = (conversationMessageType === "final") ? _sdk_Exports__WEBPACK_IMPORTED_MODULE_16__.ResultReason.TranslatedParticipantSpeech : _sdk_Exports__WEBPACK_IMPORTED_MODULE_16__.ResultReason.TranslatingParticipantSpeech;
                            const speechResult = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_17__.ConversationTranslationResult(speechPayload.participantId, this.getTranslations(speechPayload.translations), speechPayload.language, speechPayload.id, conversationResultReason, speechPayload.recognition, undefined, undefined, message.textBody, undefined);
                            if (speechPayload.isFinal) {
                                // check the length, sometimes empty finals are returned
                                if (speechResult.text !== undefined && speechResult.text.length > 0) {
                                    sendFinal = true;
                                }
                                else if (speechPayload.id === this.privLastPartialUtteranceId) {
                                    // send final as normal. We had a non-empty partial for this same utterance
                                    // so sending the empty final is important
                                    sendFinal = true;
                                }
                                else {
                                    // suppress unneeded final
                                }
                                if (sendFinal) {
                                    if (!!this.privConversationServiceConnector.translationReceived) {
                                        this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector, new _ConversationTranslatorEventArgs__WEBPACK_IMPORTED_MODULE_11__.ConversationReceivedTranslationEventArgs(_ConversationTranslatorInterfaces__WEBPACK_IMPORTED_MODULE_12__.ConversationTranslatorMessageTypes.final, speechResult, sessionId));
                                    }
                                }
                            }
                            else if (speechResult.text !== undefined) {
                                this.privLastPartialUtteranceId = speechPayload.id;
                                if (!!this.privConversationServiceConnector.translationReceived) {
                                    this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector, new _ConversationTranslatorEventArgs__WEBPACK_IMPORTED_MODULE_11__.ConversationReceivedTranslationEventArgs(_ConversationTranslatorInterfaces__WEBPACK_IMPORTED_MODULE_12__.ConversationTranslatorMessageTypes.partial, speechResult, sessionId));
                                }
                            }
                            break;
                        /**
                         * "translated_message" is a text message or instant message (IM).
                         */
                        case "translated_message":
                            const textPayload = _ServiceMessages_Exports__WEBPACK_IMPORTED_MODULE_15__.TextResponsePayload.fromJSON(message.textBody);
                            // TODO: (Native parity) a result reason should be set based whether the participantId is ours or not
                            const textResult = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_17__.ConversationTranslationResult(textPayload.participantId, this.getTranslations(textPayload.translations), textPayload.language, undefined, undefined, textPayload.originalText, undefined, undefined, undefined, message.textBody, undefined);
                            if (!!this.privConversationServiceConnector.translationReceived) {
                                this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector, new _ConversationTranslatorEventArgs__WEBPACK_IMPORTED_MODULE_11__.ConversationReceivedTranslationEventArgs(_ConversationTranslatorInterfaces__WEBPACK_IMPORTED_MODULE_12__.ConversationTranslatorMessageTypes.instantMessage, textResult, sessionId));
                            }
                            break;
                        default:
                            // ignore any unsupported message types
                            break;
                    }
                }
                catch (e) {
                    // continue
                }
                return this.receiveConversationMessageOverride();
            }
            catch (e) {
                this.terminateMessageLoop = true;
            }
            return communicationCustodian.promise;
        });
    }
    startMessageLoop() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isDisposed()) {
                return Promise.resolve();
            }
            this.terminateMessageLoop = false;
            const messageRetrievalPromise = this.receiveConversationMessageOverride();
            try {
                const r = yield messageRetrievalPromise;
                return r;
            }
            catch (error) {
                this.cancelRecognition(this.privRequestSession ? this.privRequestSession.sessionId : "", this.privRequestSession ? this.privRequestSession.requestId : "", _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.CancellationReason.Error, _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__.CancellationErrorCode.RuntimeError, error);
                return null;
            }
        });
    }
    // Takes an established websocket connection to the endpoint
    configConnection() {
        if (this.isDisposed()) {
            return Promise.resolve(undefined);
        }
        if (this.privConnectionConfigPromise !== undefined) {
            return this.privConnectionConfigPromise.then((connection) => {
                if (connection.state() === _common_Exports__WEBPACK_IMPORTED_MODULE_18__.ConnectionState.Disconnected) {
                    this.privConnectionId = null;
                    this.privConnectionConfigPromise = undefined;
                    return this.configConnection();
                }
                return this.privConnectionConfigPromise;
            }, () => {
                this.privConnectionId = null;
                this.privConnectionConfigPromise = undefined;
                return this.configConnection();
            });
        }
        if (this.terminateMessageLoop) {
            return Promise.resolve(undefined);
        }
        this.privConnectionConfigPromise = this.connectImpl().then((connection) => connection);
        return this.privConnectionConfigPromise;
    }
    getTranslations(serviceResultTranslations) {
        let translations;
        if (undefined !== serviceResultTranslations) {
            translations = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_19__.Translations();
            for (const translation of serviceResultTranslations) {
                translations.set(translation.lang, translation.translation);
            }
        }
        return translations;
    }
}

//# sourceMappingURL=ConversationServiceAdapter.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationTranslatorConnectionFactory.js":
/*!*******************************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationTranslatorConnectionFactory.js ***!
  \*******************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConversationTranslatorConnectionFactory": () => (/* binding */ ConversationTranslatorConnectionFactory)
/* harmony export */ });
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/RestConfigBase.js");
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/WebsocketConnection.js");
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ProxyInfo.js");
/* harmony import */ var _common_StringUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/StringUtils */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/StringUtils.js");
/* harmony import */ var _sdk_Contracts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../sdk/Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _HeaderNames__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../HeaderNames */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/HeaderNames.js");
/* harmony import */ var _QueryParameterNames__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../QueryParameterNames */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/QueryParameterNames.js");
/* harmony import */ var _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../ConnectionFactoryBase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ConnectionFactoryBase.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranscriberConnectionFactory.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranslationConnectionFactory.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/WebsocketMessageFormatter.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.








/**
 * Connection factory for the conversation translator. Handles connecting to the regular translator endpoint,
 * as well as the virtual microphone array transcription endpoint
 */
class ConversationTranslatorConnectionFactory extends _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_0__.ConnectionFactoryBase {
    constructor(convGetter) {
        super();
        _sdk_Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrUndefined(convGetter, "convGetter");
        this.privConvGetter = convGetter;
    }
    create(config, authInfo, connectionId) {
        const isVirtMicArrayEndpoint = config.parameters.getProperty("ConversationTranslator_MultiChannelAudio", "").toUpperCase() === "TRUE";
        const convInfo = this.privConvGetter().room;
        const region = convInfo.cognitiveSpeechRegion || config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_Region, "");
        const replacementValues = {
            hostSuffix: _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_0__.ConnectionFactoryBase.getHostSuffix(region),
            path: ConversationTranslatorConnectionFactory.CTS_VIRT_MIC_PATH,
            region: encodeURIComponent(region)
        };
        replacementValues[_QueryParameterNames__WEBPACK_IMPORTED_MODULE_3__.QueryParameterNames.Language] = encodeURIComponent(config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_RecoLanguage, ""));
        replacementValues[_QueryParameterNames__WEBPACK_IMPORTED_MODULE_3__.QueryParameterNames.CtsMeetingId] = encodeURIComponent(convInfo.roomId);
        replacementValues[_QueryParameterNames__WEBPACK_IMPORTED_MODULE_3__.QueryParameterNames.CtsDeviceId] = encodeURIComponent(convInfo.participantId);
        replacementValues[_QueryParameterNames__WEBPACK_IMPORTED_MODULE_3__.QueryParameterNames.CtsIsParticipant] = convInfo.isHost ? "" : ("&" + _QueryParameterNames__WEBPACK_IMPORTED_MODULE_3__.QueryParameterNames.CtsIsParticipant);
        let endpointUrl = "";
        const queryParams = {};
        const headers = {};
        if (isVirtMicArrayEndpoint) {
            // connecting to the conversation transcription virtual microphone array endpoint
            endpointUrl = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_Endpoint);
            if (!endpointUrl) {
                const hostName = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_Host, "transcribe.{region}.cts.speech{hostSuffix}");
                endpointUrl = "wss://" + hostName + "{path}";
            }
            // because the region can change during a session, we support being passed a format string which we can then
            // replace with the correct information.
            endpointUrl = _common_StringUtils__WEBPACK_IMPORTED_MODULE_4__.StringUtils.formatString(endpointUrl, replacementValues);
            const parsedUrl = new URL(endpointUrl);
            parsedUrl.searchParams.forEach((val, key) => {
                queryParams[key] = val;
            });
            const connFactory = new _Exports__WEBPACK_IMPORTED_MODULE_5__.TranscriberConnectionFactory();
            connFactory.setQueryParams(queryParams, config, endpointUrl);
            // Some query parameters are required for the CTS endpoint, let's explicity set them here
            queryParams[_QueryParameterNames__WEBPACK_IMPORTED_MODULE_3__.QueryParameterNames.CtsMeetingId] = replacementValues[_QueryParameterNames__WEBPACK_IMPORTED_MODULE_3__.QueryParameterNames.CtsMeetingId];
            queryParams[_QueryParameterNames__WEBPACK_IMPORTED_MODULE_3__.QueryParameterNames.CtsDeviceId] = replacementValues[_QueryParameterNames__WEBPACK_IMPORTED_MODULE_3__.QueryParameterNames.CtsDeviceId];
            if (!convInfo.isHost) {
                queryParams[_QueryParameterNames__WEBPACK_IMPORTED_MODULE_3__.QueryParameterNames.CtsIsParticipant] = ""; // this doesn't have a value so set to an empty string
            }
            if (!(_QueryParameterNames__WEBPACK_IMPORTED_MODULE_3__.QueryParameterNames.Format in queryParams)) {
                queryParams[_QueryParameterNames__WEBPACK_IMPORTED_MODULE_3__.QueryParameterNames.Format] = "simple";
            }
            parsedUrl.searchParams.forEach((val, key) => {
                parsedUrl.searchParams.set(key, queryParams[key]);
                delete queryParams[key];
            });
            endpointUrl = parsedUrl.toString();
        }
        else {
            // connecting to regular translation endpoint
            const connFactory = new _Exports__WEBPACK_IMPORTED_MODULE_6__.TranslationConnectionFactory();
            endpointUrl = connFactory.getEndpointUrl(config, true);
            endpointUrl = _common_StringUtils__WEBPACK_IMPORTED_MODULE_4__.StringUtils.formatString(endpointUrl, replacementValues);
            connFactory.setQueryParams(queryParams, config, endpointUrl);
        }
        headers[_HeaderNames__WEBPACK_IMPORTED_MODULE_7__.HeaderNames.ConnectionId] = connectionId;
        headers[_common_browser_Exports__WEBPACK_IMPORTED_MODULE_8__.RestConfigBase.configParams.token] = convInfo.token;
        if (authInfo.token) {
            headers[authInfo.headerName] = authInfo.token;
        }
        const enableCompression = config.parameters.getProperty("SPEECH-EnableWebsocketCompression", "").toUpperCase() === "TRUE";
        return new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_9__.WebsocketConnection(endpointUrl, queryParams, headers, new _Exports__WEBPACK_IMPORTED_MODULE_10__.WebsocketMessageFormatter(), _common_browser_Exports__WEBPACK_IMPORTED_MODULE_11__.ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);
    }
}
ConversationTranslatorConnectionFactory.CTS_VIRT_MIC_PATH = "/speech/recognition/dynamicaudio";

//# sourceMappingURL=ConversationTranslatorConnectionFactory.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationTranslatorEventArgs.js":
/*!***********************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationTranslatorEventArgs.js ***!
  \***********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConversationReceivedTranslationEventArgs": () => (/* binding */ ConversationReceivedTranslationEventArgs),
/* harmony export */   "LockRoomEventArgs": () => (/* binding */ LockRoomEventArgs),
/* harmony export */   "MuteAllEventArgs": () => (/* binding */ MuteAllEventArgs),
/* harmony export */   "ParticipantAttributeEventArgs": () => (/* binding */ ParticipantAttributeEventArgs),
/* harmony export */   "ParticipantEventArgs": () => (/* binding */ ParticipantEventArgs),
/* harmony export */   "ParticipantsListEventArgs": () => (/* binding */ ParticipantsListEventArgs)
/* harmony export */ });
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SessionEventArgs.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/* eslint-disable max-classes-per-file */

class MuteAllEventArgs extends _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.SessionEventArgs {
    constructor(isMuted, sessionId) {
        super(sessionId);
        this.privIsMuted = isMuted;
    }
    get isMuted() {
        return this.privIsMuted;
    }
}
class LockRoomEventArgs extends _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.SessionEventArgs {
    constructor(isLocked, sessionId) {
        super(sessionId);
        this.privIsLocked = isLocked;
    }
    get isMuted() {
        return this.privIsLocked;
    }
}
class ParticipantEventArgs extends _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.SessionEventArgs {
    constructor(participant, sessionId) {
        super(sessionId);
        this.privParticipant = participant;
    }
    get participant() {
        return this.privParticipant;
    }
}
class ParticipantAttributeEventArgs extends _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.SessionEventArgs {
    constructor(participantId, key, value, sessionId) {
        super(sessionId);
        this.privKey = key;
        this.privValue = value;
        this.privParticipantId = participantId;
    }
    get value() {
        return this.privValue;
    }
    get key() {
        return this.privKey;
    }
    get id() {
        return this.privParticipantId;
    }
}
class ParticipantsListEventArgs extends _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.SessionEventArgs {
    constructor(conversationId, token, translateTo, profanityFilter, roomProfanityFilter, isRoomLocked, isMuteAll, participants, sessionId) {
        super(sessionId);
        this.privRoomId = conversationId;
        this.privSessionToken = token;
        this.privTranslateTo = translateTo;
        this.privProfanityFilter = profanityFilter;
        this.privRoomProfanityFilter = roomProfanityFilter;
        this.privIsRoomLocked = isRoomLocked;
        this.privIsRoomLocked = isMuteAll;
        this.privParticipants = participants;
    }
    get sessionToken() {
        return this.privSessionToken;
    }
    get conversationId() {
        return this.privRoomId;
    }
    get translateTo() {
        return this.privTranslateTo;
    }
    get profanityFilter() {
        return this.privProfanityFilter;
    }
    get roomProfanityFilter() {
        return this.privRoomProfanityFilter;
    }
    get isRoomLocked() {
        return this.privIsRoomLocked;
    }
    get isMuteAll() {
        return this.privIsMuteAll;
    }
    get participants() {
        return this.privParticipants;
    }
}
class ConversationReceivedTranslationEventArgs {
    constructor(command, payload, sessionId) {
        this.privPayload = payload;
        this.privCommand = command;
        this.privSessionId = sessionId;
    }
    get payload() {
        return this.privPayload;
    }
    get command() {
        return this.privCommand;
    }
    get sessionId() {
        return this.privSessionId;
    }
}

//# sourceMappingURL=ConversationTranslatorEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationTranslatorInterfaces.js":
/*!************************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationTranslatorInterfaces.js ***!
  \************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConversationTranslatorCommandTypes": () => (/* binding */ ConversationTranslatorCommandTypes),
/* harmony export */   "ConversationTranslatorMessageTypes": () => (/* binding */ ConversationTranslatorMessageTypes),
/* harmony export */   "InternalParticipants": () => (/* binding */ InternalParticipants)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/** Users participating in the conversation */
class InternalParticipants {
    constructor(participants = [], meId) {
        this.participants = participants;
        this.meId = meId;
    }
    /**
     * Add or update a participant
     * @param value
     */
    addOrUpdateParticipant(value) {
        if (value === undefined) {
            return;
        }
        const exists = this.getParticipantIndex(value.id);
        if (exists > -1) {
            this.participants.splice(exists, 1, value);
        }
        else {
            this.participants.push(value);
        }
        // ensure it was added ok
        return this.getParticipant(value.id);
    }
    /**
     * Find the participant's position in the participants list.
     * @param id
     */
    getParticipantIndex(id) {
        return this.participants.findIndex((p) => p.id === id);
    }
    /**
     * Find the participant by id.
     * @param id
     */
    getParticipant(id) {
        return this.participants.find((p) => p.id === id);
    }
    /**
     * Remove a participant from the participants list.
     */
    deleteParticipant(id) {
        this.participants = this.participants.filter((p) => p.id !== id);
    }
    /**
     * Helper to return the conversation host.
     */
    get host() {
        return this.participants.find((p) => p.isHost === true);
    }
    /**
     * Helper to return the current user.
     */
    get me() {
        return this.getParticipant(this.meId);
    }
}
/**
 * List of command message types
 */
const ConversationTranslatorMessageTypes = {
    command: "command",
    final: "final",
    info: "info",
    instantMessage: "instant_message",
    keepAlive: "keep_alive",
    partial: "partial",
    participantCommand: "participant_command",
    translatedMessage: "translated_message"
};
/**
 * List of command types
 */
const ConversationTranslatorCommandTypes = {
    changeNickname: "ChangeNickname",
    disconnectSession: "DisconnectSession",
    ejectParticipant: "EjectParticipant",
    instant_message: "instant_message",
    joinSession: "JoinSession",
    leaveSession: "LeaveSession",
    participantList: "ParticipantList",
    roomExpirationWarning: "RoomExpirationWarning",
    setLockState: "SetLockState",
    setMute: "SetMute",
    setMuteAll: "SetMuteAll",
    setProfanityFiltering: "SetProfanityFiltering",
    setTranslateToLanguages: "SetTranslateToLanguages",
    setUseTTS: "SetUseTTS"
};

//# sourceMappingURL=ConversationTranslatorInterfaces.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationTranslatorRecognizer.js":
/*!************************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationTranslatorRecognizer.js ***!
  \************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConversationRecognizerFactory": () => (/* binding */ ConversationRecognizerFactory),
/* harmony export */   "ConversationTranslatorRecognizer": () => (/* binding */ ConversationTranslatorRecognizer)
/* harmony export */ });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognizerConfig.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Timeout.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Events.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/BackgroundError.js");
/* harmony import */ var _sdk_Contracts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../sdk/Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Recognizer.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Connection.js");
/* harmony import */ var _ConversationConnectionFactory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ConversationConnectionFactory */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationConnectionFactory.js");
/* harmony import */ var _ConversationServiceAdapter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ConversationServiceAdapter */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationServiceAdapter.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// eslint-disable-next-line max-classes-per-file






class ConversationRecognizerFactory {
    static fromConfig(conversation, speechConfig, audioConfig) {
        return new ConversationTranslatorRecognizer(conversation, speechConfig, audioConfig);
    }
}
/**
 * Sends messages to the Conversation Translator websocket and listens for incoming events containing websocket messages.
 * Based off the recognizers in the SDK folder.
 */
class ConversationTranslatorRecognizer extends _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.Recognizer {
    constructor(conversation, speechConfig, audioConfig) {
        const serviceConfigImpl = speechConfig;
        _sdk_Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNull(serviceConfigImpl, "speechConfig");
        const conversationImpl = conversation;
        _sdk_Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNull(conversationImpl, "conversationImpl");
        super(audioConfig, serviceConfigImpl.properties, new _ConversationConnectionFactory__WEBPACK_IMPORTED_MODULE_2__.ConversationConnectionFactory());
        this.privConversation = conversationImpl;
        this.privIsDisposed = false;
        this.privProperties = serviceConfigImpl.properties.clone();
        this.privConnection = _sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.Connection.fromRecognizer(this);
        this.privSetTimeout = (typeof (Blob) !== "undefined" && typeof (Worker) !== "undefined") ? _common_Exports__WEBPACK_IMPORTED_MODULE_4__.Timeout.setTimeout : setTimeout;
        this.privClearTimeout = (typeof (Blob) !== "undefined" && typeof (Worker) !== "undefined") ? _common_Exports__WEBPACK_IMPORTED_MODULE_4__.Timeout.clearTimeout : clearTimeout;
    }
    set connected(cb) {
        this.privConnection.connected = cb;
    }
    set disconnected(cb) {
        this.privConnection.disconnected = cb;
    }
    /**
     * Return the speech language used by the recognizer
     */
    get speechRecognitionLanguage() {
        return this.privSpeechRecognitionLanguage;
    }
    /**
     * Return the properties for the recognizer
     */
    get properties() {
        return this.privProperties;
    }
    isDisposed() {
        return this.privIsDisposed;
    }
    /**
     * Connect to the recognizer
     * @param token
     */
    connect(token, cb, err) {
        try {
            _sdk_Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfDisposed(this.privIsDisposed);
            _sdk_Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(token, "token");
            this.privReco.conversationTranslatorToken = token;
            this.resetConversationTimeout();
            this.privReco.connectAsync(cb, err);
        }
        catch (error) {
            if (!!err) {
                if (error instanceof Error) {
                    const typedError = error;
                    err(typedError.name + ": " + typedError.message);
                }
                else {
                    err(error);
                }
            }
        }
    }
    /**
     * Disconnect from the recognizer
     */
    disconnect(cb, err) {
        try {
            _sdk_Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfDisposed(this.privIsDisposed);
            if (this.privTimeoutToken !== undefined) {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                this.privClearTimeout(this.privTimeoutToken);
            }
            this.privReco.disconnect().then(() => {
                if (!!cb) {
                    cb();
                }
            }, (error) => {
                if (!!err) {
                    err(error);
                }
            });
        }
        catch (error) {
            if (!!err) {
                if (error instanceof Error) {
                    const typedError = error;
                    err(typedError.name + ": " + typedError.message);
                }
                else {
                    err(error);
                }
            }
            // Destroy the recognizer.
            this.dispose(true).catch((reason) => {
                _common_Exports__WEBPACK_IMPORTED_MODULE_5__.Events.instance.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_6__.BackgroundEvent(reason));
            });
        }
    }
    /**
     * Send the mute all participants command to the websocket
     * @param conversationId
     * @param participantId
     * @param isMuted
     */
    sendRequest(command, cb, err) {
        try {
            _sdk_Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfDisposed(this.privIsDisposed);
            this.sendMessage(command, cb, err);
        }
        catch (error) {
            if (!!err) {
                if (error instanceof Error) {
                    const typedError = error;
                    err(typedError.name + ": " + typedError.message);
                }
                else {
                    err(error);
                }
            }
            // Destroy the recognizer.
            this.dispose(true).catch((reason) => {
                _common_Exports__WEBPACK_IMPORTED_MODULE_5__.Events.instance.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_6__.BackgroundEvent(reason));
            });
        }
    }
    /**
     * Close and dispose the recognizer
     */
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.privIsDisposed) {
                if (!!this.privConnection) {
                    this.privConnection.closeConnection();
                    this.privConnection.close();
                }
                this.privConnection = undefined;
                yield this.dispose(true);
            }
        });
    }
    /**
     * Dispose the recognizer
     * @param disposing
     */
    dispose(disposing) {
        const _super = Object.create(null, {
            dispose: { get: () => super.dispose }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (this.privIsDisposed) {
                return;
            }
            if (disposing) {
                if (this.privTimeoutToken !== undefined) {
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                    this.privClearTimeout(this.privTimeoutToken);
                }
                this.privIsDisposed = true;
                if (!!this.privConnection) {
                    this.privConnection.closeConnection();
                    this.privConnection.close();
                    this.privConnection = undefined;
                }
                yield _super.dispose.call(this, disposing);
            }
        });
    }
    /**
     * Create the config for the recognizer
     * @param speechConfig
     */
    createRecognizerConfig(speechConfig) {
        return new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_7__.RecognizerConfig(speechConfig, this.privProperties);
    }
    /**
     * Create the service recognizer.
     * The audio source is redundnant here but is required by the implementation.
     * @param authentication
     * @param connectionFactory
     * @param audioConfig
     * @param recognizerConfig
     */
    createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {
        const audioSource = audioConfig;
        return new _ConversationServiceAdapter__WEBPACK_IMPORTED_MODULE_8__.ConversationServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);
    }
    sendMessage(msg, cb, err) {
        const withAsync = this.privReco;
        const PromiseToEmptyCallback = (promise, cb, err) => {
            if (promise !== undefined) {
                promise.then(() => {
                    try {
                        if (!!cb) {
                            cb();
                        }
                    }
                    catch (e) {
                        if (!!err) {
                            err(`'Unhandled error on promise callback: ${e}'`);
                        }
                    }
                }, (reason) => {
                    try {
                        if (!!err) {
                            err(reason);
                        }
                        // eslint-disable-next-line no-empty
                    }
                    catch (error) { }
                });
            }
            else {
                if (!!err) {
                    err("Null promise");
                }
            }
        };
        PromiseToEmptyCallback(withAsync.sendMessageAsync(msg), cb, err);
        this.resetConversationTimeout();
    }
    resetConversationTimeout() {
        if (this.privTimeoutToken !== undefined) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            this.privClearTimeout(this.privTimeoutToken);
        }
        this.privTimeoutToken = this.privSetTimeout(() => {
            this.sendRequest(this.privConversation.getKeepAlive());
        }, 60000);
    }
}

//# sourceMappingURL=ConversationTranslatorRecognizer.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationWebsocketMessageFormatter.js":
/*!*****************************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationWebsocketMessageFormatter.js ***!
  \*****************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConversationWebsocketMessageFormatter": () => (/* binding */ ConversationWebsocketMessageFormatter)
/* harmony export */ });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/RawWebsocketMessage.js");
/* harmony import */ var _ConversationConnectionMessage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ConversationConnectionMessage */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationConnectionMessage.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


/**
 * Based off WebsocketMessageFormatter. The messages for Conversation Translator have some variations from the Speech messages.
 */
class ConversationWebsocketMessageFormatter {
    /**
     * Format incoming messages: text (speech partial/final, IM) or binary (tts)
     */
    toConnectionMessage(message) {
        const deferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_0__.Deferred();
        try {
            if (message.messageType === _common_Exports__WEBPACK_IMPORTED_MODULE_1__.MessageType.Text) {
                const incomingMessage = new _ConversationConnectionMessage__WEBPACK_IMPORTED_MODULE_2__.ConversationConnectionMessage(message.messageType, message.textContent, {}, message.id);
                deferral.resolve(incomingMessage);
            }
            else if (message.messageType === _common_Exports__WEBPACK_IMPORTED_MODULE_1__.MessageType.Binary) {
                deferral.resolve(new _ConversationConnectionMessage__WEBPACK_IMPORTED_MODULE_2__.ConversationConnectionMessage(message.messageType, message.binaryContent, undefined, message.id));
            }
        }
        catch (e) {
            deferral.reject(`Error formatting the message. Error: ${e}`);
        }
        return deferral.promise;
    }
    /**
     * Format outgoing messages: text (commands or IM)
     */
    fromConnectionMessage(message) {
        const deferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_0__.Deferred();
        try {
            if (message.messageType === _common_Exports__WEBPACK_IMPORTED_MODULE_1__.MessageType.Text) {
                const payload = `${message.textBody ? message.textBody : ""}`;
                deferral.resolve(new _common_Exports__WEBPACK_IMPORTED_MODULE_3__.RawWebsocketMessage(_common_Exports__WEBPACK_IMPORTED_MODULE_1__.MessageType.Text, payload, message.id));
            }
        }
        catch (e) {
            deferral.reject(`Error formatting the message. ${e}`);
        }
        return deferral.promise;
    }
}

//# sourceMappingURL=ConversationWebsocketMessageFormatter.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/Exports.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/Exports.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConversationConnectionConfig": () => (/* reexport safe */ _ConversationConnectionConfig__WEBPACK_IMPORTED_MODULE_1__.ConversationConnectionConfig),
/* harmony export */   "ConversationManager": () => (/* reexport safe */ _ConversationManager__WEBPACK_IMPORTED_MODULE_0__.ConversationManager),
/* harmony export */   "ConversationReceivedTranslationEventArgs": () => (/* reexport safe */ _ConversationTranslatorEventArgs__WEBPACK_IMPORTED_MODULE_4__.ConversationReceivedTranslationEventArgs),
/* harmony export */   "ConversationRecognizerFactory": () => (/* reexport safe */ _ConversationTranslatorRecognizer__WEBPACK_IMPORTED_MODULE_2__.ConversationRecognizerFactory),
/* harmony export */   "ConversationTranslatorCommandTypes": () => (/* reexport safe */ _ConversationTranslatorInterfaces__WEBPACK_IMPORTED_MODULE_5__.ConversationTranslatorCommandTypes),
/* harmony export */   "ConversationTranslatorMessageTypes": () => (/* reexport safe */ _ConversationTranslatorInterfaces__WEBPACK_IMPORTED_MODULE_5__.ConversationTranslatorMessageTypes),
/* harmony export */   "InternalParticipants": () => (/* reexport safe */ _ConversationTranslatorInterfaces__WEBPACK_IMPORTED_MODULE_5__.InternalParticipants),
/* harmony export */   "LockRoomEventArgs": () => (/* reexport safe */ _ConversationTranslatorEventArgs__WEBPACK_IMPORTED_MODULE_4__.LockRoomEventArgs),
/* harmony export */   "MuteAllEventArgs": () => (/* reexport safe */ _ConversationTranslatorEventArgs__WEBPACK_IMPORTED_MODULE_4__.MuteAllEventArgs),
/* harmony export */   "ParticipantAttributeEventArgs": () => (/* reexport safe */ _ConversationTranslatorEventArgs__WEBPACK_IMPORTED_MODULE_4__.ParticipantAttributeEventArgs),
/* harmony export */   "ParticipantEventArgs": () => (/* reexport safe */ _ConversationTranslatorEventArgs__WEBPACK_IMPORTED_MODULE_4__.ParticipantEventArgs),
/* harmony export */   "ParticipantsListEventArgs": () => (/* reexport safe */ _ConversationTranslatorEventArgs__WEBPACK_IMPORTED_MODULE_4__.ParticipantsListEventArgs),
/* harmony export */   "TranscriberRecognizer": () => (/* reexport safe */ _TranscriberRecognizer__WEBPACK_IMPORTED_MODULE_3__.TranscriberRecognizer)
/* harmony export */ });
/* harmony import */ var _ConversationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ConversationManager */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationManager.js");
/* harmony import */ var _ConversationConnectionConfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ConversationConnectionConfig */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationConnectionConfig.js");
/* harmony import */ var _ConversationTranslatorRecognizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ConversationTranslatorRecognizer */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationTranslatorRecognizer.js");
/* harmony import */ var _TranscriberRecognizer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TranscriberRecognizer */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/TranscriberRecognizer.js");
/* harmony import */ var _ConversationTranslatorEventArgs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ConversationTranslatorEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationTranslatorEventArgs.js");
/* harmony import */ var _ConversationTranslatorInterfaces__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ConversationTranslatorInterfaces */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationTranslatorInterfaces.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.







//# sourceMappingURL=Exports.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ServiceMessages/CommandResponsePayload.js":
/*!******************************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ServiceMessages/CommandResponsePayload.js ***!
  \******************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CommandResponsePayload": () => (/* binding */ CommandResponsePayload)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
const parseCommandResponse = (json) => JSON.parse(json);
class CommandResponsePayload {
    constructor(json) {
        this.privCommandResponse = parseCommandResponse(json);
    }
    get type() {
        return this.privCommandResponse.type;
    }
    get command() {
        return this.privCommandResponse.command;
    }
    get id() {
        return this.privCommandResponse.id;
    }
    get nickname() {
        return this.privCommandResponse.nickname;
    }
    get participantId() {
        return this.privCommandResponse.participantId;
    }
    get roomid() {
        return this.privCommandResponse.roomid;
    }
    get value() {
        return this.privCommandResponse.value;
    }
    get token() {
        return this.privCommandResponse.token;
    }
    static fromJSON(json) {
        return new CommandResponsePayload(json);
    }
}

//# sourceMappingURL=CommandResponsePayload.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ServiceMessages/ParticipantResponsePayload.js":
/*!**********************************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ServiceMessages/ParticipantResponsePayload.js ***!
  \**********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ParticipantPayloadResponse": () => (/* binding */ ParticipantPayloadResponse),
/* harmony export */   "ParticipantsListPayloadResponse": () => (/* binding */ ParticipantsListPayloadResponse)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
const parseListResponse = (json) => JSON.parse(json);
const parseParticipantResponse = (json) => JSON.parse(json);
class ParticipantsListPayloadResponse {
    constructor(json) {
        this.privParticipantsPayloadResponse = parseListResponse(json);
    }
    get roomid() {
        return this.privParticipantsPayloadResponse.roomid;
    }
    get id() {
        return this.privParticipantsPayloadResponse.id;
    }
    get command() {
        return this.privParticipantsPayloadResponse.command;
    }
    get participants() {
        return this.privParticipantsPayloadResponse.participants;
    }
    get token() {
        return this.privParticipantsPayloadResponse.token;
    }
    get translateTo() {
        return this.privParticipantsPayloadResponse.translateTo;
    }
    get profanityFilter() {
        return this.privParticipantsPayloadResponse.profanityFilter;
    }
    get roomProfanityFilter() {
        return this.privParticipantsPayloadResponse.roomProfanityFilter;
    }
    get roomLocked() {
        return this.privParticipantsPayloadResponse.roomLocked;
    }
    get muteAll() {
        return this.privParticipantsPayloadResponse.muteAll;
    }
    get type() {
        return this.privParticipantsPayloadResponse.type;
    }
    static fromJSON(json) {
        return new ParticipantsListPayloadResponse(json);
    }
}
class ParticipantPayloadResponse {
    constructor(json) {
        this.privParticipantPayloadResponse = parseParticipantResponse(json);
    }
    get nickname() {
        return this.privParticipantPayloadResponse.nickname;
    }
    get locale() {
        return this.privParticipantPayloadResponse.locale;
    }
    get usetts() {
        return this.privParticipantPayloadResponse.usetts;
    }
    get ismuted() {
        return this.privParticipantPayloadResponse.ismuted;
    }
    get ishost() {
        return this.privParticipantPayloadResponse.ishost;
    }
    get participantId() {
        return this.privParticipantPayloadResponse.participantId;
    }
    get avatar() {
        return this.privParticipantPayloadResponse.avatar;
    }
    static fromJSON(json) {
        return new ParticipantPayloadResponse(json);
    }
}

//# sourceMappingURL=ParticipantResponsePayload.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ServiceMessages/TranslationResponsePayload.js":
/*!**********************************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ServiceMessages/TranslationResponsePayload.js ***!
  \**********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeechResponsePayload": () => (/* binding */ SpeechResponsePayload),
/* harmony export */   "TextResponsePayload": () => (/* binding */ TextResponsePayload)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
const parseSpeechResponse = (json) => JSON.parse(json);
const parseTextResponse = (json) => JSON.parse(json);
class SpeechResponsePayload {
    constructor(json) {
        this.privSpeechResponse = parseSpeechResponse(json);
    }
    get recognition() {
        return this.privSpeechResponse.recognition;
    }
    get translations() {
        return this.privSpeechResponse.translations;
    }
    get id() {
        return this.privSpeechResponse.id;
    }
    get language() {
        return this.privSpeechResponse.language;
    }
    get nickname() {
        return this.privSpeechResponse.nickname;
    }
    get participantId() {
        return this.privSpeechResponse.participantId;
    }
    get roomid() {
        return this.privSpeechResponse.roomid;
    }
    get timestamp() {
        return this.privSpeechResponse.timestamp;
    }
    get type() {
        return this.privSpeechResponse.type;
    }
    get isFinal() {
        return this.privSpeechResponse.type === "final";
    }
    static fromJSON(json) {
        return new SpeechResponsePayload(json);
    }
}
class TextResponsePayload {
    constructor(json) {
        this.privTextResponse = parseTextResponse(json);
    }
    get originalText() {
        return this.privTextResponse.originalText;
    }
    get translations() {
        return this.privTextResponse.translations;
    }
    get id() {
        return this.privTextResponse.id;
    }
    get language() {
        return this.privTextResponse.language;
    }
    get nickname() {
        return this.privTextResponse.nickname;
    }
    get participantId() {
        return this.privTextResponse.participantId;
    }
    get roomid() {
        return this.privTextResponse.roomid;
    }
    get timestamp() {
        return this.privTextResponse.timestamp;
    }
    get type() {
        return this.privTextResponse.type;
    }
    static fromJSON(json) {
        return new TextResponsePayload(json);
    }
}

//# sourceMappingURL=TranslationResponsePayload.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/TranscriberRecognizer.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/TranscriberRecognizer.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TranscriberRecognizer": () => (/* binding */ TranscriberRecognizer)
/* harmony export */ });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js");
/* harmony import */ var _sdk_Contracts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../sdk/Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Recognizer.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranscriberConnectionFactory.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognizerConfig.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranscriptionServiceRecognizer.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class TranscriberRecognizer extends _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.Recognizer {
    /**
     * TranscriberRecognizer constructor.
     * @constructor
     * @param {SpeechTranslationConfig} speechTranslationConfig - Non-audio configuration associated with the recognizer
     * @param {AudioConfig} audioConfig - An audio configuration associated with the recognizer
     */
    constructor(speechTranslationConfig, audioConfig) {
        const speechTranslationConfigImpl = speechTranslationConfig;
        _sdk_Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNull(speechTranslationConfigImpl, "speechTranslationConfig");
        const audioConfigImpl = audioConfig;
        _sdk_Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNull(audioConfigImpl, "audioConfigImpl");
        _sdk_Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(speechTranslationConfigImpl.speechRecognitionLanguage, _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId[_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_RecoLanguage]);
        super(audioConfig, speechTranslationConfigImpl.properties, new _Exports__WEBPACK_IMPORTED_MODULE_3__.TranscriberConnectionFactory());
        this.privDisposedRecognizer = false;
    }
    get speechRecognitionLanguage() {
        _sdk_Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfDisposed(this.privDisposedRecognizer);
        return this.properties.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_RecoLanguage);
    }
    get properties() {
        return this.privProperties;
    }
    get authorizationToken() {
        return this.properties.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceAuthorization_Token);
    }
    set authorizationToken(token) {
        _sdk_Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(token, "token");
        this.properties.setProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceAuthorization_Token, token);
    }
    set conversation(c) {
        _sdk_Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrUndefined(c, "Conversation");
        this.privConversation = c;
    }
    getConversationInfo() {
        _sdk_Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrUndefined(this.privConversation, "Conversation");
        return this.privConversation.conversationInfo;
    }
    startContinuousRecognitionAsync(cb, err) {
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_4__.marshalPromiseToCallbacks)(this.startContinuousRecognitionAsyncImpl(_Exports__WEBPACK_IMPORTED_MODULE_5__.RecognitionMode.Conversation), cb, err);
    }
    stopContinuousRecognitionAsync(cb, err) {
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_4__.marshalPromiseToCallbacks)(this.stopContinuousRecognitionAsyncImpl(), cb, err);
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.privDisposedRecognizer) {
                yield this.dispose(true);
            }
        });
    }
    // Push async join/leave conversation message via serviceRecognizer
    pushConversationEvent(conversationInfo, command) {
        return __awaiter(this, void 0, void 0, function* () {
            const reco = (this.privReco);
            _sdk_Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrUndefined(reco, "serviceRecognizer");
            yield reco.sendSpeechEventAsync(conversationInfo, command);
        });
    }
    enforceAudioGating() {
        return __awaiter(this, void 0, void 0, function* () {
            const audioConfigImpl = this.audioConfig;
            const format = yield audioConfigImpl.format;
            const channels = format.channels;
            if (channels === 1) {
                if (this.properties.getProperty("f0f5debc-f8c9-4892-ac4b-90a7ab359fd2", "false").toLowerCase() !== "true") {
                    throw new Error("Single channel audio configuration for ConversationTranscriber is currently under private preview, please contact diarizationrequest@microsoft.com for more details");
                }
            }
            else if (channels !== 8) {
                throw new Error(`Unsupported audio configuration: Detected ${channels}-channel audio`);
            }
            return;
        });
    }
    connectCallbacks(transcriber) {
        this.canceled = (s, e) => {
            if (!!transcriber.canceled) {
                transcriber.canceled(transcriber, e);
            }
        };
        this.recognizing = (s, e) => {
            if (!!transcriber.transcribing) {
                transcriber.transcribing(transcriber, e);
            }
        };
        this.recognized = (s, e) => {
            if (!!transcriber.transcribed) {
                transcriber.transcribed(transcriber, e);
            }
        };
        this.sessionStarted = (s, e) => {
            if (!!transcriber.sessionStarted) {
                transcriber.sessionStarted(transcriber, e);
            }
        };
        this.sessionStopped = (s, e) => {
            if (!!transcriber.sessionStopped) {
                transcriber.sessionStopped(transcriber, e);
            }
        };
    }
    disconnectCallbacks() {
        this.canceled = undefined;
        this.recognizing = undefined;
        this.recognized = undefined;
        this.sessionStarted = undefined;
        this.sessionStopped = undefined;
    }
    /**
     * Disposes any resources held by the object.
     * @member ConversationTranscriber.prototype.dispose
     * @function
     * @public
     * @param {boolean} disposing - true if disposing the object.
     */
    dispose(disposing) {
        const _super = Object.create(null, {
            dispose: { get: () => super.dispose }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (this.privDisposedRecognizer) {
                return;
            }
            if (disposing) {
                this.privDisposedRecognizer = true;
                yield this.implRecognizerStop();
            }
            yield _super.dispose.call(this, disposing);
        });
    }
    createRecognizerConfig(speechConfig) {
        return new _Exports__WEBPACK_IMPORTED_MODULE_5__.RecognizerConfig(speechConfig, this.properties);
    }
    createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {
        const configImpl = audioConfig;
        return new _Exports__WEBPACK_IMPORTED_MODULE_6__.TranscriptionServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);
    }
}

//# sourceMappingURL=TranscriberRecognizer.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranscriptionServiceRecognizer.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranscriptionServiceRecognizer.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TranscriptionServiceRecognizer": () => (/* binding */ TranscriptionServiceRecognizer)
/* harmony export */ });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionEventArgs.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationErrorCodes.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ConversationTranscriptionCanceledEventArgs.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionResult.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ResultReason.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ConversationServiceRecognizer.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./SpeechConnectionMessage.Internal */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechConnectionMessage.Internal.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




// eslint-disable-next-line max-classes-per-file
class TranscriptionServiceRecognizer extends _Exports__WEBPACK_IMPORTED_MODULE_0__.ConversationServiceRecognizer {
    constructor(authentication, connectionFactory, audioSource, recognizerConfig, transcriber) {
        super(authentication, connectionFactory, audioSource, recognizerConfig, transcriber);
        this.privTranscriberRecognizer = transcriber;
        this.sendPrePayloadJSONOverride = (connection) => this.sendTranscriptionStartJSON(connection);
        if (this.privRecognizerConfig.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps) === "true") {
            this.privSpeechContext.setWordLevelTimings();
        }
    }
    sendSpeechEventAsync(info, command) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!!this.privRequestSession.isRecognizing) {
                const connection = yield this.fetchConnection();
                yield this.sendSpeechEvent(connection, this.createSpeechEventPayload(info, command));
            }
        });
    }
    processTypeSpecificMessages(connectionMessage) {
        return this.processSpeechMessages(connectionMessage);
    }
    handleRecognizedCallback(result, offset, sessionId) {
        try {
            const event = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.SpeechRecognitionEventArgs(result, offset, sessionId);
            this.privTranscriberRecognizer.recognized(this.privTranscriberRecognizer, event);
            if (!!this.privSuccessCallback) {
                try {
                    this.privSuccessCallback(result);
                }
                catch (e) {
                    if (!!this.privErrorCallback) {
                        this.privErrorCallback(e);
                    }
                }
                // Only invoke the call back once.
                // and if it's successful don't invoke the
                // error after that.
                this.privSuccessCallback = undefined;
                this.privErrorCallback = undefined;
            }
            /* eslint-disable no-empty */
        }
        catch (error) {
            // Not going to let errors in the event handler
            // trip things up.
        }
    }
    handleRecognizingCallback(result, duration, sessionId) {
        try {
            const ev = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.SpeechRecognitionEventArgs(result, duration, sessionId);
            this.privTranscriberRecognizer.recognizing(this.privTranscriberRecognizer, ev);
            /* eslint-disable no-empty */
        }
        catch (error) {
            // Not going to let errors in the event handler
            // trip things up.
        }
    }
    // Cancels recognition.
    cancelRecognition(sessionId, requestId, cancellationReason, errorCode, error) {
        const properties = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyCollection();
        properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_4__.CancellationErrorCodePropertyName, _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.CancellationErrorCode[errorCode]);
        if (!!this.privTranscriberRecognizer.canceled) {
            const cancelEvent = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__.ConversationTranscriptionCanceledEventArgs(cancellationReason, error, errorCode, undefined, sessionId);
            try {
                this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);
                /* eslint-disable no-empty */
            }
            catch (_a) { }
        }
        if (!!this.privSuccessCallback) {
            const result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_7__.SpeechRecognitionResult(requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_8__.ResultReason.Canceled, undefined, // Text
            undefined, // Duration
            undefined, // Offset
            undefined, // Language
            undefined, // Language Detection Confidence
            undefined, // Speaker Id
            error, undefined, // Json
            properties);
            try {
                this.privSuccessCallback(result);
                this.privSuccessCallback = undefined;
                /* eslint-disable no-empty */
            }
            catch (_b) { }
        }
    }
    // Encapsulated for derived service recognizers that need to send additional JSON
    sendTranscriptionStartJSON(connection) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.sendSpeechContext(connection, true);
            const info = this.privTranscriberRecognizer.getConversationInfo();
            const payload = this.createSpeechEventPayload(info, "start");
            yield this.sendSpeechEvent(connection, payload);
            yield this.sendWaveHeader(connection);
            return;
        });
    }
    sendSpeechEvent(connection, payload) {
        const speechEventJson = JSON.stringify(payload);
        if (speechEventJson) {
            return connection.send(new _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_9__.SpeechConnectionMessage(_common_Exports__WEBPACK_IMPORTED_MODULE_10__.MessageType.Text, "speech.event", this.privRequestSession.requestId, "application/json", speechEventJson));
        }
        return;
    }
    createSpeechEventPayload(info, command) {
        const eventDict = { id: "meeting", name: command, meeting: info.conversationProperties };
        eventDict.meeting.id = info.id;
        eventDict.meeting.attendees = info.participants;
        eventDict.meeting.record = info.conversationProperties.audiorecording === "on" ? "true" : "false";
        return eventDict;
    }
}

//# sourceMappingURL=TranscriptionServiceRecognizer.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranslationConnectionFactory.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranslationConnectionFactory.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TranslationConnectionFactory": () => (/* binding */ TranslationConnectionFactory)
/* harmony export */ });
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/WebsocketConnection.js");
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ProxyInfo.js");
/* harmony import */ var _common_StringUtils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common/StringUtils */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/StringUtils.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ConnectionFactoryBase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ConnectionFactoryBase.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/WebsocketMessageFormatter.js");
/* harmony import */ var _HeaderNames__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./HeaderNames */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/HeaderNames.js");
/* harmony import */ var _QueryParameterNames__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./QueryParameterNames */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/QueryParameterNames.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.







class TranslationConnectionFactory extends _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_0__.ConnectionFactoryBase {
    create(config, authInfo, connectionId) {
        const endpoint = this.getEndpointUrl(config);
        const queryParams = {};
        if (config.autoDetectSourceLanguages !== undefined) {
            queryParams[_QueryParameterNames__WEBPACK_IMPORTED_MODULE_1__.QueryParameterNames.EnableLanguageId] = "true";
        }
        this.setQueryParams(queryParams, config, endpoint);
        const headers = {};
        if (authInfo.token !== undefined && authInfo.token !== "") {
            headers[authInfo.headerName] = authInfo.token;
        }
        headers[_HeaderNames__WEBPACK_IMPORTED_MODULE_2__.HeaderNames.ConnectionId] = connectionId;
        config.parameters.setProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_Url, endpoint);
        const enableCompression = config.parameters.getProperty("SPEECH-EnableWebsocketCompression", "false") === "true";
        return new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_4__.WebsocketConnection(endpoint, queryParams, headers, new _Exports__WEBPACK_IMPORTED_MODULE_5__.WebsocketMessageFormatter(), _common_browser_Exports__WEBPACK_IMPORTED_MODULE_6__.ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);
    }
    getEndpointUrl(config, returnRegionPlaceholder) {
        const region = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_Region);
        const hostSuffix = _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_0__.ConnectionFactoryBase.getHostSuffix(region);
        let endpointUrl = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_Endpoint, undefined);
        if (!endpointUrl) {
            if (config.autoDetectSourceLanguages !== undefined) {
                const host = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_Host, "wss://{region}.stt.speech" + hostSuffix);
                endpointUrl = host + "/speech/universal/v2";
            }
            else {
                const host = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_Host, "wss://{region}.s2s.speech" + hostSuffix);
                endpointUrl = host + "/speech/translation/cognitiveservices/v1";
            }
        }
        if (returnRegionPlaceholder === true) {
            return endpointUrl;
        }
        return _common_StringUtils__WEBPACK_IMPORTED_MODULE_7__.StringUtils.formatString(endpointUrl, { region });
    }
    setQueryParams(queryParams, config, endpointUrl) {
        queryParams.from = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_RecoLanguage);
        queryParams.to = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_TranslationToLanguages);
        this.setCommonUrlParams(config, queryParams, endpointUrl);
        this.setUrlParameter(_sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceResponse_TranslationRequestStablePartialResult, _QueryParameterNames__WEBPACK_IMPORTED_MODULE_1__.QueryParameterNames.StableTranslation, config, queryParams, endpointUrl);
        const translationVoice = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_TranslationVoice, undefined);
        if (translationVoice !== undefined) {
            queryParams.voice = translationVoice;
            queryParams.features = "texttospeech";
        }
    }
}

//# sourceMappingURL=TranslationConnectionFactory.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranslationServiceRecognizer.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranslationServiceRecognizer.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TranslationServiceRecognizer": () => (/* binding */ TranslationServiceRecognizer)
/* harmony export */ });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranslationStatus.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationRecognitionResult.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ResultReason.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationRecognitionEventArgs.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationSynthesisResult.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationSynthesisEventArgs.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationRecognitionCanceledEventArgs.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationReason.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationErrorCodes.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Translations.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ConversationServiceRecognizer.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/Enums.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/EnumTranslation.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/TranslationHypothesis.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/TranslationPhrase.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/TranslationSynthesisEnd.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



// eslint-disable-next-line max-classes-per-file
class TranslationServiceRecognizer extends _Exports__WEBPACK_IMPORTED_MODULE_0__.ConversationServiceRecognizer {
    constructor(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer) {
        super(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer);
        this.privTranslationRecognizer = translationRecognizer;
        this.connectionEvents.attach((connectionEvent) => {
            if (connectionEvent.name === "ConnectionEstablishedEvent") {
                this.privTranslationRecognizer.onConnection();
            }
            else if (connectionEvent.name === "ConnectionClosedEvent") {
                void this.privTranslationRecognizer.onDisconnection();
            }
        });
    }
    processTypeSpecificMessages(connectionMessage) {
        return __awaiter(this, void 0, void 0, function* () {
            const resultProps = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyCollection();
            let processed = yield this.processSpeechMessages(connectionMessage);
            if (processed) {
                return true;
            }
            const handleTranslationPhrase = (translatedPhrase) => __awaiter(this, void 0, void 0, function* () {
                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset + translatedPhrase.Duration);
                if (translatedPhrase.RecognitionStatus === _Exports__WEBPACK_IMPORTED_MODULE_2__.RecognitionStatus.Success) {
                    // OK, the recognition was successful. How'd the translation do?
                    const result = this.fireEventForResult(translatedPhrase, resultProps);
                    if (!!this.privTranslationRecognizer.recognized) {
                        try {
                            this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, result);
                            /* eslint-disable no-empty */
                        }
                        catch (error) {
                            // Not going to let errors in the event handler
                            // trip things up.
                        }
                    }
                    // report result to promise.
                    if (!!this.privSuccessCallback) {
                        try {
                            this.privSuccessCallback(result.result);
                        }
                        catch (e) {
                            if (!!this.privErrorCallback) {
                                this.privErrorCallback(e);
                            }
                        }
                        // Only invoke the call back once.
                        // and if it's successful don't invoke the
                        // error after that.
                        this.privSuccessCallback = undefined;
                        this.privErrorCallback = undefined;
                    }
                }
                else {
                    const reason = _Exports__WEBPACK_IMPORTED_MODULE_3__.EnumTranslation.implTranslateRecognitionResult(translatedPhrase.RecognitionStatus);
                    const result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_4__.TranslationRecognitionResult(undefined, this.privRequestSession.requestId, reason, translatedPhrase.Text, translatedPhrase.Duration, this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset, translatedPhrase.Language, translatedPhrase.Confidence, undefined, connectionMessage.textBody, resultProps);
                    if (reason === _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.ResultReason.Canceled) {
                        const cancelReason = _Exports__WEBPACK_IMPORTED_MODULE_3__.EnumTranslation.implTranslateCancelResult(translatedPhrase.RecognitionStatus);
                        const cancellationErrorCode = _Exports__WEBPACK_IMPORTED_MODULE_3__.EnumTranslation.implTranslateCancelErrorCode(translatedPhrase.RecognitionStatus);
                        yield this.cancelRecognitionLocal(cancelReason, cancellationErrorCode, _Exports__WEBPACK_IMPORTED_MODULE_3__.EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));
                    }
                    else {
                        if (!(this.privRequestSession.isSpeechEnded && reason === _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.ResultReason.NoMatch && translatedPhrase.RecognitionStatus !== _Exports__WEBPACK_IMPORTED_MODULE_2__.RecognitionStatus.InitialSilenceTimeout)) {
                            const ev = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__.TranslationRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);
                            if (!!this.privTranslationRecognizer.recognized) {
                                try {
                                    this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);
                                    /* eslint-disable no-empty */
                                }
                                catch (error) {
                                    // Not going to let errors in the event handler
                                    // trip things up.
                                }
                            }
                        }
                        // report result to promise.
                        if (!!this.privSuccessCallback) {
                            try {
                                this.privSuccessCallback(result);
                            }
                            catch (e) {
                                if (!!this.privErrorCallback) {
                                    this.privErrorCallback(e);
                                }
                            }
                            // Only invoke the call back once.
                            // and if it's successful don't invoke the
                            // error after that.
                            this.privSuccessCallback = undefined;
                            this.privErrorCallback = undefined;
                        }
                    }
                    processed = true;
                }
            });
            if (connectionMessage.messageType === _common_Exports__WEBPACK_IMPORTED_MODULE_7__.MessageType.Text) {
                resultProps.setProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_8__.PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);
            }
            switch (connectionMessage.path.toLowerCase()) {
                case "translation.hypothesis":
                    const result = this.fireEventForResult(_Exports__WEBPACK_IMPORTED_MODULE_9__.TranslationHypothesis.fromJSON(connectionMessage.textBody), resultProps);
                    this.privRequestSession.onHypothesis(this.privRequestSession.currentTurnAudioOffset + result.offset);
                    if (!!this.privTranslationRecognizer.recognizing) {
                        try {
                            this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, result);
                            /* eslint-disable no-empty */
                        }
                        catch (error) {
                            // Not going to let errors in the event handler
                            // trip things up.
                        }
                    }
                    processed = true;
                    break;
                case "translation.response":
                    const phrase = JSON.parse(connectionMessage.textBody);
                    if (!!phrase.SpeechPhrase) {
                        yield handleTranslationPhrase(_Exports__WEBPACK_IMPORTED_MODULE_10__.TranslationPhrase.fromTranslationResponse(phrase));
                    }
                    break;
                case "translation.phrase":
                    yield handleTranslationPhrase(_Exports__WEBPACK_IMPORTED_MODULE_10__.TranslationPhrase.fromJSON(connectionMessage.textBody));
                    break;
                case "translation.synthesis":
                    this.sendSynthesisAudio(connectionMessage.binaryBody, this.privRequestSession.sessionId);
                    processed = true;
                    break;
                case "audio.end":
                case "translation.synthesis.end":
                    const synthEnd = _Exports__WEBPACK_IMPORTED_MODULE_11__.TranslationSynthesisEnd.fromJSON(connectionMessage.textBody);
                    switch (synthEnd.SynthesisStatus) {
                        case _Exports__WEBPACK_IMPORTED_MODULE_2__.SynthesisStatus.Error:
                            if (!!this.privTranslationRecognizer.synthesizing) {
                                const result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_12__.TranslationSynthesisResult(_sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.ResultReason.Canceled, undefined);
                                const retEvent = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_13__.TranslationSynthesisEventArgs(result, this.privRequestSession.sessionId);
                                try {
                                    this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);
                                    /* eslint-disable no-empty */
                                }
                                catch (error) {
                                    // Not going to let errors in the event handler
                                    // trip things up.
                                }
                            }
                            if (!!this.privTranslationRecognizer.canceled) {
                                // And raise a canceled event to send the rich(er) error message back.
                                const canceledResult = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_14__.TranslationRecognitionCanceledEventArgs(this.privRequestSession.sessionId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_15__.CancellationReason.Error, synthEnd.FailureReason, _sdk_Exports__WEBPACK_IMPORTED_MODULE_16__.CancellationErrorCode.ServiceError, null);
                                try {
                                    this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, canceledResult);
                                    /* eslint-disable no-empty */
                                }
                                catch (error) {
                                    // Not going to let errors in the event handler
                                    // trip things up.
                                }
                            }
                            break;
                        case _Exports__WEBPACK_IMPORTED_MODULE_2__.SynthesisStatus.Success:
                            this.sendSynthesisAudio(undefined, this.privRequestSession.sessionId);
                            break;
                        default:
                            break;
                    }
                    processed = true;
                    break;
                default:
                    break;
            }
            return processed;
        });
    }
    // Cancels recognition.
    cancelRecognition(sessionId, requestId, cancellationReason, errorCode, error) {
        const properties = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyCollection();
        properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_17__.CancellationErrorCodePropertyName, _sdk_Exports__WEBPACK_IMPORTED_MODULE_16__.CancellationErrorCode[errorCode]);
        if (!!this.privTranslationRecognizer.canceled) {
            const cancelEvent = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_14__.TranslationRecognitionCanceledEventArgs(sessionId, cancellationReason, error, errorCode, undefined);
            try {
                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, cancelEvent);
                /* eslint-disable no-empty */
            }
            catch (_a) { }
        }
        if (!!this.privSuccessCallback) {
            const result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_4__.TranslationRecognitionResult(undefined, // Translations
            requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.ResultReason.Canceled, undefined, // Text
            undefined, // Druation
            undefined, // Offset
            undefined, // Language
            undefined, // LanguageDetectionConfidence
            error, undefined, // Json
            properties);
            try {
                this.privSuccessCallback(result);
                /* eslint-disable no-empty */
                this.privSuccessCallback = undefined;
            }
            catch (_b) { }
        }
    }
    handleRecognizingCallback(result, duration, sessionId) {
        try {
            const ev = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__.TranslationRecognitionEventArgs(_sdk_Exports__WEBPACK_IMPORTED_MODULE_4__.TranslationRecognitionResult.fromSpeechRecognitionResult(result), duration, sessionId);
            this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, ev);
            /* eslint-disable no-empty */
        }
        catch (error) {
            // Not going to let errors in the event handler
            // trip things up.
        }
    }
    handleRecognizedCallback(result, offset, sessionId) {
        try {
            const ev = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__.TranslationRecognitionEventArgs(_sdk_Exports__WEBPACK_IMPORTED_MODULE_4__.TranslationRecognitionResult.fromSpeechRecognitionResult(result), offset, sessionId);
            this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);
        }
        catch (error) {
            // Not going to let errors in the event handler
            // trip things up.
        }
    }
    fireEventForResult(serviceResult, properties) {
        let translations;
        if (undefined !== serviceResult.Translation.Translations) {
            translations = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_18__.Translations();
            for (const translation of serviceResult.Translation.Translations) {
                translations.set(translation.Language, translation.Text || translation.DisplayText);
            }
        }
        let resultReason;
        let language;
        let confidence;
        if (serviceResult instanceof _Exports__WEBPACK_IMPORTED_MODULE_10__.TranslationPhrase) {
            if (!!serviceResult.Translation && serviceResult.Translation.TranslationStatus === _common_Exports__WEBPACK_IMPORTED_MODULE_19__.TranslationStatus.Success) {
                resultReason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.ResultReason.TranslatedSpeech;
            }
            else {
                resultReason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.ResultReason.RecognizedSpeech;
            }
            language = serviceResult.Language;
            confidence = serviceResult.Confidence;
        }
        else {
            resultReason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.ResultReason.TranslatingSpeech;
        }
        const offset = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;
        const result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_4__.TranslationRecognitionResult(translations, this.privRequestSession.requestId, resultReason, serviceResult.Text, serviceResult.Duration, offset, language, confidence, serviceResult.Translation.FailureReason, JSON.stringify(serviceResult), properties);
        const ev = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_6__.TranslationRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);
        return ev;
    }
    sendSynthesisAudio(audio, sessionId) {
        const reason = (undefined === audio) ? _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.ResultReason.SynthesizingAudioCompleted : _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.ResultReason.SynthesizingAudio;
        const result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_12__.TranslationSynthesisResult(reason, audio);
        const retEvent = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_13__.TranslationSynthesisEventArgs(result, sessionId);
        if (!!this.privTranslationRecognizer.synthesizing) {
            try {
                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);
                /* eslint-disable no-empty */
            }
            catch (error) {
                // Not going to let errors in the event handler
                // trip things up.
            }
        }
    }
}

//# sourceMappingURL=TranslationServiceRecognizer.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranslationStatus.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranslationStatus.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TranslationStatus": () => (/* binding */ TranslationStatus)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Defines translation status.
 * @class TranslationStatus
 */
var TranslationStatus;
(function (TranslationStatus) {
    /**
     * @member TranslationStatus.Success
     */
    TranslationStatus[TranslationStatus["Success"] = 0] = "Success";
    /**
     * @member TranslationStatus.Error
     */
    TranslationStatus[TranslationStatus["Error"] = 1] = "Error";
})(TranslationStatus || (TranslationStatus = {}));

//# sourceMappingURL=TranslationStatus.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/VoiceServiceRecognizer.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/VoiceServiceRecognizer.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VoiceServiceRecognizer": () => (/* binding */ VoiceServiceRecognizer)
/* harmony export */ });
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ReplayableAudioNode.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/DeferralMap.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceProfileEnrollmentResult.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationErrorCodes.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ResultReason.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationReason.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SessionEventArgs.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceProfileType.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceProfilePhraseResult.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceProfileResult.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceRecognizerBase.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./SpeechConnectionMessage.Internal */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechConnectionMessage.Internal.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





// eslint-disable-next-line max-classes-per-file
class VoiceServiceRecognizer extends _Exports__WEBPACK_IMPORTED_MODULE_0__.ServiceRecognizerBase {
    constructor(authentication, connectionFactory, audioSource, recognizerConfig, recognizer) {
        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);
        this.privDeferralMap = new _common_Exports__WEBPACK_IMPORTED_MODULE_1__.DeferralMap();
        this.privSpeakerAudioSource = audioSource;
        this.sendPrePayloadJSONOverride = () => this.noOp();
    }
    set SpeakerAudioSource(audioSource) {
        this.privSpeakerAudioSource = audioSource;
    }
    processTypeSpecificMessages(connectionMessage) {
        let processed = false;
        const resultProps = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyCollection();
        if (connectionMessage.messageType === _common_Exports__WEBPACK_IMPORTED_MODULE_3__.MessageType.Text) {
            resultProps.setProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);
        }
        switch (connectionMessage.path.toLowerCase()) {
            // Profile management response for create, fetch, delete, reset
            case "speaker.profiles":
                const response = JSON.parse(connectionMessage.textBody);
                switch (response.operation.toLowerCase()) {
                    case "create":
                        this.handleCreateResponse(response, connectionMessage.requestId);
                        break;
                    case "delete":
                    case "reset":
                        this.handleResultResponse(response, connectionMessage.requestId);
                        break;
                    case "fetch":
                        const enrollmentResponse = JSON.parse(connectionMessage.textBody);
                        this.handleFetchResponse(enrollmentResponse, connectionMessage.requestId);
                        break;
                    default:
                        break;
                }
                processed = true;
                break;
            // Activation and authorization phrase response
            case "speaker.phrases":
                const phraseResponse = JSON.parse(connectionMessage.textBody);
                this.handlePhrasesResponse(phraseResponse, connectionMessage.requestId);
                processed = true;
                break;
            // Enrollment response
            case "speaker.profile.enrollment":
                const enrollmentResponse = JSON.parse(connectionMessage.textBody);
                const result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.VoiceProfileEnrollmentResult(this.enrollmentReasonFrom(!!enrollmentResponse.enrollment ? enrollmentResponse.enrollment.enrollmentStatus : enrollmentResponse.status.statusCode), !!enrollmentResponse.enrollment ? JSON.stringify(enrollmentResponse.enrollment) : undefined, enrollmentResponse.status.reason);
                if (!!this.privDeferralMap.getId(connectionMessage.requestId)) {
                    this.privDeferralMap.complete(connectionMessage.requestId, result);
                }
                this.privRequestSession.onSpeechEnded();
                processed = true;
                break;
            default:
                break;
        }
        const defferal = new _common_Exports__WEBPACK_IMPORTED_MODULE_6__.Deferred();
        defferal.resolve(processed);
        return defferal.promise;
    }
    // Cancels recognition.
    cancelRecognition(sessionId, requestId, cancellationReason, errorCode, error) {
        const properties = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyCollection();
        // const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;
        properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_7__.CancellationErrorCodePropertyName, _sdk_Exports__WEBPACK_IMPORTED_MODULE_8__.CancellationErrorCode[errorCode]);
        const result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.VoiceProfileEnrollmentResult(_sdk_Exports__WEBPACK_IMPORTED_MODULE_9__.ResultReason.Canceled, error, error);
        if (!!this.privDeferralMap.getId(requestId)) {
            this.privDeferralMap.complete(requestId, result);
        }
    }
    createProfile(profileType, locale) {
        return __awaiter(this, void 0, void 0, function* () {
            // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().
            this.voiceProfileType = profileType.toString();
            const conPromise = this.connectImpl();
            try {
                const createProfileDeferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_6__.Deferred();
                yield conPromise;
                yield this.sendCreateProfile(createProfileDeferral, profileType, locale);
                void this.receiveMessage();
                return createProfileDeferral.promise;
            }
            catch (err) {
                throw err;
            }
        });
    }
    resetProfile(profile) {
        return __awaiter(this, void 0, void 0, function* () {
            this.voiceProfileType = profile.profileType.toString();
            return this.sendCommonRequest("reset", profile.profileType, profile);
        });
    }
    deleteProfile(profile) {
        return __awaiter(this, void 0, void 0, function* () {
            this.voiceProfileType = profile.profileType.toString();
            return this.sendCommonRequest("delete", profile.profileType, profile);
        });
    }
    retrieveEnrollmentResult(profile) {
        return __awaiter(this, void 0, void 0, function* () {
            this.voiceProfileType = profile.profileType.toString();
            this.privExpectedProfileId = profile.profileId;
            return this.sendCommonRequest("fetch", profile.profileType, profile);
        });
    }
    getAllProfiles(profileType) {
        return __awaiter(this, void 0, void 0, function* () {
            this.voiceProfileType = profileType.toString();
            return this.sendCommonRequest("fetch", profileType);
        });
    }
    getActivationPhrases(profileType, lang) {
        return __awaiter(this, void 0, void 0, function* () {
            this.voiceProfileType = profileType.toString();
            // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().
            const conPromise = this.connectImpl();
            try {
                const getPhrasesDeferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_6__.Deferred();
                yield conPromise;
                yield this.sendPhrasesRequest(getPhrasesDeferral, profileType, lang);
                void this.receiveMessage();
                return getPhrasesDeferral.promise;
            }
            catch (err) {
                throw err;
            }
        });
    }
    enrollProfile(profile) {
        return __awaiter(this, void 0, void 0, function* () {
            this.voiceProfileType = profile.profileType.toString();
            const enrollmentDeferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_6__.Deferred();
            this.privRequestSession.startNewRecognition();
            this.privRequestSession.listenForServiceTelemetry(this.privSpeakerAudioSource.events);
            this.privRecognizerConfig.parameters.setProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.Speech_SessionId, this.privRequestSession.sessionId);
            // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().
            const conPromise = this.connectImpl();
            const preAudioPromise = this.sendPreAudioMessages(profile, enrollmentDeferral);
            const node = yield this.privSpeakerAudioSource.attach(this.privRequestSession.audioNodeId);
            const format = yield this.privSpeakerAudioSource.format;
            const deviceInfo = yield this.privSpeakerAudioSource.deviceInfo;
            const audioNode = new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_10__.ReplayableAudioNode(node, format.avgBytesPerSec);
            yield this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);
            this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };
            try {
                yield conPromise;
                yield preAudioPromise;
            }
            catch (err) {
                this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_11__.CancellationReason.Error, _sdk_Exports__WEBPACK_IMPORTED_MODULE_8__.CancellationErrorCode.ConnectionFailure, err);
            }
            const sessionStartEventArgs = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_12__.SessionEventArgs(this.privRequestSession.sessionId);
            if (!!this.privRecognizer.sessionStarted) {
                this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);
            }
            void this.receiveMessage();
            const audioSendPromise = this.sendAudio(audioNode);
            // /* eslint-disable no-empty */
            audioSendPromise.then(() => { }, (error) => {
                this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_11__.CancellationReason.Error, _sdk_Exports__WEBPACK_IMPORTED_MODULE_8__.CancellationErrorCode.RuntimeError, error);
            });
            return enrollmentDeferral.promise;
        });
    }
    sendPreAudioMessages(profile, enrollmentDeferral) {
        return __awaiter(this, void 0, void 0, function* () {
            const connection = yield this.fetchConnection();
            this.privRequestSession.onSpeechContext();
            this.privDeferralMap.add(this.privRequestSession.requestId, enrollmentDeferral);
            yield this.sendBaseRequest(connection, "enroll", this.scenarioFrom(profile.profileType), profile);
        });
    }
    sendPhrasesRequest(getPhrasesDeferral, profileType, locale) {
        return __awaiter(this, void 0, void 0, function* () {
            const connection = yield this.fetchConnection();
            this.privRequestSession.onSpeechContext();
            this.privDeferralMap.add(this.privRequestSession.requestId, getPhrasesDeferral);
            const scenario = this.scenarioFrom(profileType);
            const profileCreateRequest = {
                locale,
                scenario,
            };
            return connection.send(new _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_13__.SpeechConnectionMessage(_common_Exports__WEBPACK_IMPORTED_MODULE_3__.MessageType.Text, "speaker.profile.phrases", this.privRequestSession.requestId, "application/json; charset=utf-8", JSON.stringify(profileCreateRequest)));
        });
    }
    sendCreateProfile(createProfileDeferral, profileType, locale) {
        return __awaiter(this, void 0, void 0, function* () {
            const connection = yield this.fetchConnection();
            this.privRequestSession.onSpeechContext();
            this.privDeferralMap.add(this.privRequestSession.requestId, createProfileDeferral);
            const scenario = profileType === _sdk_Exports__WEBPACK_IMPORTED_MODULE_14__.VoiceProfileType.TextIndependentIdentification ? "TextIndependentIdentification" :
                profileType === _sdk_Exports__WEBPACK_IMPORTED_MODULE_14__.VoiceProfileType.TextIndependentVerification ? "TextIndependentVerification" : "TextDependentVerification";
            const profileCreateRequest = {
                locale,
                number: "1",
                scenario,
            };
            return connection.send(new _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_13__.SpeechConnectionMessage(_common_Exports__WEBPACK_IMPORTED_MODULE_3__.MessageType.Text, "speaker.profile.create", this.privRequestSession.requestId, "application/json; charset=utf-8", JSON.stringify(profileCreateRequest)));
        });
    }
    sendCommonRequest(operation, profileType, profile = undefined) {
        return __awaiter(this, void 0, void 0, function* () {
            // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().
            const conPromise = this.connectImpl();
            try {
                const deferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_6__.Deferred();
                this.privRequestSession.onSpeechContext();
                yield conPromise;
                const connection = yield this.fetchConnection();
                this.privDeferralMap.add(this.privRequestSession.requestId, deferral);
                yield this.sendBaseRequest(connection, operation, this.scenarioFrom(profileType), profile);
                void this.receiveMessage();
                return deferral.promise;
            }
            catch (err) {
                throw err;
            }
        });
    }
    sendBaseRequest(connection, operation, scenario, profile) {
        return __awaiter(this, void 0, void 0, function* () {
            const profileRequest = {
                scenario
            };
            if (!!profile) {
                profileRequest.profileIds = [profile.profileId];
            }
            else {
                profileRequest.maxPageSize = -1;
            }
            return connection.send(new _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_13__.SpeechConnectionMessage(_common_Exports__WEBPACK_IMPORTED_MODULE_3__.MessageType.Text, `speaker.profile.${operation}`, this.privRequestSession.requestId, "application/json; charset=utf-8", JSON.stringify(profileRequest)));
        });
    }
    extractSpeakerContext(model) {
        return {
            features: {
                interimResult: "enabled",
                progressiveDetection: "disabled",
            },
            profileIds: model.profileIds,
            scenario: model.scenario,
        };
    }
    handlePhrasesResponse(response, requestId) {
        if (!!this.privDeferralMap.getId(requestId)) {
            if (response.status.statusCode.toLowerCase() !== "success") {
                const reason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_9__.ResultReason.Canceled;
                const result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_15__.VoiceProfilePhraseResult(reason, response.status.statusCode, response.passPhraseType, []);
                this.privDeferralMap.complete(requestId, result);
            }
            else if (!!response.phrases && response.phrases.length > 0) {
                const reason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_9__.ResultReason.EnrollingVoiceProfile;
                const result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_15__.VoiceProfilePhraseResult(reason, response.status.statusCode, response.passPhraseType, response.phrases);
                this.privDeferralMap.complete(requestId, result);
            }
            else {
                throw new Error("Voice Profile get activation phrases failed, no phrases received");
            }
        }
        else {
            throw new Error(`Voice Profile get activation phrases request for requestID ${requestId} not found`);
        }
    }
    handleCreateResponse(response, requestId) {
        if (!!response.profiles && response.profiles.length > 0) {
            if (!!this.privDeferralMap.getId(requestId)) {
                const profileIds = response.profiles.map((profile) => profile.profileId);
                this.privDeferralMap.complete(requestId, profileIds);
            }
            else {
                throw new Error(`Voice Profile create request for requestID ${requestId} not found`);
            }
        }
        else {
            throw new Error("Voice Profile create failed, no profile id received");
        }
    }
    handleResultResponse(response, requestId) {
        if (!!this.privDeferralMap.getId(requestId)) {
            const successReason = response.operation.toLowerCase() === "delete" ? _sdk_Exports__WEBPACK_IMPORTED_MODULE_9__.ResultReason.DeletedVoiceProfile : _sdk_Exports__WEBPACK_IMPORTED_MODULE_9__.ResultReason.ResetVoiceProfile;
            const reason = response.status.statusCode.toLowerCase() === "success" ? successReason : _sdk_Exports__WEBPACK_IMPORTED_MODULE_9__.ResultReason.Canceled;
            const result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_16__.VoiceProfileResult(reason, `statusCode: ${response.status.statusCode}, errorDetails: ${response.status.reason}`);
            this.privDeferralMap.complete(requestId, result);
        }
        else {
            throw new Error(`Voice Profile create request for requestID ${requestId} not found`);
        }
    }
    handleFetchResponse(enrollmentResponse, requestId) {
        if (!!this.privDeferralMap.getId(requestId) && !!enrollmentResponse.profiles[0]) {
            if (!!this.privExpectedProfileId && enrollmentResponse.profiles.length === 1 && enrollmentResponse.profiles[0].profileId === this.privExpectedProfileId) {
                this.privExpectedProfileId = undefined;
                const profileInfo = enrollmentResponse.profiles[0];
                const result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.VoiceProfileEnrollmentResult(this.enrollmentReasonFrom(profileInfo.enrollmentStatus), JSON.stringify(profileInfo), enrollmentResponse.status.reason);
                this.privDeferralMap.complete(requestId, result);
            }
            else if (enrollmentResponse.profiles.length > 0) {
                const iProfiles = enrollmentResponse.profiles;
                const profileResults = [];
                for (const profile of iProfiles) {
                    profileResults.push(new _sdk_Exports__WEBPACK_IMPORTED_MODULE_5__.VoiceProfileEnrollmentResult(this.enrollmentReasonFrom(profile.enrollmentStatus), JSON.stringify(profile), enrollmentResponse.status.reason));
                }
                this.privDeferralMap.complete(requestId, profileResults);
            }
        }
        else {
            throw new Error(`Voice Profile fetch request for requestID ${requestId} not found`);
        }
    }
    enrollmentReasonFrom(statusCode) {
        switch (statusCode.toLowerCase()) {
            case "enrolled":
                return _sdk_Exports__WEBPACK_IMPORTED_MODULE_9__.ResultReason.EnrolledVoiceProfile;
            case "invalidlocale":
            case "invalidphrase":
            case "invalidaudioformat":
            case "invalidscenario":
            case "invalidprofilecount":
            case "invalidoperation":
            case "audiotooshort":
            case "audiotoolong":
            case "toomanyenrollments":
            case "storageconflict":
            case "profilenotfound":
            case "incompatibleprofiles":
            case "incompleteenrollment":
                return _sdk_Exports__WEBPACK_IMPORTED_MODULE_9__.ResultReason.Canceled;
            default:
                return _sdk_Exports__WEBPACK_IMPORTED_MODULE_9__.ResultReason.EnrollingVoiceProfile;
        }
    }
    scenarioFrom(profileType) {
        return profileType === _sdk_Exports__WEBPACK_IMPORTED_MODULE_14__.VoiceProfileType.TextIndependentIdentification ? "TextIndependentIdentification" :
            profileType === _sdk_Exports__WEBPACK_IMPORTED_MODULE_14__.VoiceProfileType.TextIndependentVerification ? "TextIndependentVerification" : "TextDependentVerification";
    }
}

//# sourceMappingURL=VoiceServiceRecognizer.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/WebsocketMessageFormatter.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/WebsocketMessageFormatter.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WebsocketMessageFormatter": () => (/* binding */ WebsocketMessageFormatter)
/* harmony export */ });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/RawWebsocketMessage.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

const CRLF = "\r\n";
class WebsocketMessageFormatter {
    toConnectionMessage(message) {
        const deferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_0__.Deferred();
        try {
            if (message.messageType === _common_Exports__WEBPACK_IMPORTED_MODULE_1__.MessageType.Text) {
                const textMessage = message.textContent;
                let headers = {};
                let body = null;
                if (textMessage) {
                    const headerBodySplit = textMessage.split("\r\n\r\n");
                    if (headerBodySplit && headerBodySplit.length > 0) {
                        headers = this.parseHeaders(headerBodySplit[0]);
                        if (headerBodySplit.length > 1) {
                            body = headerBodySplit[1];
                        }
                    }
                }
                deferral.resolve(new _common_Exports__WEBPACK_IMPORTED_MODULE_1__.ConnectionMessage(message.messageType, body, headers, message.id));
            }
            else if (message.messageType === _common_Exports__WEBPACK_IMPORTED_MODULE_1__.MessageType.Binary) {
                const binaryMessage = message.binaryContent;
                let headers = {};
                let body = null;
                if (!binaryMessage || binaryMessage.byteLength < 2) {
                    throw new Error("Invalid binary message format. Header length missing.");
                }
                const dataView = new DataView(binaryMessage);
                const headerLength = dataView.getInt16(0);
                if (binaryMessage.byteLength < headerLength + 2) {
                    throw new Error("Invalid binary message format. Header content missing.");
                }
                let headersString = "";
                for (let i = 0; i < headerLength; i++) {
                    headersString += String.fromCharCode((dataView).getInt8(i + 2));
                }
                headers = this.parseHeaders(headersString);
                if (binaryMessage.byteLength > headerLength + 2) {
                    body = binaryMessage.slice(2 + headerLength);
                }
                deferral.resolve(new _common_Exports__WEBPACK_IMPORTED_MODULE_1__.ConnectionMessage(message.messageType, body, headers, message.id));
            }
        }
        catch (e) {
            deferral.reject(`Error formatting the message. Error: ${e}`);
        }
        return deferral.promise;
    }
    fromConnectionMessage(message) {
        const deferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_0__.Deferred();
        try {
            if (message.messageType === _common_Exports__WEBPACK_IMPORTED_MODULE_1__.MessageType.Text) {
                const payload = `${this.makeHeaders(message)}${CRLF}${message.textBody ? message.textBody : ""}`;
                deferral.resolve(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__.RawWebsocketMessage(_common_Exports__WEBPACK_IMPORTED_MODULE_1__.MessageType.Text, payload, message.id));
            }
            else if (message.messageType === _common_Exports__WEBPACK_IMPORTED_MODULE_1__.MessageType.Binary) {
                const headersString = this.makeHeaders(message);
                const content = message.binaryBody;
                const headerBuffer = this.stringToArrayBuffer(headersString);
                const headerInt8Array = new Int8Array(headerBuffer);
                const headerLength = headerInt8Array.byteLength;
                const payloadInt8Array = new Int8Array(2 + headerLength + (content ? content.byteLength : 0));
                payloadInt8Array[0] = ((headerLength >> 8) & 0xff);
                payloadInt8Array[1] = headerLength & 0xff;
                payloadInt8Array.set(headerInt8Array, 2);
                if (content) {
                    const bodyInt8Array = new Int8Array(content);
                    payloadInt8Array.set(bodyInt8Array, 2 + headerLength);
                }
                const payload = payloadInt8Array.buffer;
                deferral.resolve(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__.RawWebsocketMessage(_common_Exports__WEBPACK_IMPORTED_MODULE_1__.MessageType.Binary, payload, message.id));
            }
        }
        catch (e) {
            deferral.reject(`Error formatting the message. ${e}`);
        }
        return deferral.promise;
    }
    makeHeaders(message) {
        let headersString = "";
        if (message.headers) {
            for (const header in message.headers) {
                if (header) {
                    headersString += `${header}: ${message.headers[header]}${CRLF}`;
                }
            }
        }
        return headersString;
    }
    parseHeaders(headersString) {
        const headers = {};
        if (headersString) {
            const headerMatches = headersString.match(/[^\r\n]+/g);
            if (headers) {
                for (const header of headerMatches) {
                    if (header) {
                        const separatorIndex = header.indexOf(":");
                        const headerName = separatorIndex > 0 ? header.substr(0, separatorIndex).trim().toLowerCase() : header;
                        const headerValue = separatorIndex > 0 && header.length > (separatorIndex + 1) ?
                            header.substr(separatorIndex + 1).trim() :
                            "";
                        headers[headerName] = headerValue;
                    }
                }
            }
        }
        return headers;
    }
    stringToArrayBuffer(str) {
        const buffer = new ArrayBuffer(str.length);
        const view = new DataView(buffer);
        for (let i = 0; i < str.length; i++) {
            view.setUint8(i, str.charCodeAt(i));
        }
        return buffer;
    }
}

//# sourceMappingURL=WebsocketMessageFormatter.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/AudioSourceEvents.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/AudioSourceEvents.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AudioSourceErrorEvent": () => (/* binding */ AudioSourceErrorEvent),
/* harmony export */   "AudioSourceEvent": () => (/* binding */ AudioSourceEvent),
/* harmony export */   "AudioSourceInitializingEvent": () => (/* binding */ AudioSourceInitializingEvent),
/* harmony export */   "AudioSourceOffEvent": () => (/* binding */ AudioSourceOffEvent),
/* harmony export */   "AudioSourceReadyEvent": () => (/* binding */ AudioSourceReadyEvent),
/* harmony export */   "AudioStreamNodeAttachedEvent": () => (/* binding */ AudioStreamNodeAttachedEvent),
/* harmony export */   "AudioStreamNodeAttachingEvent": () => (/* binding */ AudioStreamNodeAttachingEvent),
/* harmony export */   "AudioStreamNodeDetachedEvent": () => (/* binding */ AudioStreamNodeDetachedEvent),
/* harmony export */   "AudioStreamNodeErrorEvent": () => (/* binding */ AudioStreamNodeErrorEvent),
/* harmony export */   "AudioStreamNodeEvent": () => (/* binding */ AudioStreamNodeEvent)
/* harmony export */ });
/* harmony import */ var _PlatformEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PlatformEvent */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/PlatformEvent.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/* eslint-disable max-classes-per-file */

class AudioSourceEvent extends _PlatformEvent__WEBPACK_IMPORTED_MODULE_0__.PlatformEvent {
    constructor(eventName, audioSourceId, eventType = _PlatformEvent__WEBPACK_IMPORTED_MODULE_0__.EventType.Info) {
        super(eventName, eventType);
        this.privAudioSourceId = audioSourceId;
    }
    get audioSourceId() {
        return this.privAudioSourceId;
    }
}
class AudioSourceInitializingEvent extends AudioSourceEvent {
    constructor(audioSourceId) {
        super("AudioSourceInitializingEvent", audioSourceId);
    }
}
class AudioSourceReadyEvent extends AudioSourceEvent {
    constructor(audioSourceId) {
        super("AudioSourceReadyEvent", audioSourceId);
    }
}
class AudioSourceOffEvent extends AudioSourceEvent {
    constructor(audioSourceId) {
        super("AudioSourceOffEvent", audioSourceId);
    }
}
class AudioSourceErrorEvent extends AudioSourceEvent {
    constructor(audioSourceId, error) {
        super("AudioSourceErrorEvent", audioSourceId, _PlatformEvent__WEBPACK_IMPORTED_MODULE_0__.EventType.Error);
        this.privError = error;
    }
    get error() {
        return this.privError;
    }
}
class AudioStreamNodeEvent extends AudioSourceEvent {
    constructor(eventName, audioSourceId, audioNodeId) {
        super(eventName, audioSourceId);
        this.privAudioNodeId = audioNodeId;
    }
    get audioNodeId() {
        return this.privAudioNodeId;
    }
}
class AudioStreamNodeAttachingEvent extends AudioStreamNodeEvent {
    constructor(audioSourceId, audioNodeId) {
        super("AudioStreamNodeAttachingEvent", audioSourceId, audioNodeId);
    }
}
class AudioStreamNodeAttachedEvent extends AudioStreamNodeEvent {
    constructor(audioSourceId, audioNodeId) {
        super("AudioStreamNodeAttachedEvent", audioSourceId, audioNodeId);
    }
}
class AudioStreamNodeDetachedEvent extends AudioStreamNodeEvent {
    constructor(audioSourceId, audioNodeId) {
        super("AudioStreamNodeDetachedEvent", audioSourceId, audioNodeId);
    }
}
class AudioStreamNodeErrorEvent extends AudioStreamNodeEvent {
    constructor(audioSourceId, audioNodeId, error) {
        super("AudioStreamNodeErrorEvent", audioSourceId, audioNodeId);
        this.privError = error;
    }
    get error() {
        return this.privError;
    }
}

//# sourceMappingURL=AudioSourceEvents.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/BackgroundError.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/BackgroundError.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BackgroundEvent": () => (/* binding */ BackgroundEvent)
/* harmony export */ });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/PlatformEvent.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

class BackgroundEvent extends _Exports__WEBPACK_IMPORTED_MODULE_0__.PlatformEvent {
    constructor(error) {
        super("BackgroundEvent", _Exports__WEBPACK_IMPORTED_MODULE_0__.EventType.Error);
        this.privError = error;
    }
    get error() {
        return this.privError;
    }
}

//# sourceMappingURL=BackgroundError.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ChunkedArrayBufferStream.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ChunkedArrayBufferStream.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ChunkedArrayBufferStream": () => (/* binding */ ChunkedArrayBufferStream)
/* harmony export */ });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Stream.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

class ChunkedArrayBufferStream extends _Exports__WEBPACK_IMPORTED_MODULE_0__.Stream {
    constructor(targetChunkSize, streamId) {
        super(streamId);
        this.privTargetChunkSize = targetChunkSize;
        this.privNextBufferReadyBytes = 0;
    }
    writeStreamChunk(chunk) {
        // No pending write, and the buffer is the right size so write it.
        if (chunk.isEnd ||
            (0 === this.privNextBufferReadyBytes && chunk.buffer.byteLength === this.privTargetChunkSize)) {
            super.writeStreamChunk(chunk);
            return;
        }
        let bytesCopiedFromBuffer = 0;
        while (bytesCopiedFromBuffer < chunk.buffer.byteLength) {
            // Fill the next buffer.
            if (undefined === this.privNextBufferToWrite) {
                this.privNextBufferToWrite = new ArrayBuffer(this.privTargetChunkSize);
                this.privNextBufferStartTime = chunk.timeReceived;
            }
            // Find out how many bytes we can copy into the read buffer.
            const bytesToCopy = Math.min(chunk.buffer.byteLength - bytesCopiedFromBuffer, this.privTargetChunkSize - this.privNextBufferReadyBytes);
            const targetView = new Uint8Array(this.privNextBufferToWrite);
            const sourceView = new Uint8Array(chunk.buffer.slice(bytesCopiedFromBuffer, bytesToCopy + bytesCopiedFromBuffer));
            targetView.set(sourceView, this.privNextBufferReadyBytes);
            this.privNextBufferReadyBytes += bytesToCopy;
            bytesCopiedFromBuffer += bytesToCopy;
            // Are we ready to write?
            if (this.privNextBufferReadyBytes === this.privTargetChunkSize) {
                super.writeStreamChunk({
                    buffer: this.privNextBufferToWrite,
                    isEnd: false,
                    timeReceived: this.privNextBufferStartTime,
                });
                this.privNextBufferReadyBytes = 0;
                this.privNextBufferToWrite = undefined;
            }
        }
    }
    close() {
        // Send whatever is pending, then close the base class.
        if (0 !== this.privNextBufferReadyBytes && !this.isClosed) {
            super.writeStreamChunk({
                buffer: this.privNextBufferToWrite.slice(0, this.privNextBufferReadyBytes),
                isEnd: false,
                timeReceived: this.privNextBufferStartTime,
            });
        }
        super.close();
    }
}

//# sourceMappingURL=ChunkedArrayBufferStream.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionEvents.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionEvents.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConnectionClosedEvent": () => (/* binding */ ConnectionClosedEvent),
/* harmony export */   "ConnectionErrorEvent": () => (/* binding */ ConnectionErrorEvent),
/* harmony export */   "ConnectionEstablishErrorEvent": () => (/* binding */ ConnectionEstablishErrorEvent),
/* harmony export */   "ConnectionEstablishedEvent": () => (/* binding */ ConnectionEstablishedEvent),
/* harmony export */   "ConnectionEvent": () => (/* binding */ ConnectionEvent),
/* harmony export */   "ConnectionMessageReceivedEvent": () => (/* binding */ ConnectionMessageReceivedEvent),
/* harmony export */   "ConnectionMessageSentEvent": () => (/* binding */ ConnectionMessageSentEvent),
/* harmony export */   "ConnectionStartEvent": () => (/* binding */ ConnectionStartEvent),
/* harmony export */   "ServiceEvent": () => (/* binding */ ServiceEvent)
/* harmony export */ });
/* harmony import */ var _PlatformEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PlatformEvent */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/PlatformEvent.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

class ServiceEvent extends _PlatformEvent__WEBPACK_IMPORTED_MODULE_0__.PlatformEvent {
    constructor(eventName, jsonstring, eventType = _PlatformEvent__WEBPACK_IMPORTED_MODULE_0__.EventType.Info) {
        super(eventName, eventType);
        this.privJsonResult = jsonstring;
    }
    get jsonString() {
        return this.privJsonResult;
    }
}
class ConnectionEvent extends _PlatformEvent__WEBPACK_IMPORTED_MODULE_0__.PlatformEvent {
    constructor(eventName, connectionId, eventType = _PlatformEvent__WEBPACK_IMPORTED_MODULE_0__.EventType.Info) {
        super(eventName, eventType);
        this.privConnectionId = connectionId;
    }
    get connectionId() {
        return this.privConnectionId;
    }
}
class ConnectionStartEvent extends ConnectionEvent {
    constructor(connectionId, uri, headers) {
        super("ConnectionStartEvent", connectionId);
        this.privUri = uri;
        this.privHeaders = headers;
    }
    get uri() {
        return this.privUri;
    }
    get headers() {
        return this.privHeaders;
    }
}
class ConnectionEstablishedEvent extends ConnectionEvent {
    constructor(connectionId) {
        super("ConnectionEstablishedEvent", connectionId);
    }
}
class ConnectionClosedEvent extends ConnectionEvent {
    constructor(connectionId, statusCode, reason) {
        super("ConnectionClosedEvent", connectionId, _PlatformEvent__WEBPACK_IMPORTED_MODULE_0__.EventType.Debug);
        this.privReason = reason;
        this.privStatusCode = statusCode;
    }
    get reason() {
        return this.privReason;
    }
    get statusCode() {
        return this.privStatusCode;
    }
}
class ConnectionErrorEvent extends ConnectionEvent {
    constructor(connectionId, message, type) {
        super("ConnectionErrorEvent", connectionId, _PlatformEvent__WEBPACK_IMPORTED_MODULE_0__.EventType.Debug);
        this.privMessage = message;
        this.privType = type;
    }
    get message() {
        return this.privMessage;
    }
    get type() {
        return this.privType;
    }
}
class ConnectionEstablishErrorEvent extends ConnectionEvent {
    constructor(connectionId, statuscode, reason) {
        super("ConnectionEstablishErrorEvent", connectionId, _PlatformEvent__WEBPACK_IMPORTED_MODULE_0__.EventType.Error);
        this.privStatusCode = statuscode;
        this.privReason = reason;
    }
    get reason() {
        return this.privReason;
    }
    get statusCode() {
        return this.privStatusCode;
    }
}
class ConnectionMessageReceivedEvent extends ConnectionEvent {
    constructor(connectionId, networkReceivedTimeISO, message) {
        super("ConnectionMessageReceivedEvent", connectionId);
        this.privNetworkReceivedTime = networkReceivedTimeISO;
        this.privMessage = message;
    }
    get networkReceivedTime() {
        return this.privNetworkReceivedTime;
    }
    get message() {
        return this.privMessage;
    }
}
class ConnectionMessageSentEvent extends ConnectionEvent {
    constructor(connectionId, networkSentTimeISO, message) {
        super("ConnectionMessageSentEvent", connectionId);
        this.privNetworkSentTime = networkSentTimeISO;
        this.privMessage = message;
    }
    get networkSentTime() {
        return this.privNetworkSentTime;
    }
    get message() {
        return this.privMessage;
    }
}

//# sourceMappingURL=ConnectionEvents.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConnectionMessage": () => (/* binding */ ConnectionMessage),
/* harmony export */   "MessageType": () => (/* binding */ MessageType)
/* harmony export */ });
/* harmony import */ var _Error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Error */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js");
/* harmony import */ var _Guid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Guid */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");
/* eslint-disable @typescript-eslint/no-unsafe-return */
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


var MessageType;
(function (MessageType) {
    MessageType[MessageType["Text"] = 0] = "Text";
    MessageType[MessageType["Binary"] = 1] = "Binary";
})(MessageType || (MessageType = {}));
class ConnectionMessage {
    constructor(messageType, body, headers, id) {
        this.privBody = null;
        if (messageType === MessageType.Text && body && !(typeof (body) === "string")) {
            throw new _Error__WEBPACK_IMPORTED_MODULE_0__.InvalidOperationError("Payload must be a string");
        }
        if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {
            throw new _Error__WEBPACK_IMPORTED_MODULE_0__.InvalidOperationError("Payload must be ArrayBuffer");
        }
        this.privMessageType = messageType;
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        this.privBody = body;
        this.privHeaders = headers ? headers : {};
        this.privId = id ? id : (0,_Guid__WEBPACK_IMPORTED_MODULE_1__.createNoDashGuid)();
        switch (this.messageType) {
            case MessageType.Binary:
                this.privSize = this.binaryBody !== null ? this.binaryBody.byteLength : 0;
                break;
            case MessageType.Text:
                this.privSize = this.textBody.length;
        }
    }
    get messageType() {
        return this.privMessageType;
    }
    get headers() {
        return this.privHeaders;
    }
    get body() {
        return this.privBody;
    }
    get textBody() {
        if (this.privMessageType === MessageType.Binary) {
            throw new _Error__WEBPACK_IMPORTED_MODULE_0__.InvalidOperationError("Not supported for binary message");
        }
        return this.privBody;
    }
    get binaryBody() {
        if (this.privMessageType === MessageType.Text) {
            throw new _Error__WEBPACK_IMPORTED_MODULE_0__.InvalidOperationError("Not supported for text message");
        }
        return this.privBody;
    }
    get id() {
        return this.privId;
    }
}

//# sourceMappingURL=ConnectionMessage.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionOpenResponse.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionOpenResponse.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConnectionOpenResponse": () => (/* binding */ ConnectionOpenResponse)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
class ConnectionOpenResponse {
    constructor(statusCode, reason) {
        this.privStatusCode = statusCode;
        this.privReason = reason;
    }
    get statusCode() {
        return this.privStatusCode;
    }
    get reason() {
        return this.privReason;
    }
}

//# sourceMappingURL=ConnectionOpenResponse.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/DeferralMap.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/DeferralMap.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DeferralMap": () => (/* binding */ DeferralMap)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * The error that is thrown when an argument passed in is null.
 *
 * @export
 * @class DefferalMap
 */
class DeferralMap {
    constructor() {
        this.privMap = {};
    }
    add(id, deferral) {
        this.privMap[id] = deferral;
    }
    getId(id) {
        return this.privMap[id];
    }
    complete(id, result) {
        try {
            this.privMap[id].resolve(result);
        }
        catch (error) {
            this.privMap[id].reject(error);
        }
        finally {
            this.privMap[id] = undefined;
        }
    }
}

//# sourceMappingURL=DeferralMap.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/DialogEvents.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/DialogEvents.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DialogEvent": () => (/* binding */ DialogEvent),
/* harmony export */   "SendingAgentContextMessageEvent": () => (/* binding */ SendingAgentContextMessageEvent)
/* harmony export */ });
/* harmony import */ var _PlatformEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PlatformEvent */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/PlatformEvent.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

class DialogEvent extends _PlatformEvent__WEBPACK_IMPORTED_MODULE_0__.PlatformEvent {
    constructor(eventName, eventType = _PlatformEvent__WEBPACK_IMPORTED_MODULE_0__.EventType.Info) {
        super(eventName, eventType);
    }
}
class SendingAgentContextMessageEvent extends DialogEvent {
    constructor(agentConfig) {
        super("SendingAgentContextMessageEvent");
        this.privAgentConfig = agentConfig;
    }
    get agentConfig() {
        return this.privAgentConfig;
    }
}

//# sourceMappingURL=DialogEvents.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArgumentNullError": () => (/* binding */ ArgumentNullError),
/* harmony export */   "InvalidOperationError": () => (/* binding */ InvalidOperationError),
/* harmony export */   "ObjectDisposedError": () => (/* binding */ ObjectDisposedError)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/* eslint-disable max-classes-per-file */
/**
 * The error that is thrown when an argument passed in is null.
 *
 * @export
 * @class ArgumentNullError
 * @extends {Error}
 */
class ArgumentNullError extends Error {
    /**
     * Creates an instance of ArgumentNullError.
     *
     * @param {string} argumentName - Name of the argument that is null
     *
     * @memberOf ArgumentNullError
     */
    constructor(argumentName) {
        super(argumentName);
        this.name = "ArgumentNull";
        this.message = argumentName;
    }
}
/**
 * The error that is thrown when an invalid operation is performed in the code.
 *
 * @export
 * @class InvalidOperationError
 * @extends {Error}
 */
class InvalidOperationError extends Error {
    /**
     * Creates an instance of InvalidOperationError.
     *
     * @param {string} error - The error
     *
     * @memberOf InvalidOperationError
     */
    constructor(error) {
        super(error);
        this.name = "InvalidOperation";
        this.message = error;
    }
}
/**
 * The error that is thrown when an object is disposed.
 *
 * @export
 * @class ObjectDisposedError
 * @extends {Error}
 */
class ObjectDisposedError extends Error {
    /**
     * Creates an instance of ObjectDisposedError.
     *
     * @param {string} objectName - The object that is disposed
     * @param {string} error - The error
     *
     * @memberOf ObjectDisposedError
     */
    constructor(objectName, error) {
        super(error);
        this.name = objectName + "ObjectDisposed";
        this.message = error;
    }
}

//# sourceMappingURL=Error.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/EventSource.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/EventSource.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventSource": () => (/* binding */ EventSource)
/* harmony export */ });
/* harmony import */ var _Error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Error */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js");
/* harmony import */ var _Guid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Guid */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


class EventSource {
    constructor(metadata) {
        this.privEventListeners = {};
        this.privIsDisposed = false;
        this.privConsoleListener = undefined;
        this.privMetadata = metadata;
    }
    onEvent(event) {
        if (this.isDisposed()) {
            throw (new _Error__WEBPACK_IMPORTED_MODULE_0__.ObjectDisposedError("EventSource"));
        }
        if (this.metadata) {
            for (const paramName in this.metadata) {
                if (paramName) {
                    if (event.metadata) {
                        if (!event.metadata[paramName]) {
                            event.metadata[paramName] = this.metadata[paramName];
                        }
                    }
                }
            }
        }
        for (const eventId in this.privEventListeners) {
            if (eventId && this.privEventListeners[eventId]) {
                this.privEventListeners[eventId](event);
            }
        }
    }
    attach(onEventCallback) {
        const id = (0,_Guid__WEBPACK_IMPORTED_MODULE_1__.createNoDashGuid)();
        this.privEventListeners[id] = onEventCallback;
        return {
            detach: () => {
                delete this.privEventListeners[id];
                return Promise.resolve();
            },
        };
    }
    attachListener(listener) {
        return this.attach((e) => listener.onEvent(e));
    }
    attachConsoleListener(listener) {
        if (!!this.privConsoleListener) {
            void this.privConsoleListener.detach(); // Detach implementation for eventListeners is synchronous
        }
        this.privConsoleListener = this.attach((e) => listener.onEvent(e));
        return this.privConsoleListener;
    }
    isDisposed() {
        return this.privIsDisposed;
    }
    dispose() {
        this.privEventListeners = null;
        this.privIsDisposed = true;
    }
    get metadata() {
        return this.privMetadata;
    }
}

//# sourceMappingURL=EventSource.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Events.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Events.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Events": () => (/* binding */ Events)
/* harmony export */ });
/* harmony import */ var _Error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Error */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js");
/* harmony import */ var _EventSource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EventSource */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/EventSource.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


class Events {
    static setEventSource(eventSource) {
        if (!eventSource) {
            throw new _Error__WEBPACK_IMPORTED_MODULE_0__.ArgumentNullError("eventSource");
        }
        Events.privInstance = eventSource;
    }
    static get instance() {
        return Events.privInstance;
    }
}
Events.privInstance = new _EventSource__WEBPACK_IMPORTED_MODULE_1__.EventSource();

//# sourceMappingURL=Events.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createGuid": () => (/* binding */ createGuid),
/* harmony export */   "createNoDashGuid": () => (/* binding */ createNoDashGuid)
/* harmony export */ });
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uuid */ "./node_modules/uuid/dist/esm-browser/v4.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

const createGuid = () => (0,uuid__WEBPACK_IMPORTED_MODULE_0__["default"])();
const createNoDashGuid = () => createGuid().replace(new RegExp("-", "g"), "").toUpperCase();


//# sourceMappingURL=Guid.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/IConnection.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/IConnection.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConnectionState": () => (/* binding */ ConnectionState)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var ConnectionState;
(function (ConnectionState) {
    ConnectionState[ConnectionState["None"] = 0] = "None";
    ConnectionState[ConnectionState["Connected"] = 1] = "Connected";
    ConnectionState[ConnectionState["Connecting"] = 2] = "Connecting";
    ConnectionState[ConnectionState["Disconnected"] = 3] = "Disconnected";
})(ConnectionState || (ConnectionState = {}));

//# sourceMappingURL=IConnection.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/List.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/List.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "List": () => (/* binding */ List)
/* harmony export */ });
/* harmony import */ var _Error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Error */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

class List {
    constructor(list) {
        this.privSubscriptionIdCounter = 0;
        this.privAddSubscriptions = {};
        this.privRemoveSubscriptions = {};
        this.privDisposedSubscriptions = {};
        this.privDisposeReason = null;
        this.privList = [];
        // copy the list rather than taking as is.
        if (list) {
            for (const item of list) {
                this.privList.push(item);
            }
        }
    }
    get(itemIndex) {
        this.throwIfDisposed();
        return this.privList[itemIndex];
    }
    first() {
        return this.get(0);
    }
    last() {
        return this.get(this.length() - 1);
    }
    add(item) {
        this.throwIfDisposed();
        this.insertAt(this.privList.length, item);
    }
    insertAt(index, item) {
        this.throwIfDisposed();
        if (index === 0) {
            this.privList.unshift(item);
        }
        else if (index === this.privList.length) {
            this.privList.push(item);
        }
        else {
            this.privList.splice(index, 0, item);
        }
        this.triggerSubscriptions(this.privAddSubscriptions);
    }
    removeFirst() {
        this.throwIfDisposed();
        return this.removeAt(0);
    }
    removeLast() {
        this.throwIfDisposed();
        return this.removeAt(this.length() - 1);
    }
    removeAt(index) {
        this.throwIfDisposed();
        return this.remove(index, 1)[0];
    }
    remove(index, count) {
        this.throwIfDisposed();
        const removedElements = this.privList.splice(index, count);
        this.triggerSubscriptions(this.privRemoveSubscriptions);
        return removedElements;
    }
    clear() {
        this.throwIfDisposed();
        this.remove(0, this.length());
    }
    length() {
        this.throwIfDisposed();
        return this.privList.length;
    }
    onAdded(addedCallback) {
        this.throwIfDisposed();
        const subscriptionId = this.privSubscriptionIdCounter++;
        this.privAddSubscriptions[subscriptionId] = addedCallback;
        return {
            detach: () => {
                delete this.privAddSubscriptions[subscriptionId];
                return Promise.resolve();
            },
        };
    }
    onRemoved(removedCallback) {
        this.throwIfDisposed();
        const subscriptionId = this.privSubscriptionIdCounter++;
        this.privRemoveSubscriptions[subscriptionId] = removedCallback;
        return {
            detach: () => {
                delete this.privRemoveSubscriptions[subscriptionId];
                return Promise.resolve();
            },
        };
    }
    onDisposed(disposedCallback) {
        this.throwIfDisposed();
        const subscriptionId = this.privSubscriptionIdCounter++;
        this.privDisposedSubscriptions[subscriptionId] = disposedCallback;
        return {
            detach: () => {
                delete this.privDisposedSubscriptions[subscriptionId];
                return Promise.resolve();
            },
        };
    }
    join(seperator) {
        this.throwIfDisposed();
        return this.privList.join(seperator);
    }
    toArray() {
        const cloneCopy = Array();
        this.privList.forEach((val) => {
            cloneCopy.push(val);
        });
        return cloneCopy;
    }
    any(callback) {
        this.throwIfDisposed();
        if (callback) {
            return this.where(callback).length() > 0;
        }
        else {
            return this.length() > 0;
        }
    }
    all(callback) {
        this.throwIfDisposed();
        return this.where(callback).length() === this.length();
    }
    forEach(callback) {
        this.throwIfDisposed();
        for (let i = 0; i < this.length(); i++) {
            callback(this.privList[i], i);
        }
    }
    select(callback) {
        this.throwIfDisposed();
        const selectList = [];
        for (let i = 0; i < this.privList.length; i++) {
            selectList.push(callback(this.privList[i], i));
        }
        return new List(selectList);
    }
    where(callback) {
        this.throwIfDisposed();
        const filteredList = new List();
        for (let i = 0; i < this.privList.length; i++) {
            if (callback(this.privList[i], i)) {
                filteredList.add(this.privList[i]);
            }
        }
        return filteredList;
    }
    orderBy(compareFn) {
        this.throwIfDisposed();
        const clonedArray = this.toArray();
        const orderedArray = clonedArray.sort(compareFn);
        return new List(orderedArray);
    }
    orderByDesc(compareFn) {
        this.throwIfDisposed();
        return this.orderBy((a, b) => compareFn(b, a));
    }
    clone() {
        this.throwIfDisposed();
        return new List(this.toArray());
    }
    concat(list) {
        this.throwIfDisposed();
        return new List(this.privList.concat(list.toArray()));
    }
    concatArray(array) {
        this.throwIfDisposed();
        return new List(this.privList.concat(array));
    }
    isDisposed() {
        return this.privList == null;
    }
    dispose(reason) {
        if (!this.isDisposed()) {
            this.privDisposeReason = reason;
            this.privList = null;
            this.privAddSubscriptions = null;
            this.privRemoveSubscriptions = null;
            this.triggerSubscriptions(this.privDisposedSubscriptions);
        }
    }
    throwIfDisposed() {
        if (this.isDisposed()) {
            throw new _Error__WEBPACK_IMPORTED_MODULE_0__.ObjectDisposedError("List", this.privDisposeReason);
        }
    }
    triggerSubscriptions(subscriptions) {
        if (subscriptions) {
            for (const subscriptionId in subscriptions) {
                if (subscriptionId) {
                    subscriptions[subscriptionId]();
                }
            }
        }
    }
}

//# sourceMappingURL=List.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/PlatformEvent.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/PlatformEvent.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventType": () => (/* binding */ EventType),
/* harmony export */   "PlatformEvent": () => (/* binding */ PlatformEvent)
/* harmony export */ });
/* harmony import */ var _Guid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Guid */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

var EventType;
(function (EventType) {
    EventType[EventType["Debug"] = 0] = "Debug";
    EventType[EventType["Info"] = 1] = "Info";
    EventType[EventType["Warning"] = 2] = "Warning";
    EventType[EventType["Error"] = 3] = "Error";
    EventType[EventType["None"] = 4] = "None";
})(EventType || (EventType = {}));
class PlatformEvent {
    constructor(eventName, eventType) {
        this.privName = eventName;
        this.privEventId = (0,_Guid__WEBPACK_IMPORTED_MODULE_0__.createNoDashGuid)();
        this.privEventTime = new Date().toISOString();
        this.privEventType = eventType;
        this.privMetadata = {};
    }
    get name() {
        return this.privName;
    }
    get eventId() {
        return this.privEventId;
    }
    get eventTime() {
        return this.privEventTime;
    }
    get eventType() {
        return this.privEventType;
    }
    get metadata() {
        return this.privMetadata;
    }
}

//# sourceMappingURL=PlatformEvent.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Deferred": () => (/* binding */ Deferred),
/* harmony export */   "PromiseResult": () => (/* binding */ PromiseResult),
/* harmony export */   "PromiseResultEventSource": () => (/* binding */ PromiseResultEventSource),
/* harmony export */   "PromiseState": () => (/* binding */ PromiseState),
/* harmony export */   "Sink": () => (/* binding */ Sink),
/* harmony export */   "marshalPromiseToCallbacks": () => (/* binding */ marshalPromiseToCallbacks)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/* eslint-disable max-classes-per-file, @typescript-eslint/typedef */
var PromiseState;
(function (PromiseState) {
    PromiseState[PromiseState["None"] = 0] = "None";
    PromiseState[PromiseState["Resolved"] = 1] = "Resolved";
    PromiseState[PromiseState["Rejected"] = 2] = "Rejected";
})(PromiseState || (PromiseState = {}));
class PromiseResult {
    constructor(promiseResultEventSource) {
        this.throwIfError = () => {
            if (this.isError) {
                throw this.error;
            }
        };
        promiseResultEventSource.on((result) => {
            if (!this.privIsCompleted) {
                this.privIsCompleted = true;
                this.privIsError = false;
                this.privResult = result;
            }
        }, (error) => {
            if (!this.privIsCompleted) {
                this.privIsCompleted = true;
                this.privIsError = true;
                this.privError = error;
            }
        });
    }
    get isCompleted() {
        return this.privIsCompleted;
    }
    get isError() {
        return this.privIsError;
    }
    get error() {
        return this.privError;
    }
    get result() {
        return this.privResult;
    }
}
class PromiseResultEventSource {
    constructor() {
        this.setResult = (result) => {
            this.privOnSetResult(result);
        };
        this.setError = (error) => {
            this.privOnSetError(error);
        };
        this.on = (onSetResult, onSetError) => {
            this.privOnSetResult = onSetResult;
            this.privOnSetError = onSetError;
        };
    }
}
class Deferred {
    constructor() {
        this.resolve = (result) => {
            this.privResolve(result);
            return this;
        };
        this.reject = (error) => {
            this.privReject(error);
            return this;
        };
        // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
        this.privPromise = new Promise((resolve, reject) => {
            this.privResolve = resolve;
            this.privReject = reject;
        });
    }
    get promise() {
        return this.privPromise;
    }
}
class Sink {
    constructor() {
        this.privState = PromiseState.None;
        this.privPromiseResult = null;
        this.privPromiseResultEvents = null;
        this.privSuccessHandlers = [];
        this.privErrorHandlers = [];
        this.privPromiseResultEvents = new PromiseResultEventSource();
        this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);
    }
    get state() {
        return this.privState;
    }
    get result() {
        return this.privPromiseResult;
    }
    resolve(result) {
        if (this.privState !== PromiseState.None) {
            throw new Error("'Cannot resolve a completed promise'");
        }
        this.privState = PromiseState.Resolved;
        this.privPromiseResultEvents.setResult(result);
        for (let i = 0; i < this.privSuccessHandlers.length; i++) {
            this.executeSuccessCallback(result, this.privSuccessHandlers[i], this.privErrorHandlers[i]);
        }
        this.detachHandlers();
    }
    reject(error) {
        if (this.privState !== PromiseState.None) {
            throw new Error("'Cannot reject a completed promise'");
        }
        this.privState = PromiseState.Rejected;
        this.privPromiseResultEvents.setError(error);
        for (const errorHandler of this.privErrorHandlers) {
            this.executeErrorCallback(error, errorHandler);
        }
        this.detachHandlers();
    }
    on(successCallback, errorCallback) {
        if (successCallback == null) {
            // eslint-disable-next-line @typescript-eslint/no-empty-function
            successCallback = () => { };
        }
        if (this.privState === PromiseState.None) {
            this.privSuccessHandlers.push(successCallback);
            this.privErrorHandlers.push(errorCallback);
        }
        else {
            if (this.privState === PromiseState.Resolved) {
                this.executeSuccessCallback(this.privPromiseResult.result, successCallback, errorCallback);
            }
            else if (this.privState === PromiseState.Rejected) {
                this.executeErrorCallback(this.privPromiseResult.error, errorCallback);
            }
            this.detachHandlers();
        }
    }
    executeSuccessCallback(result, successCallback, errorCallback) {
        try {
            successCallback(result);
        }
        catch (e) {
            this.executeErrorCallback(`'Unhandled callback error: ${e}'`, errorCallback);
        }
    }
    executeErrorCallback(error, errorCallback) {
        if (errorCallback) {
            try {
                errorCallback(error);
            }
            catch (e) {
                throw new Error(`'Unhandled callback error: ${e}. InnerError: ${error}'`);
            }
        }
        else {
            throw new Error(`'Unhandled error: ${error}'`);
        }
    }
    detachHandlers() {
        this.privErrorHandlers = [];
        this.privSuccessHandlers = [];
    }
}
// eslint-disable-next-line prefer-arrow/prefer-arrow-functions
function marshalPromiseToCallbacks(promise, cb, err) {
    promise.then((val) => {
        try {
            if (!!cb) {
                cb(val);
            }
        }
        catch (error) {
            if (!!err) {
                try {
                    if (error instanceof Error) {
                        const typedError = error;
                        err(typedError.name + ": " + typedError.message);
                    }
                    else {
                        err(error);
                    }
                    // eslint-disable-next-line no-empty
                }
                catch (error) { }
            }
        }
    }, (error) => {
        if (!!err) {
            try {
                if (error instanceof Error) {
                    const typedError = error;
                    err(typedError.name + ": " + typedError.message);
                }
                else {
                    err(error);
                }
                // eslint-disable-next-line no-empty
            }
            catch (error) { }
        }
    });
}

//# sourceMappingURL=Promise.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Queue.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Queue.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Queue": () => (/* binding */ Queue)
/* harmony export */ });
/* harmony import */ var _Error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Error */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js");
/* harmony import */ var _List__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./List */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/List.js");
/* harmony import */ var _Promise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Promise */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



var SubscriberType;
(function (SubscriberType) {
    SubscriberType[SubscriberType["Dequeue"] = 0] = "Dequeue";
    SubscriberType[SubscriberType["Peek"] = 1] = "Peek";
})(SubscriberType || (SubscriberType = {}));
class Queue {
    constructor(list) {
        this.privPromiseStore = new _List__WEBPACK_IMPORTED_MODULE_0__.List();
        this.privIsDrainInProgress = false;
        this.privIsDisposing = false;
        this.privDisposeReason = null;
        this.privList = list ? list : new _List__WEBPACK_IMPORTED_MODULE_0__.List();
        this.privDetachables = [];
        this.privSubscribers = new _List__WEBPACK_IMPORTED_MODULE_0__.List();
        this.privDetachables.push(this.privList.onAdded(() => this.drain()));
    }
    enqueue(item) {
        this.throwIfDispose();
        this.enqueueFromPromise(new Promise((resolve) => resolve(item)));
    }
    enqueueFromPromise(promise) {
        this.throwIfDispose();
        promise.then((val) => {
            this.privList.add(val);
            // eslint-disable-next-line @typescript-eslint/no-empty-function
        }, () => { });
    }
    dequeue() {
        this.throwIfDispose();
        const deferredSubscriber = new _Promise__WEBPACK_IMPORTED_MODULE_1__.Deferred();
        if (this.privSubscribers) {
            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Dequeue });
            this.drain();
        }
        return deferredSubscriber.promise;
    }
    peek() {
        this.throwIfDispose();
        const deferredSubscriber = new _Promise__WEBPACK_IMPORTED_MODULE_1__.Deferred();
        const subs = this.privSubscribers;
        if (subs) {
            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Peek });
            this.drain();
        }
        return deferredSubscriber.promise;
    }
    length() {
        this.throwIfDispose();
        return this.privList.length();
    }
    isDisposed() {
        return this.privSubscribers == null;
    }
    drainAndDispose(pendingItemProcessor, reason) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.isDisposed() && !this.privIsDisposing) {
                this.privDisposeReason = reason;
                this.privIsDisposing = true;
                const subs = this.privSubscribers;
                if (subs) {
                    while (subs.length() > 0) {
                        const subscriber = subs.removeFirst();
                        // TODO: this needs work (Resolve(null) instead?).
                        subscriber.deferral.resolve(undefined);
                        // subscriber.deferral.reject("Disposed");
                    }
                    // note: this block assumes cooperative multitasking, i.e.,
                    // between the if-statement and the assignment there are no
                    // thread switches.
                    // Reason is that between the initial const = this.; and this
                    // point there is the derral.resolve() operation that might have
                    // caused recursive calls to the Queue, especially, calling
                    // Dispose() on the queue alredy (which would reset the var
                    // here to null!).
                    // That should generally hold true for javascript...
                    if (this.privSubscribers === subs) {
                        this.privSubscribers = subs;
                    }
                }
                for (const detachable of this.privDetachables) {
                    yield detachable.detach();
                }
                if (this.privPromiseStore.length() > 0 && pendingItemProcessor) {
                    const promiseArray = [];
                    this.privPromiseStore.toArray().forEach((wrapper) => {
                        promiseArray.push(wrapper);
                    });
                    return Promise.all(promiseArray).finally(() => {
                        this.privSubscribers = null;
                        this.privList.forEach((item) => {
                            pendingItemProcessor(item);
                        });
                        this.privList = null;
                        return;
                    }).then();
                }
                else {
                    this.privSubscribers = null;
                    this.privList = null;
                }
            }
        });
    }
    dispose(reason) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.drainAndDispose(null, reason);
        });
    }
    drain() {
        if (!this.privIsDrainInProgress && !this.privIsDisposing) {
            this.privIsDrainInProgress = true;
            const subs = this.privSubscribers;
            const lists = this.privList;
            if (subs && lists) {
                while (lists.length() > 0 && subs.length() > 0 && !this.privIsDisposing) {
                    const subscriber = subs.removeFirst();
                    if (subscriber.type === SubscriberType.Peek) {
                        subscriber.deferral.resolve(lists.first());
                    }
                    else {
                        const dequeuedItem = lists.removeFirst();
                        subscriber.deferral.resolve(dequeuedItem);
                    }
                }
                // note: this block assumes cooperative multitasking, i.e.,
                // between the if-statement and the assignment there are no
                // thread switches.
                // Reason is that between the initial const = this.; and this
                // point there is the derral.resolve() operation that might have
                // caused recursive calls to the Queue, especially, calling
                // Dispose() on the queue alredy (which would reset the var
                // here to null!).
                // That should generally hold true for javascript...
                if (this.privSubscribers === subs) {
                    this.privSubscribers = subs;
                }
                // note: this block assumes cooperative multitasking, i.e.,
                // between the if-statement and the assignment there are no
                // thread switches.
                // Reason is that between the initial const = this.; and this
                // point there is the derral.resolve() operation that might have
                // caused recursive calls to the Queue, especially, calling
                // Dispose() on the queue alredy (which would reset the var
                // here to null!).
                // That should generally hold true for javascript...
                if (this.privList === lists) {
                    this.privList = lists;
                }
            }
            this.privIsDrainInProgress = false;
        }
    }
    throwIfDispose() {
        if (this.isDisposed()) {
            if (this.privDisposeReason) {
                throw new _Error__WEBPACK_IMPORTED_MODULE_2__.InvalidOperationError(this.privDisposeReason);
            }
            throw new _Error__WEBPACK_IMPORTED_MODULE_2__.ObjectDisposedError("Queue");
        }
        else if (this.privIsDisposing) {
            throw new _Error__WEBPACK_IMPORTED_MODULE_2__.InvalidOperationError("Queue disposing");
        }
    }
}

//# sourceMappingURL=Queue.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/RawWebsocketMessage.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/RawWebsocketMessage.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RawWebsocketMessage": () => (/* binding */ RawWebsocketMessage)
/* harmony export */ });
/* harmony import */ var _ConnectionMessage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ConnectionMessage */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js");
/* harmony import */ var _Error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Error */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js");
/* harmony import */ var _Guid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Guid */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.



class RawWebsocketMessage {
    constructor(messageType, payload, id) {
        this.privPayload = null;
        if (!payload) {
            throw new _Error__WEBPACK_IMPORTED_MODULE_0__.ArgumentNullError("payload");
        }
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        if (messageType === _ConnectionMessage__WEBPACK_IMPORTED_MODULE_1__.MessageType.Binary && payload.__proto__.constructor.name !== "ArrayBuffer") {
            throw new _Error__WEBPACK_IMPORTED_MODULE_0__.InvalidOperationError("Payload must be ArrayBuffer");
        }
        if (messageType === _ConnectionMessage__WEBPACK_IMPORTED_MODULE_1__.MessageType.Text && !(typeof (payload) === "string")) {
            throw new _Error__WEBPACK_IMPORTED_MODULE_0__.InvalidOperationError("Payload must be a string");
        }
        this.privMessageType = messageType;
        this.privPayload = payload;
        this.privId = id ? id : (0,_Guid__WEBPACK_IMPORTED_MODULE_2__.createNoDashGuid)();
    }
    get messageType() {
        return this.privMessageType;
    }
    get payload() {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return this.privPayload;
    }
    get textContent() {
        if (this.privMessageType === _ConnectionMessage__WEBPACK_IMPORTED_MODULE_1__.MessageType.Binary) {
            throw new _Error__WEBPACK_IMPORTED_MODULE_0__.InvalidOperationError("Not supported for binary message");
        }
        return this.privPayload;
    }
    get binaryContent() {
        if (this.privMessageType === _ConnectionMessage__WEBPACK_IMPORTED_MODULE_1__.MessageType.Text) {
            throw new _Error__WEBPACK_IMPORTED_MODULE_0__.InvalidOperationError("Not supported for text message");
        }
        return this.privPayload;
    }
    get id() {
        return this.privId;
    }
}

//# sourceMappingURL=RawWebsocketMessage.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/RiffPcmEncoder.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/RiffPcmEncoder.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RiffPcmEncoder": () => (/* binding */ RiffPcmEncoder)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
class RiffPcmEncoder {
    constructor(actualSampleRate, desiredSampleRate) {
        this.privActualSampleRate = actualSampleRate;
        this.privDesiredSampleRate = desiredSampleRate;
    }
    encode(actualAudioFrame) {
        const audioFrame = this.downSampleAudioFrame(actualAudioFrame, this.privActualSampleRate, this.privDesiredSampleRate);
        if (!audioFrame) {
            return null;
        }
        const audioLength = audioFrame.length * 2;
        const buffer = new ArrayBuffer(audioLength);
        const view = new DataView(buffer);
        this.floatTo16BitPCM(view, 0, audioFrame);
        return buffer;
    }
    setString(view, offset, str) {
        for (let i = 0; i < str.length; i++) {
            view.setUint8(offset + i, str.charCodeAt(i));
        }
    }
    floatTo16BitPCM(view, offset, input) {
        for (let i = 0; i < input.length; i++, offset += 2) {
            const s = Math.max(-1, Math.min(1, input[i]));
            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);
        }
    }
    downSampleAudioFrame(srcFrame, srcRate, dstRate) {
        if (!srcFrame) {
            return null;
        }
        if (dstRate === srcRate || dstRate > srcRate) {
            return srcFrame;
        }
        const ratio = srcRate / dstRate;
        const dstLength = Math.round(srcFrame.length / ratio);
        const dstFrame = new Float32Array(dstLength);
        let srcOffset = 0;
        let dstOffset = 0;
        while (dstOffset < dstLength) {
            const nextSrcOffset = Math.round((dstOffset + 1) * ratio);
            let accum = 0;
            let count = 0;
            while (srcOffset < nextSrcOffset && srcOffset < srcFrame.length) {
                accum += srcFrame[srcOffset++];
                count++;
            }
            dstFrame[dstOffset++] = accum / count;
        }
        return dstFrame;
    }
}

//# sourceMappingURL=RiffPcmEncoder.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Stream.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Stream.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Stream": () => (/* binding */ Stream)
/* harmony export */ });
/* harmony import */ var _Error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Error */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js");
/* harmony import */ var _Guid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Guid */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");
/* harmony import */ var _Queue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Queue */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Queue.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class Stream {
    constructor(streamId) {
        this.privIsWriteEnded = false;
        this.privIsReadEnded = false;
        this.privId = streamId ? streamId : (0,_Guid__WEBPACK_IMPORTED_MODULE_0__.createNoDashGuid)();
        this.privReaderQueue = new _Queue__WEBPACK_IMPORTED_MODULE_1__.Queue();
    }
    get isClosed() {
        return this.privIsWriteEnded;
    }
    get isReadEnded() {
        return this.privIsReadEnded;
    }
    get id() {
        return this.privId;
    }
    close() {
        if (!this.privIsWriteEnded) {
            this.writeStreamChunk({
                buffer: null,
                isEnd: true,
                timeReceived: Date.now(),
            });
            this.privIsWriteEnded = true;
        }
    }
    writeStreamChunk(streamChunk) {
        this.throwIfClosed();
        if (!this.privReaderQueue.isDisposed()) {
            try {
                this.privReaderQueue.enqueue(streamChunk);
            }
            catch (e) {
                // Do nothing
            }
        }
    }
    read() {
        if (this.privIsReadEnded) {
            throw new _Error__WEBPACK_IMPORTED_MODULE_2__.InvalidOperationError("Stream read has already finished");
        }
        return this.privReaderQueue
            .dequeue()
            .then((streamChunk) => __awaiter(this, void 0, void 0, function* () {
            if (streamChunk === undefined || streamChunk.isEnd) {
                yield this.privReaderQueue.dispose("End of stream reached");
            }
            return streamChunk;
        }));
    }
    readEnded() {
        if (!this.privIsReadEnded) {
            this.privIsReadEnded = true;
            this.privReaderQueue = new _Queue__WEBPACK_IMPORTED_MODULE_1__.Queue();
        }
    }
    throwIfClosed() {
        if (this.privIsWriteEnded) {
            throw new _Error__WEBPACK_IMPORTED_MODULE_2__.InvalidOperationError("Stream closed");
        }
    }
}

//# sourceMappingURL=Stream.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/StringUtils.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/StringUtils.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StringUtils": () => (/* binding */ StringUtils)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * String helper functions
 */
class StringUtils {
    /**
     * Formats a string by replacing the named {keys} in the string with the values contained in the replacement dictionary.
     * @param format The format string that contains the parts to replace surrounded by {}. For example: "wss://{region}.cts.speech.microsoft.com".
     * If your string needs to contain a { or } you can use the {{ and }} escape sequences respectively.
     * @param replacements The dictionary of replacements. If a replacement is not found, it is replaced with an empty string
     * @returns The formatted string. If you pass in a null or undefined format string, an empty string will be returned
     */
    static formatString(format, replacements) {
        if (!format) {
            return "";
        }
        if (!replacements) {
            return format;
        }
        let formatted = "";
        let key = "";
        const appendToFormatted = (str) => {
            formatted += str;
        };
        const appendToKey = (str) => {
            key += str;
        };
        let appendFunc = appendToFormatted;
        for (let i = 0; i < format.length; i++) {
            const c = format[i];
            const next = i + 1 < format.length ? format[i + 1] : "";
            switch (c) {
                case "{":
                    if (next === "{") {
                        appendFunc("{");
                        i++;
                    }
                    else {
                        appendFunc = appendToKey;
                    }
                    break;
                case "}":
                    if (next === "}") {
                        appendFunc("}");
                        i++;
                    }
                    else {
                        if (replacements.hasOwnProperty(key)) {
                            formatted += replacements[key];
                        }
                        appendFunc = appendToFormatted;
                        key = "";
                    }
                    break;
                default:
                    appendFunc(c);
                    break;
            }
        }
        return formatted;
    }
}

//# sourceMappingURL=StringUtils.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Timeout.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Timeout.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Timeout": () => (/* binding */ Timeout)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
class Timeout {
    static load() {
        // Prefilling the Maps with a function indexed by zero is necessary to be compliant with the specification.
        const scheduledTimeoutFunctions = new Map([[0, () => { }]]); // eslint-disable-line @typescript-eslint/no-empty-function
        const unhandledRequests = new Map();
        // eslint-disable-next-line
        const workerScript = `!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=14)}([function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return u})),n.d(t,"c",(function(){return a})),n.d(t,"d",(function(){return d}));const r=new Map,o=new Map,i=e=>{const t=r.get(e);if(void 0===t)throw new Error('There is no interval scheduled with the given id "'.concat(e,'".'));clearTimeout(t),r.delete(e)},u=e=>{const t=o.get(e);if(void 0===t)throw new Error('There is no timeout scheduled with the given id "'.concat(e,'".'));clearTimeout(t),o.delete(e)},f=(e,t)=>{let n,r;if("performance"in self){const o=performance.now();n=o,r=e-Math.max(0,o-t)}else n=Date.now(),r=e;return{expected:n+r,remainingDelay:r}},c=(e,t,n,r)=>{const o="performance"in self?performance.now():Date.now();o>n?postMessage({id:null,method:"call",params:{timerId:t}}):e.set(t,setTimeout(c,n-o,e,t,n))},a=(e,t,n)=>{const{expected:o,remainingDelay:i}=f(e,n);r.set(t,setTimeout(c,i,r,t,o))},d=(e,t,n)=>{const{expected:r,remainingDelay:i}=f(e,n);o.set(t,setTimeout(c,i,o,t,r))}},function(e,t,n){"use strict";n.r(t);var r=n(2);for(var o in r)"default"!==o&&function(e){n.d(t,e,(function(){return r[e]}))}(o);var i=n(3);for(var o in i)"default"!==o&&function(e){n.d(t,e,(function(){return i[e]}))}(o);var u=n(4);for(var o in u)"default"!==o&&function(e){n.d(t,e,(function(){return u[e]}))}(o);var f=n(5);for(var o in f)"default"!==o&&function(e){n.d(t,e,(function(){return f[e]}))}(o);var c=n(6);for(var o in c)"default"!==o&&function(e){n.d(t,e,(function(){return c[e]}))}(o);var a=n(7);for(var o in a)"default"!==o&&function(e){n.d(t,e,(function(){return a[e]}))}(o);var d=n(8);for(var o in d)"default"!==o&&function(e){n.d(t,e,(function(){return d[e]}))}(o);var s=n(9);for(var o in s)"default"!==o&&function(e){n.d(t,e,(function(){return s[e]}))}(o)},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){"use strict";n.r(t);var r=n(11);for(var o in r)"default"!==o&&function(e){n.d(t,e,(function(){return r[e]}))}(o);var i=n(12);for(var o in i)"default"!==o&&function(e){n.d(t,e,(function(){return i[e]}))}(o);var u=n(13);for(var o in u)"default"!==o&&function(e){n.d(t,e,(function(){return u[e]}))}(o)},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n(1);for(var i in o)"default"!==i&&function(e){n.d(t,e,(function(){return o[e]}))}(i);var u=n(10);for(var i in u)"default"!==i&&function(e){n.d(t,e,(function(){return u[e]}))}(i);addEventListener("message",({data:e})=>{try{if("clear"===e.method){const{id:t,params:{timerId:n}}=e;Object(r.b)(n),postMessage({error:null,id:t})}else{if("set"!==e.method)throw new Error('The given method "'.concat(e.method,'" is not supported'));{const{params:{delay:t,now:n,timerId:o}}=e;Object(r.d)(t,o,n)}}}catch(t){postMessage({error:{message:t.message},id:e.id,result:null})}})}]);`;
        const workerUrl = "data:text/javascript;base64," + btoa(workerScript);
        const worker = new Worker(workerUrl);
        worker.addEventListener("message", ({ data }) => {
            if (Timeout.isCallNotification(data)) {
                const { params: { timerId } } = data;
                const idOrFunc = scheduledTimeoutFunctions.get(timerId);
                if (typeof idOrFunc === "number") {
                    const unhandledTimerId = unhandledRequests.get(idOrFunc);
                    if (unhandledTimerId === undefined ||
                        unhandledTimerId !== timerId) {
                        throw new Error("The timer is in an undefined state.");
                    }
                }
                else if (typeof idOrFunc !== "undefined") {
                    idOrFunc();
                    // A timeout can be safely deleted because it is only called once.
                    scheduledTimeoutFunctions.delete(timerId);
                }
                else {
                    throw new Error("The timer is in an undefined state.");
                }
            }
            else if (Timeout.isClearResponse(data)) {
                const { id } = data;
                const unhandledTimerId = unhandledRequests.get(id);
                if (unhandledTimerId === undefined) {
                    throw new Error("The timer is in an undefined state.");
                }
                unhandledRequests.delete(id);
                scheduledTimeoutFunctions.delete(unhandledTimerId);
            }
            else {
                const { error: { message } } = data;
                throw new Error(message);
            }
        });
        const clearTimeout = (timerId) => {
            const id = Math.random();
            unhandledRequests.set(id, timerId);
            scheduledTimeoutFunctions.set(timerId, id);
            worker.postMessage({
                id,
                method: "clear",
                params: { timerId }
            });
        };
        const setTimeout = (func, delay) => {
            const timerId = Math.random();
            scheduledTimeoutFunctions.set(timerId, func);
            worker.postMessage({
                id: null,
                method: "set",
                params: {
                    delay,
                    now: performance.now(),
                    timerId
                }
            });
            return timerId;
        };
        return {
            clearTimeout,
            setTimeout
        };
    }
    static loadWorkerTimers() {
        return () => {
            if (Timeout.workerTimers !== null) {
                return Timeout.workerTimers;
            }
            Timeout.workerTimers = Timeout.load();
            return Timeout.workerTimers;
        };
    }
    static isCallNotification(message) {
        return message.method !== undefined && message.method === "call";
    }
    static isClearResponse(message) {
        return message.error === null && typeof message.id === "number";
    }
}
Timeout.workerTimers = null;
Timeout.clearTimeout = (timerId) => Timeout.timers().clearTimeout(timerId);
Timeout.setTimeout = (func, delay) => Timeout.timers().setTimeout(func, delay);
Timeout.timers = Timeout.loadWorkerTimers();

//# sourceMappingURL=Timeout.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ActivityReceivedEventArgs.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ActivityReceivedEventArgs.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ActivityReceivedEventArgs": () => (/* binding */ ActivityReceivedEventArgs)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Defines contents of received message/events.
 * @class ActivityReceivedEventArgs
 */
class ActivityReceivedEventArgs {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {any} activity - The activity..
     */
    constructor(activity, audioStream) {
        this.privActivity = activity;
        this.privAudioStream = audioStream;
    }
    /**
     * Gets the received activity
     * @member ActivityReceivedEventArgs.prototype.activity
     * @function
     * @public
     * @returns {any} the received activity.
     */
    get activity() {
        return this.privActivity;
    }
    get audioStream() {
        return this.privAudioStream;
    }
}

//# sourceMappingURL=ActivityReceivedEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioConfig.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioConfig.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AudioConfig": () => (/* binding */ AudioConfig),
/* harmony export */   "AudioConfigImpl": () => (/* binding */ AudioConfigImpl),
/* harmony export */   "AudioOutputConfigImpl": () => (/* binding */ AudioOutputConfigImpl)
/* harmony export */ });
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/PCMRecorder.js");
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/MicAudioSource.js");
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/FileAudioSource.js");
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/PullAudioInputStreamCallback.js");
/* harmony import */ var _AudioInputStream__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./AudioInputStream */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioInputStream.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/SpeakerAudioDestination.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/PushAudioOutputStreamCallback.js");
/* harmony import */ var _AudioOutputStream__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./AudioOutputStream */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioOutputStream.js");
/* harmony import */ var _AudioFileWriter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./AudioFileWriter */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioFileWriter.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.






/**
 * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).
 * @class AudioConfig
 * Updated in version 1.11.0
 */
class AudioConfig {
    /**
     * Creates an AudioConfig object representing the default microphone on the system.
     * @member AudioConfig.fromDefaultMicrophoneInput
     * @function
     * @public
     * @returns {AudioConfig} The audio input configuration being created.
     */
    static fromDefaultMicrophoneInput() {
        const pcmRecorder = new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__.PcmRecorder(true);
        return new AudioConfigImpl(new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_1__.MicAudioSource(pcmRecorder));
    }
    /**
     * Creates an AudioConfig object representing a microphone with the specified device ID.
     * @member AudioConfig.fromMicrophoneInput
     * @function
     * @public
     * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.
     * Default microphone is used the value is omitted.
     * @returns {AudioConfig} The audio input configuration being created.
     */
    static fromMicrophoneInput(deviceId) {
        const pcmRecorder = new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__.PcmRecorder(true);
        return new AudioConfigImpl(new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_1__.MicAudioSource(pcmRecorder, deviceId));
    }
    /**
     * Creates an AudioConfig object representing the specified file.
     * @member AudioConfig.fromWavFileInput
     * @function
     * @public
     * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM is supported.
     * @returns {AudioConfig} The audio input configuration being created.
     */
    static fromWavFileInput(file, name = "unnamedBuffer.wav") {
        return new AudioConfigImpl(new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_2__.FileAudioSource(file, name));
    }
    /**
     * Creates an AudioConfig object representing the specified stream.
     * @member AudioConfig.fromStreamInput
     * @function
     * @public
     * @param {AudioInputStream | PullAudioInputStreamCallback | MediaStream} audioStream - Specifies the custom audio input
     * stream. Currently, only WAV / PCM is supported.
     * @returns {AudioConfig} The audio input configuration being created.
     */
    static fromStreamInput(audioStream) {
        if (audioStream instanceof _Exports__WEBPACK_IMPORTED_MODULE_3__.PullAudioInputStreamCallback) {
            return new AudioConfigImpl(new _AudioInputStream__WEBPACK_IMPORTED_MODULE_4__.PullAudioInputStreamImpl(audioStream));
        }
        if (audioStream instanceof _AudioInputStream__WEBPACK_IMPORTED_MODULE_4__.AudioInputStream) {
            return new AudioConfigImpl(audioStream);
        }
        if (typeof MediaStream !== "undefined" && audioStream instanceof MediaStream) {
            const pcmRecorder = new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__.PcmRecorder(false);
            return new AudioConfigImpl(new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_1__.MicAudioSource(pcmRecorder, null, null, audioStream));
        }
        throw new Error("Not Supported Type");
    }
    /**
     * Creates an AudioConfig object representing the default speaker.
     * @member AudioConfig.fromDefaultSpeakerOutput
     * @function
     * @public
     * @returns {AudioConfig} The audio output configuration being created.
     * Added in version 1.11.0
     */
    static fromDefaultSpeakerOutput() {
        return new AudioOutputConfigImpl(new _Exports__WEBPACK_IMPORTED_MODULE_5__.SpeakerAudioDestination());
    }
    /**
     * Creates an AudioConfig object representing the custom IPlayer object.
     * You can use the IPlayer object to control pause, resume, etc.
     * @member AudioConfig.fromSpeakerOutput
     * @function
     * @public
     * @param {IPlayer} player - the IPlayer object for playback.
     * @returns {AudioConfig} The audio output configuration being created.
     * Added in version 1.12.0
     */
    static fromSpeakerOutput(player) {
        if (player === undefined) {
            return AudioConfig.fromDefaultSpeakerOutput();
        }
        if (player instanceof _Exports__WEBPACK_IMPORTED_MODULE_5__.SpeakerAudioDestination) {
            return new AudioOutputConfigImpl(player);
        }
        throw new Error("Not Supported Type");
    }
    /**
     * Creates an AudioConfig object representing a specified output audio file
     * @member AudioConfig.fromAudioFileOutput
     * @function
     * @public
     * @param {PathLike} filename - the filename of the output audio file
     * @returns {AudioConfig} The audio output configuration being created.
     * Added in version 1.11.0
     */
    static fromAudioFileOutput(filename) {
        return new AudioOutputConfigImpl(new _AudioFileWriter__WEBPACK_IMPORTED_MODULE_6__.AudioFileWriter(filename));
    }
    /**
     * Creates an AudioConfig object representing a specified audio output stream
     * @member AudioConfig.fromStreamOutput
     * @function
     * @public
     * @param {AudioOutputStream | PushAudioOutputStreamCallback} audioStream - Specifies the custom audio output
     * stream.
     * @returns {AudioConfig} The audio output configuration being created.
     * Added in version 1.11.0
     */
    static fromStreamOutput(audioStream) {
        if (audioStream instanceof _Exports__WEBPACK_IMPORTED_MODULE_7__.PushAudioOutputStreamCallback) {
            return new AudioOutputConfigImpl(new _AudioOutputStream__WEBPACK_IMPORTED_MODULE_8__.PushAudioOutputStreamImpl(audioStream));
        }
        if (audioStream instanceof _AudioOutputStream__WEBPACK_IMPORTED_MODULE_8__.PushAudioOutputStream) {
            return new AudioOutputConfigImpl(audioStream);
        }
        if (audioStream instanceof _AudioOutputStream__WEBPACK_IMPORTED_MODULE_8__.PullAudioOutputStream) {
            return new AudioOutputConfigImpl(audioStream);
        }
        throw new Error("Not Supported Type");
    }
}
/**
 * Represents audio input stream used for custom audio input configurations.
 * @private
 * @class AudioConfigImpl
 */
class AudioConfigImpl extends AudioConfig {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {IAudioSource} source - An audio source.
     */
    constructor(source) {
        super();
        this.privSource = source;
    }
    /**
     * Format information for the audio
     */
    get format() {
        return this.privSource.format;
    }
    /**
     * @member AudioConfigImpl.prototype.close
     * @function
     * @public
     */
    close(cb, err) {
        this.privSource.turnOff().then(() => {
            if (!!cb) {
                cb();
            }
        }, (error) => {
            if (!!err) {
                err(error);
            }
        });
    }
    /**
     * @member AudioConfigImpl.prototype.id
     * @function
     * @public
     */
    id() {
        return this.privSource.id();
    }
    /**
     * @member AudioConfigImpl.prototype.turnOn
     * @function
     * @public
     * @returns {Promise<void>} A promise.
     */
    turnOn() {
        return this.privSource.turnOn();
    }
    /**
     * @member AudioConfigImpl.prototype.attach
     * @function
     * @public
     * @param {string} audioNodeId - The audio node id.
     * @returns {Promise<IAudioStreamNode>} A promise.
     */
    attach(audioNodeId) {
        return this.privSource.attach(audioNodeId);
    }
    /**
     * @member AudioConfigImpl.prototype.detach
     * @function
     * @public
     * @param {string} audioNodeId - The audio node id.
     */
    detach(audioNodeId) {
        return this.privSource.detach(audioNodeId);
    }
    /**
     * @member AudioConfigImpl.prototype.turnOff
     * @function
     * @public
     * @returns {Promise<void>} A promise.
     */
    turnOff() {
        return this.privSource.turnOff();
    }
    /**
     * @member AudioConfigImpl.prototype.events
     * @function
     * @public
     * @returns {EventSource<AudioSourceEvent>} An event source for audio events.
     */
    get events() {
        return this.privSource.events;
    }
    setProperty(name, value) {
        _Contracts__WEBPACK_IMPORTED_MODULE_9__.Contracts.throwIfNull(value, "value");
        if (undefined !== this.privSource.setProperty) {
            this.privSource.setProperty(name, value);
        }
        else {
            throw new Error("This AudioConfig instance does not support setting properties.");
        }
    }
    getProperty(name, def) {
        if (undefined !== this.privSource.getProperty) {
            return this.privSource.getProperty(name, def);
        }
        else {
            throw new Error("This AudioConfig instance does not support getting properties.");
        }
        return def;
    }
    get deviceInfo() {
        return this.privSource.deviceInfo;
    }
}
class AudioOutputConfigImpl extends AudioConfig {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {IAudioDestination} destination - An audio destination.
     */
    constructor(destination) {
        super();
        this.privDestination = destination;
    }
    set format(format) {
        this.privDestination.format = format;
    }
    write(buffer) {
        this.privDestination.write(buffer);
    }
    close() {
        this.privDestination.close();
    }
    id() {
        return this.privDestination.id();
    }
    setProperty() {
        throw new Error("This AudioConfig instance does not support setting properties.");
    }
    getProperty() {
        throw new Error("This AudioConfig instance does not support getting properties.");
    }
}

//# sourceMappingURL=AudioConfig.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioFileWriter.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioFileWriter.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AudioFileWriter": () => (/* binding */ AudioFileWriter)
/* harmony export */ });
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ "?9463");
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


class AudioFileWriter {
    constructor(filename) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrUndefined(fs__WEBPACK_IMPORTED_MODULE_0__.openSync, "\nFile System access not available, please use Push or PullAudioOutputStream");
        this.privFd = fs__WEBPACK_IMPORTED_MODULE_0__.openSync(filename, "w");
    }
    set format(format) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNotUndefined(this.privAudioFormat, "format is already set");
        this.privAudioFormat = format;
        let headerOffset = 0;
        if (this.privAudioFormat.hasHeader) {
            headerOffset = this.privAudioFormat.header.byteLength;
        }
        if (this.privFd !== undefined) {
            this.privWriteStream = fs__WEBPACK_IMPORTED_MODULE_0__.createWriteStream("", { fd: this.privFd, start: headerOffset, autoClose: false });
        }
    }
    write(buffer) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrUndefined(this.privAudioFormat, "must set format before writing.");
        if (this.privWriteStream !== undefined) {
            this.privWriteStream.write(new Uint8Array(buffer.slice(0)));
        }
    }
    close() {
        if (this.privFd !== undefined) {
            this.privWriteStream.on("finish", () => {
                if (this.privAudioFormat.hasHeader) {
                    this.privAudioFormat.updateHeader(this.privWriteStream.bytesWritten);
                    fs__WEBPACK_IMPORTED_MODULE_0__.writeSync(this.privFd, new Int8Array(this.privAudioFormat.header), 0, this.privAudioFormat.header.byteLength, 0);
                }
                fs__WEBPACK_IMPORTED_MODULE_0__.closeSync(this.privFd);
                this.privFd = undefined;
            });
            this.privWriteStream.end();
        }
    }
    id() {
        return this.privId;
    }
}

//# sourceMappingURL=AudioFileWriter.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioInputStream.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioInputStream.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AudioInputStream": () => (/* binding */ AudioInputStream),
/* harmony export */   "PullAudioInputStream": () => (/* binding */ PullAudioInputStream),
/* harmony export */   "PullAudioInputStreamImpl": () => (/* binding */ PullAudioInputStreamImpl),
/* harmony export */   "PushAudioInputStream": () => (/* binding */ PushAudioInputStream),
/* harmony export */   "PushAudioInputStreamImpl": () => (/* binding */ PushAudioInputStreamImpl)
/* harmony export */ });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognizerConfig.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/EventSource.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ChunkedArrayBufferStream.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/AudioSourceEvents.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Events.js");
/* harmony import */ var _common_Guid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/Guid */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");
/* harmony import */ var _AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AudioStreamFormat */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioStreamFormat.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/* eslint-disable max-classes-per-file */





/**
 * Represents audio input stream used for custom audio input configurations.
 * @class AudioInputStream
 */
class AudioInputStream {
    /**
     * Creates and initializes an instance.
     * @constructor
     */
    constructor() {
        return;
    }
    /**
     * Creates a memory backed PushAudioInputStream with the specified audio format.
     * @member AudioInputStream.createPushStream
     * @function
     * @public
     * @param {AudioStreamFormat} format - The audio data format in which audio will be
     * written to the push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).
     * @returns {PushAudioInputStream} The audio input stream being created.
     */
    static createPushStream(format) {
        return PushAudioInputStream.create(format);
    }
    /**
     * Creates a PullAudioInputStream that delegates to the specified callback interface for read()
     * and close() methods.
     * @member AudioInputStream.createPullStream
     * @function
     * @public
     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from
     * PullAudioInputStreamCallback
     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from
     * the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).
     * @returns {PullAudioInputStream} The audio input stream being created.
     */
    static createPullStream(callback, format) {
        return PullAudioInputStream.create(callback, format);
        // throw new Error("Oops");
    }
}
/**
 * Represents memory backed push audio input stream used for custom audio input configurations.
 * @class PushAudioInputStream
 */
class PushAudioInputStream extends AudioInputStream {
    /**
     * Creates a memory backed PushAudioInputStream with the specified audio format.
     * @member PushAudioInputStream.create
     * @function
     * @public
     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the
     * push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).
     * @returns {PushAudioInputStream} The push audio input stream being created.
     */
    static create(format) {
        return new PushAudioInputStreamImpl(format);
    }
}
/**
 * Represents memory backed push audio input stream used for custom audio input configurations.
 * @private
 * @class PushAudioInputStreamImpl
 */
class PushAudioInputStreamImpl extends PushAudioInputStream {
    /**
     * Creates and initalizes an instance with the given values.
     * @constructor
     * @param {AudioStreamFormat} format - The audio stream format.
     */
    constructor(format) {
        super();
        if (format === undefined) {
            this.privFormat = _AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioStreamFormatImpl.getDefaultInputFormat();
        }
        else {
            this.privFormat = format;
        }
        this.privEvents = new _common_Exports__WEBPACK_IMPORTED_MODULE_1__.EventSource();
        this.privId = (0,_common_Guid__WEBPACK_IMPORTED_MODULE_2__.createNoDashGuid)();
        this.privStream = new _common_Exports__WEBPACK_IMPORTED_MODULE_3__.ChunkedArrayBufferStream(this.privFormat.avgBytesPerSec / 10);
    }
    /**
     * Format information for the audio
     */
    get format() {
        return Promise.resolve(this.privFormat);
    }
    /**
     * Writes the audio data specified by making an internal copy of the data.
     * @member PushAudioInputStreamImpl.prototype.write
     * @function
     * @public
     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.
     */
    write(dataBuffer) {
        this.privStream.writeStreamChunk({
            buffer: dataBuffer,
            isEnd: false,
            timeReceived: Date.now()
        });
    }
    /**
     * Closes the stream.
     * @member PushAudioInputStreamImpl.prototype.close
     * @function
     * @public
     */
    close() {
        this.privStream.close();
    }
    id() {
        return this.privId;
    }
    turnOn() {
        this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_4__.AudioSourceInitializingEvent(this.privId)); // no stream id
        this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_4__.AudioSourceReadyEvent(this.privId));
        return;
    }
    attach(audioNodeId) {
        return __awaiter(this, void 0, void 0, function* () {
            this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_4__.AudioStreamNodeAttachingEvent(this.privId, audioNodeId));
            yield this.turnOn();
            const stream = this.privStream;
            this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_4__.AudioStreamNodeAttachedEvent(this.privId, audioNodeId));
            return {
                detach: () => __awaiter(this, void 0, void 0, function* () {
                    this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_4__.AudioStreamNodeDetachedEvent(this.privId, audioNodeId));
                    return this.turnOff();
                }),
                id: () => audioNodeId,
                read: () => stream.read(),
            };
        });
    }
    detach(audioNodeId) {
        this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_4__.AudioStreamNodeDetachedEvent(this.privId, audioNodeId));
    }
    turnOff() {
        return;
    }
    get events() {
        return this.privEvents;
    }
    get deviceInfo() {
        return Promise.resolve({
            bitspersample: this.privFormat.bitsPerSample,
            channelcount: this.privFormat.channels,
            connectivity: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_5__.connectivity.Unknown,
            manufacturer: "Speech SDK",
            model: "PushStream",
            samplerate: this.privFormat.samplesPerSec,
            type: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_5__.type.Stream,
        });
    }
    onEvent(event) {
        this.privEvents.onEvent(event);
        _common_Exports__WEBPACK_IMPORTED_MODULE_6__.Events.instance.onEvent(event);
    }
    toBuffer(arrayBuffer) {
        const buf = Buffer.alloc(arrayBuffer.byteLength);
        const view = new Uint8Array(arrayBuffer);
        for (let i = 0; i < buf.length; ++i) {
            buf[i] = view[i];
        }
        return buf;
    }
}
/*
 * Represents audio input stream used for custom audio input configurations.
 * @class PullAudioInputStream
 */
class PullAudioInputStream extends AudioInputStream {
    /**
     * Creates and initializes and instance.
     * @constructor
     */
    constructor() {
        super();
    }
    /**
     * Creates a PullAudioInputStream that delegates to the specified callback interface for
     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).
     * @member PullAudioInputStream.create
     * @function
     * @public
     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,
     * derived from PullAudioInputStreamCustomCallback
     * @param {AudioStreamFormat} format - The audio data format in which audio will be
     * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).
     * @returns {PullAudioInputStream} The push audio input stream being created.
     */
    static create(callback, format) {
        return new PullAudioInputStreamImpl(callback, format);
    }
}
/**
 * Represents audio input stream used for custom audio input configurations.
 * @private
 * @class PullAudioInputStreamImpl
 */
class PullAudioInputStreamImpl extends PullAudioInputStream {
    /**
     * Creates a PullAudioInputStream that delegates to the specified callback interface for
     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).
     * @constructor
     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,
     * derived from PullAudioInputStreamCustomCallback
     * @param {AudioStreamFormat} format - The audio data format in which audio will be
     * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).
     */
    constructor(callback, format) {
        super();
        if (undefined === format) {
            this.privFormat = _AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioStreamFormat.getDefaultInputFormat();
        }
        else {
            this.privFormat = format;
        }
        this.privEvents = new _common_Exports__WEBPACK_IMPORTED_MODULE_1__.EventSource();
        this.privId = (0,_common_Guid__WEBPACK_IMPORTED_MODULE_2__.createNoDashGuid)();
        this.privCallback = callback;
        this.privIsClosed = false;
        this.privBufferSize = this.privFormat.avgBytesPerSec / 10;
    }
    /**
     * Format information for the audio
     */
    get format() {
        return Promise.resolve(this.privFormat);
    }
    /**
     * Closes the stream.
     * @member PullAudioInputStreamImpl.prototype.close
     * @function
     * @public
     */
    close() {
        this.privIsClosed = true;
        this.privCallback.close();
    }
    id() {
        return this.privId;
    }
    turnOn() {
        this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_4__.AudioSourceInitializingEvent(this.privId)); // no stream id
        this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_4__.AudioSourceReadyEvent(this.privId));
        return;
    }
    attach(audioNodeId) {
        return __awaiter(this, void 0, void 0, function* () {
            this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_4__.AudioStreamNodeAttachingEvent(this.privId, audioNodeId));
            yield this.turnOn();
            this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_4__.AudioStreamNodeAttachedEvent(this.privId, audioNodeId));
            return {
                detach: () => {
                    this.privCallback.close();
                    this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_4__.AudioStreamNodeDetachedEvent(this.privId, audioNodeId));
                    return this.turnOff();
                },
                id: () => audioNodeId,
                read: () => {
                    let totalBytes = 0;
                    let transmitBuff;
                    // Until we have the minimum number of bytes to send in a transmission, keep asking for more.
                    while (totalBytes < this.privBufferSize) {
                        // Sizing the read buffer to the delta between the perfect size and what's left means we won't ever get too much
                        // data back.
                        const readBuff = new ArrayBuffer(this.privBufferSize - totalBytes);
                        const pulledBytes = this.privCallback.read(readBuff);
                        // If there is no return buffer yet defined, set the return buffer to the that was just populated.
                        // This was, if we have enough data there's no copy penalty, but if we don't we have a buffer that's the
                        // preferred size allocated.
                        if (undefined === transmitBuff) {
                            transmitBuff = readBuff;
                        }
                        else {
                            // Not the first bite at the apple, so fill the return buffer with the data we got back.
                            const intView = new Int8Array(transmitBuff);
                            intView.set(new Int8Array(readBuff), totalBytes);
                        }
                        // If there are no bytes to read, just break out and be done.
                        if (0 === pulledBytes) {
                            break;
                        }
                        totalBytes += pulledBytes;
                    }
                    return Promise.resolve({
                        buffer: transmitBuff.slice(0, totalBytes),
                        isEnd: this.privIsClosed || totalBytes === 0,
                        timeReceived: Date.now(),
                    });
                },
            };
        });
    }
    detach(audioNodeId) {
        this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_4__.AudioStreamNodeDetachedEvent(this.privId, audioNodeId));
    }
    turnOff() {
        return;
    }
    get events() {
        return this.privEvents;
    }
    get deviceInfo() {
        return Promise.resolve({
            bitspersample: this.privFormat.bitsPerSample,
            channelcount: this.privFormat.channels,
            connectivity: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_5__.connectivity.Unknown,
            manufacturer: "Speech SDK",
            model: "PullStream",
            samplerate: this.privFormat.samplesPerSec,
            type: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_5__.type.Stream,
        });
    }
    onEvent(event) {
        this.privEvents.onEvent(event);
        _common_Exports__WEBPACK_IMPORTED_MODULE_6__.Events.instance.onEvent(event);
    }
}

//# sourceMappingURL=AudioInputStream.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioOutputFormat.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioOutputFormat.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AudioOutputFormatImpl": () => (/* binding */ AudioOutputFormatImpl)
/* harmony export */ });
/* harmony import */ var _SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../SpeechSynthesisOutputFormat */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisOutputFormat.js");
/* harmony import */ var _AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AudioStreamFormat */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioStreamFormat.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


/**
 * @private
 * @class AudioOutputFormatImpl
 * Updated in version 1.17.0
 */
// eslint-disable-next-line max-classes-per-file
class AudioOutputFormatImpl extends _AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioStreamFormatImpl {
    /**
     * Creates an instance with the given values.
     * @constructor
     * @param formatTag
     * @param {number} channels - Number of channels.
     * @param {number} samplesPerSec - Samples per second.
     * @param {number} avgBytesPerSec - Average bytes per second.
     * @param {number} blockAlign - Block alignment.
     * @param {number} bitsPerSample - Bits per sample.
     * @param {string} audioFormatString - Audio format string
     * @param {string} requestAudioFormatString - Audio format string sent to service.
     * @param {boolean} hasHeader - If the format has header or not.
     */
    constructor(formatTag, channels, samplesPerSec, avgBytesPerSec, blockAlign, bitsPerSample, audioFormatString, requestAudioFormatString, hasHeader) {
        super(samplesPerSec, bitsPerSample, channels, formatTag);
        this.formatTag = formatTag;
        this.avgBytesPerSec = avgBytesPerSec;
        this.blockAlign = blockAlign;
        this.priAudioFormatString = audioFormatString;
        this.priRequestAudioFormatString = requestAudioFormatString;
        this.priHasHeader = hasHeader;
    }
    static fromSpeechSynthesisOutputFormat(speechSynthesisOutputFormat) {
        if (speechSynthesisOutputFormat === undefined) {
            return AudioOutputFormatImpl.getDefaultOutputFormat();
        }
        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(AudioOutputFormatImpl.SpeechSynthesisOutputFormatToString[speechSynthesisOutputFormat]);
    }
    static fromSpeechSynthesisOutputFormatString(speechSynthesisOutputFormatString) {
        switch (speechSynthesisOutputFormatString) {
            case "raw-8khz-8bit-mono-mulaw":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.MuLaw, 1, 8000, 8000, 1, 8, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);
            case "riff-16khz-16kbps-mono-siren":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.Siren, 1, 16000, 2000, 40, 0, speechSynthesisOutputFormatString, "audio-16khz-16kbps-mono-siren", true);
            case "audio-16khz-16kbps-mono-siren":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.Siren, 1, 16000, 2000, 40, 0, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);
            case "audio-16khz-32kbitrate-mono-mp3":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.MP3, 1, 16000, 32 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);
            case "audio-16khz-128kbitrate-mono-mp3":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.MP3, 1, 16000, 128 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);
            case "audio-16khz-64kbitrate-mono-mp3":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.MP3, 1, 16000, 64 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);
            case "audio-24khz-48kbitrate-mono-mp3":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.MP3, 1, 24000, 48 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);
            case "audio-24khz-96kbitrate-mono-mp3":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.MP3, 1, 24000, 96 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);
            case "audio-24khz-160kbitrate-mono-mp3":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.MP3, 1, 24000, 160 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);
            case "raw-16khz-16bit-mono-truesilk":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.SILKSkype, 1, 16000, 32000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);
            case "riff-8khz-16bit-mono-pcm":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.PCM, 1, 8000, 16000, 2, 16, speechSynthesisOutputFormatString, "raw-8khz-16bit-mono-pcm", true);
            case "riff-24khz-16bit-mono-pcm":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.PCM, 1, 24000, 48000, 2, 16, speechSynthesisOutputFormatString, "raw-24khz-16bit-mono-pcm", true);
            case "riff-8khz-8bit-mono-mulaw":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.MuLaw, 1, 8000, 8000, 1, 8, speechSynthesisOutputFormatString, "raw-8khz-8bit-mono-mulaw", true);
            case "raw-16khz-16bit-mono-pcm":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.PCM, 1, 16000, 32000, 2, 16, speechSynthesisOutputFormatString, "raw-16khz-16bit-mono-pcm", false);
            case "raw-24khz-16bit-mono-pcm":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.PCM, 1, 24000, 48000, 2, 16, speechSynthesisOutputFormatString, "raw-24khz-16bit-mono-pcm", false);
            case "raw-8khz-16bit-mono-pcm":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.PCM, 1, 8000, 16000, 2, 16, speechSynthesisOutputFormatString, "raw-8khz-16bit-mono-pcm", false);
            case "ogg-16khz-16bit-mono-opus":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.OGG_OPUS, 1, 16000, 8192, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);
            case "ogg-24khz-16bit-mono-opus":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.OGG_OPUS, 1, 24000, 8192, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);
            case "raw-48khz-16bit-mono-pcm":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.PCM, 1, 48000, 96000, 2, 16, speechSynthesisOutputFormatString, "raw-48khz-16bit-mono-pcm", false);
            case "riff-48khz-16bit-mono-pcm":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.PCM, 1, 48000, 96000, 2, 16, speechSynthesisOutputFormatString, "raw-48khz-16bit-mono-pcm", true);
            case "audio-48khz-96kbitrate-mono-mp3":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.MP3, 1, 48000, 96 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);
            case "audio-48khz-192kbitrate-mono-mp3":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.MP3, 1, 48000, 192 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);
            case "ogg-48khz-16bit-mono-opus":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.OGG_OPUS, 1, 48000, 12000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);
            case "webm-16khz-16bit-mono-opus":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.WEBM_OPUS, 1, 16000, 4000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);
            case "webm-24khz-16bit-mono-opus":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.WEBM_OPUS, 1, 24000, 6000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);
            case "webm-24khz-16bit-24kbps-mono-opus":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.WEBM_OPUS, 1, 24000, 3000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);
            case "audio-16khz-16bit-32kbps-mono-opus":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.OPUS, 1, 16000, 4000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);
            case "audio-24khz-16bit-48kbps-mono-opus":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.OPUS, 1, 24000, 6000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);
            case "audio-24khz-16bit-24kbps-mono-opus":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.OPUS, 1, 24000, 3000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);
            case "audio-24khz-16bit-mono-flac":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.FLAC, 1, 24000, 24000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);
            case "audio-48khz-16bit-mono-flac":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.FLAC, 1, 48000, 30000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);
            case "raw-24khz-16bit-mono-truesilk":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.SILKSkype, 1, 24000, 48000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);
            case "raw-8khz-8bit-mono-alaw":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.ALaw, 1, 8000, 8000, 1, 8, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);
            case "riff-8khz-8bit-mono-alaw":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.ALaw, 1, 8000, 8000, 1, 8, speechSynthesisOutputFormatString, "raw-8khz-8bit-mono-alaw", true);
            case "raw-22050hz-16bit-mono-pcm":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.PCM, 1, 22050, 44100, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);
            case "riff-22050hz-16bit-mono-pcm":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.PCM, 1, 22050, 44100, 2, 16, speechSynthesisOutputFormatString, "raw-22050hz-16bit-mono-pcm", true);
            case "raw-44100hz-16bit-mono-pcm":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.PCM, 1, 44100, 88200, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);
            case "riff-44100hz-16bit-mono-pcm":
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.PCM, 1, 44100, 88200, 2, 16, speechSynthesisOutputFormatString, "raw-44100hz-16bit-mono-pcm", true);
            case "riff-16khz-16bit-mono-pcm":
            default:
                return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.PCM, 1, 16000, 32000, 2, 16, "riff-16khz-16bit-mono-pcm", "raw-16khz-16bit-mono-pcm", true);
        }
    }
    static getDefaultOutputFormat() {
        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString((typeof window !== "undefined") ? "audio-24khz-48kbitrate-mono-mp3" : "riff-16khz-16bit-mono-pcm");
    }
    /**
     * Specifies if this audio output format has a header
     * @boolean AudioOutputFormatImpl.prototype.hasHeader
     * @function
     * @public
     */
    get hasHeader() {
        return this.priHasHeader;
    }
    /**
     * Specifies the header of this format
     * @ArrayBuffer AudioOutputFormatImpl.prototype.header
     * @function
     * @public
     */
    get header() {
        if (this.hasHeader) {
            return this.privHeader;
        }
        return undefined;
    }
    /**
     * Updates the header based on the audio length
     * @member AudioOutputFormatImpl.updateHeader
     * @function
     * @public
     * @param {number} audioLength - the audio length
     */
    updateHeader(audioLength) {
        if (this.priHasHeader) {
            const view = new DataView(this.privHeader);
            view.setUint32(4, audioLength + this.privHeader.byteLength - 8, true);
            view.setUint32(40, audioLength, true);
        }
    }
    /**
     * Specifies the audio format string to be sent to the service
     * @string AudioOutputFormatImpl.prototype.requestAudioFormatString
     * @function
     * @public
     */
    get requestAudioFormatString() {
        return this.priRequestAudioFormatString;
    }
}
AudioOutputFormatImpl.SpeechSynthesisOutputFormatToString = {
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw]: "raw-8khz-8bit-mono-mulaw",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren]: "riff-16khz-16kbps-mono-siren",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren]: "audio-16khz-16kbps-mono-siren",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3]: "audio-16khz-32kbitrate-mono-mp3",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3]: "audio-16khz-128kbitrate-mono-mp3",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3]: "audio-16khz-64kbitrate-mono-mp3",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3]: "audio-24khz-48kbitrate-mono-mp3",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3]: "audio-24khz-96kbitrate-mono-mp3",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3]: "audio-24khz-160kbitrate-mono-mp3",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk]: "raw-16khz-16bit-mono-truesilk",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm]: "riff-16khz-16bit-mono-pcm",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm]: "riff-8khz-16bit-mono-pcm",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm]: "riff-24khz-16bit-mono-pcm",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw]: "riff-8khz-8bit-mono-mulaw",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm]: "raw-16khz-16bit-mono-pcm",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm]: "raw-24khz-16bit-mono-pcm",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm]: "raw-8khz-16bit-mono-pcm",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus]: "ogg-16khz-16bit-mono-opus",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus]: "ogg-24khz-16bit-mono-opus",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm]: "raw-48khz-16bit-mono-pcm",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm]: "riff-48khz-16bit-mono-pcm",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3]: "audio-48khz-96kbitrate-mono-mp3",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3]: "audio-48khz-192kbitrate-mono-mp3",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus]: "ogg-48khz-16bit-mono-opus",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus]: "webm-16khz-16bit-mono-opus",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus]: "webm-24khz-16bit-mono-opus",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Webm24Khz16Bit24KbpsMonoOpus]: "webm-24khz-16bit-24kbps-mono-opus",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk]: "raw-24khz-16bit-mono-truesilk",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw]: "raw-8khz-8bit-mono-alaw",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw]: "riff-8khz-8bit-mono-alaw",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Audio16Khz16Bit32KbpsMonoOpus]: "audio-16khz-16bit-32kbps-mono-opus",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Audio24Khz16Bit48KbpsMonoOpus]: "audio-24khz-16bit-48kbps-mono-opus",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Audio24Khz16Bit24KbpsMonoOpus]: "audio-24khz-16bit-24kbps-mono-opus",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Raw22050Hz16BitMonoPcm]: "raw-22050hz-16bit-mono-pcm",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Riff22050Hz16BitMonoPcm]: "riff-22050hz-16bit-mono-pcm",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Raw44100Hz16BitMonoPcm]: "raw-44100hz-16bit-mono-pcm",
    [_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.SpeechSynthesisOutputFormat.Riff44100Hz16BitMonoPcm]: "riff-44100hz-16bit-mono-pcm",
};

//# sourceMappingURL=AudioOutputFormat.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioOutputStream.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioOutputStream.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AudioOutputStream": () => (/* binding */ AudioOutputStream),
/* harmony export */   "PullAudioOutputStream": () => (/* binding */ PullAudioOutputStream),
/* harmony export */   "PullAudioOutputStreamImpl": () => (/* binding */ PullAudioOutputStreamImpl),
/* harmony export */   "PushAudioOutputStream": () => (/* binding */ PushAudioOutputStream),
/* harmony export */   "PushAudioOutputStreamImpl": () => (/* binding */ PushAudioOutputStreamImpl)
/* harmony export */ });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Stream.js");
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _AudioOutputFormat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AudioOutputFormat */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioOutputFormat.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/* eslint-disable max-classes-per-file */



/**
 * Represents audio output stream used for custom audio output configurations.
 * @class AudioOutputStream
 */
class AudioOutputStream {
    /**
     * Creates and initializes an instance.
     * @constructor
     */
    constructor() {
        return;
    }
    /**
     * Creates a memory backed PullAudioOutputStream with the specified audio format.
     * @member AudioOutputStream.createPullStream
     * @function
     * @public
     * @returns {PullAudioOutputStream} The audio output stream being created.
     */
    static createPullStream() {
        return PullAudioOutputStream.create();
    }
}
/**
 * Represents memory backed push audio output stream used for custom audio output configurations.
 * @class PullAudioOutputStream
 */
class PullAudioOutputStream extends AudioOutputStream {
    /**
     * Creates a memory backed PullAudioOutputStream with the specified audio format.
     * @member PullAudioOutputStream.create
     * @function
     * @public
     * @returns {PullAudioOutputStream} The push audio output stream being created.
     */
    static create() {
        return new PullAudioOutputStreamImpl();
    }
}
/**
 * Represents memory backed push audio output stream used for custom audio output configurations.
 * @private
 * @class PullAudioOutputStreamImpl
 */
class PullAudioOutputStreamImpl extends PullAudioOutputStream {
    /**
     * Creates and initializes an instance with the given values.
     * @constructor
     */
    constructor() {
        super();
        this.privId = (0,_common_Exports__WEBPACK_IMPORTED_MODULE_0__.createNoDashGuid)();
        this.privStream = new _common_Exports__WEBPACK_IMPORTED_MODULE_1__.Stream();
    }
    /**
     * Sets the format information to the stream. For internal use only.
     * @param {AudioStreamFormat} format - the format to be set.
     */
    set format(format) {
        if (format === undefined || format === null) {
            this.privFormat = _AudioOutputFormat__WEBPACK_IMPORTED_MODULE_2__.AudioOutputFormatImpl.getDefaultOutputFormat();
        }
        this.privFormat = format;
    }
    /**
     * Format information for the audio
     */
    get format() {
        return this.privFormat;
    }
    /**
     * Checks if the stream is closed
     * @member PullAudioOutputStreamImpl.prototype.isClosed
     * @property
     * @public
     */
    get isClosed() {
        return this.privStream.isClosed;
    }
    /**
     * Gets the id of the stream
     * @member PullAudioOutputStreamImpl.prototype.id
     * @property
     * @public
     */
    id() {
        return this.privId;
    }
    /**
     * Reads audio data from the internal buffer.
     * @member PullAudioOutputStreamImpl.prototype.read
     * @function
     * @public
     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.
     * @returns {Promise<number>} - Audio buffer length has been read.
     */
    read(dataBuffer) {
        return __awaiter(this, void 0, void 0, function* () {
            const intView = new Int8Array(dataBuffer);
            let totalBytes = 0;
            if (this.privLastChunkView !== undefined) {
                if (this.privLastChunkView.length > dataBuffer.byteLength) {
                    intView.set(this.privLastChunkView.slice(0, dataBuffer.byteLength));
                    this.privLastChunkView = this.privLastChunkView.slice(dataBuffer.byteLength);
                    return Promise.resolve(dataBuffer.byteLength);
                }
                intView.set(this.privLastChunkView);
                totalBytes = this.privLastChunkView.length;
                this.privLastChunkView = undefined;
            }
            // Until we have the minimum number of bytes to send in a transmission, keep asking for more.
            while (totalBytes < dataBuffer.byteLength && !this.privStream.isReadEnded) {
                const chunk = yield this.privStream.read();
                if (chunk !== undefined && !chunk.isEnd) {
                    let tmpBuffer;
                    if (chunk.buffer.byteLength > dataBuffer.byteLength - totalBytes) {
                        tmpBuffer = chunk.buffer.slice(0, dataBuffer.byteLength - totalBytes);
                        this.privLastChunkView = new Int8Array(chunk.buffer.slice(dataBuffer.byteLength - totalBytes));
                    }
                    else {
                        tmpBuffer = chunk.buffer;
                    }
                    intView.set(new Int8Array(tmpBuffer), totalBytes);
                    totalBytes += tmpBuffer.byteLength;
                }
                else {
                    this.privStream.readEnded();
                }
            }
            return totalBytes;
        });
    }
    /**
     * Writes the audio data specified by making an internal copy of the data.
     * @member PullAudioOutputStreamImpl.prototype.write
     * @function
     * @public
     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.
     */
    write(dataBuffer) {
        _Contracts__WEBPACK_IMPORTED_MODULE_3__.Contracts.throwIfNullOrUndefined(this.privStream, "must set format before writing");
        this.privStream.writeStreamChunk({
            buffer: dataBuffer,
            isEnd: false,
            timeReceived: Date.now()
        });
    }
    /**
     * Closes the stream.
     * @member PullAudioOutputStreamImpl.prototype.close
     * @function
     * @public
     */
    close() {
        this.privStream.close();
    }
}
/*
 * Represents audio output stream used for custom audio output configurations.
 * @class PushAudioOutputStream
 */
class PushAudioOutputStream extends AudioOutputStream {
    /**
     * Creates and initializes and instance.
     * @constructor
     */
    constructor() {
        super();
    }
    /**
     * Creates a PushAudioOutputStream that delegates to the specified callback interface for
     * write() and close() methods.
     * @member PushAudioOutputStream.create
     * @function
     * @public
     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,
     * derived from PushAudioOutputStreamCallback
     * @returns {PushAudioOutputStream} The push audio output stream being created.
     */
    static create(callback) {
        return new PushAudioOutputStreamImpl(callback);
    }
}
/**
 * Represents audio output stream used for custom audio output configurations.
 * @private
 * @class PushAudioOutputStreamImpl
 */
class PushAudioOutputStreamImpl extends PushAudioOutputStream {
    /**
     * Creates a PushAudioOutputStream that delegates to the specified callback interface for
     * read() and close() methods.
     * @constructor
     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,
     * derived from PushAudioOutputStreamCallback
     */
    constructor(callback) {
        super();
        this.privId = (0,_common_Exports__WEBPACK_IMPORTED_MODULE_0__.createNoDashGuid)();
        this.privCallback = callback;
    }
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    set format(format) { }
    write(buffer) {
        if (!!this.privCallback.write) {
            this.privCallback.write(buffer);
        }
    }
    close() {
        if (!!this.privCallback.close) {
            this.privCallback.close();
        }
    }
    id() {
        return this.privId;
    }
}

//# sourceMappingURL=AudioOutputStream.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioStreamFormat.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioStreamFormat.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AudioFormatTag": () => (/* binding */ AudioFormatTag),
/* harmony export */   "AudioStreamFormat": () => (/* binding */ AudioStreamFormat),
/* harmony export */   "AudioStreamFormatImpl": () => (/* binding */ AudioStreamFormatImpl)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
// eslint-disable-next-line max-classes-per-file
var AudioFormatTag;
(function (AudioFormatTag) {
    AudioFormatTag[AudioFormatTag["PCM"] = 1] = "PCM";
    AudioFormatTag[AudioFormatTag["MuLaw"] = 2] = "MuLaw";
    AudioFormatTag[AudioFormatTag["Siren"] = 3] = "Siren";
    AudioFormatTag[AudioFormatTag["MP3"] = 4] = "MP3";
    AudioFormatTag[AudioFormatTag["SILKSkype"] = 5] = "SILKSkype";
    AudioFormatTag[AudioFormatTag["OGG_OPUS"] = 6] = "OGG_OPUS";
    AudioFormatTag[AudioFormatTag["WEBM_OPUS"] = 7] = "WEBM_OPUS";
    AudioFormatTag[AudioFormatTag["ALaw"] = 8] = "ALaw";
    AudioFormatTag[AudioFormatTag["FLAC"] = 9] = "FLAC";
    AudioFormatTag[AudioFormatTag["OPUS"] = 10] = "OPUS";
})(AudioFormatTag || (AudioFormatTag = {}));
/**
 * Represents audio stream format used for custom audio input configurations.
 * @class AudioStreamFormat
 */
class AudioStreamFormat {
    /**
     * Creates an audio stream format object representing the default audio stream
     * format (16KHz 16bit mono PCM).
     * @member AudioStreamFormat.getDefaultInputFormat
     * @function
     * @public
     * @returns {AudioStreamFormat} The audio stream format being created.
     */
    static getDefaultInputFormat() {
        return AudioStreamFormatImpl.getDefaultInputFormat();
    }
    /**
     * Creates an audio stream format object with the specified format characteristics.
     * @member AudioStreamFormat.getWaveFormat
     * @function
     * @public
     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).
     * @param {number} bitsPerSample - Bits per sample, typically 16.
     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data
     * uses one channel and stereo data uses two channels.
     * @param {AudioFormatTag} format - Audio format (PCM, alaw or mulaw).
     * @returns {AudioStreamFormat} The audio stream format being created.
     */
    static getWaveFormat(samplesPerSecond, bitsPerSample, channels, format) {
        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels, format);
    }
    /**
     * Creates an audio stream format object with the specified pcm waveformat characteristics.
     * @member AudioStreamFormat.getWaveFormatPCM
     * @function
     * @public
     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).
     * @param {number} bitsPerSample - Bits per sample, typically 16.
     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data
     * uses one channel and stereo data uses two channels.
     * @returns {AudioStreamFormat} The audio stream format being created.
     */
    static getWaveFormatPCM(samplesPerSecond, bitsPerSample, channels) {
        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels);
    }
}
/**
 * @private
 * @class AudioStreamFormatImpl
 */
class AudioStreamFormatImpl extends AudioStreamFormat {
    /**
     * Creates an instance with the given values.
     * @constructor
     * @param {number} samplesPerSec - Samples per second.
     * @param {number} bitsPerSample - Bits per sample.
     * @param {number} channels - Number of channels.
     * @param {AudioFormatTag} format - Audio format (PCM, alaw or mulaw).
     */
    constructor(samplesPerSec = 16000, bitsPerSample = 16, channels = 1, format = AudioFormatTag.PCM) {
        super();
        let isWavFormat = true;
        /* 1 for PCM; 6 for alaw; 7 for mulaw */
        switch (format) {
            case AudioFormatTag.PCM:
                this.formatTag = 1;
                break;
            case AudioFormatTag.ALaw:
                this.formatTag = 6;
                break;
            case AudioFormatTag.MuLaw:
                this.formatTag = 7;
                break;
            default:
                isWavFormat = false;
        }
        this.bitsPerSample = bitsPerSample;
        this.samplesPerSec = samplesPerSec;
        this.channels = channels;
        this.avgBytesPerSec = this.samplesPerSec * this.channels * (this.bitsPerSample / 8);
        this.blockAlign = this.channels * Math.max(this.bitsPerSample, 8);
        if (isWavFormat) {
            this.privHeader = new ArrayBuffer(44);
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView
            const view = new DataView(this.privHeader);
            /* RIFF identifier */
            this.setString(view, 0, "RIFF");
            /* file length */
            view.setUint32(4, 0, true);
            /* RIFF type & Format */
            this.setString(view, 8, "WAVEfmt ");
            /* format chunk length */
            view.setUint32(16, 16, true);
            /* audio format */
            view.setUint16(20, this.formatTag, true);
            /* channel count */
            view.setUint16(22, this.channels, true);
            /* sample rate */
            view.setUint32(24, this.samplesPerSec, true);
            /* byte rate (sample rate * block align) */
            view.setUint32(28, this.avgBytesPerSec, true);
            /* block align (channel count * bytes per sample) */
            view.setUint16(32, this.channels * (this.bitsPerSample / 8), true);
            /* bits per sample */
            view.setUint16(34, this.bitsPerSample, true);
            /* data chunk identifier */
            this.setString(view, 36, "data");
            /* data chunk length */
            view.setUint32(40, 0, true);
        }
    }
    /**
     * Retrieves the default input format.
     * @member AudioStreamFormatImpl.getDefaultInputFormat
     * @function
     * @public
     * @returns {AudioStreamFormatImpl} The default input format.
     */
    static getDefaultInputFormat() {
        return new AudioStreamFormatImpl();
    }
    /**
     * Creates an audio context appropriate to current browser
     * @member AudioStreamFormatImpl.getAudioContext
     * @function
     * @public
     * @returns {AudioContext} An audio context instance
     */
    /* eslint-disable */
    static getAudioContext(sampleRate) {
        // Workaround for Speech SDK bug in Safari.
        const AudioContext = window.AudioContext // our preferred impl
            || window.webkitAudioContext // fallback, mostly when on Safari
            || false; // could not find.
        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext
        if (!!AudioContext) {
            if (sampleRate !== undefined && navigator.mediaDevices.getSupportedConstraints().sampleRate) {
                return new AudioContext({ sampleRate });
            }
            else {
                return new AudioContext();
            }
        }
        else {
            throw new Error("Browser does not support Web Audio API (AudioContext is not available).");
        }
    }
    /* eslint-enable */
    /**
     * Closes the configuration object.
     * @member AudioStreamFormatImpl.prototype.close
     * @function
     * @public
     */
    close() {
        return;
    }
    get header() {
        return this.privHeader;
    }
    setString(view, offset, str) {
        for (let i = 0; i < str.length; i++) {
            view.setUint8(offset + i, str.charCodeAt(i));
        }
    }
}

//# sourceMappingURL=AudioStreamFormat.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/BaseAudioPlayer.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/BaseAudioPlayer.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseAudioPlayer": () => (/* binding */ BaseAudioPlayer)
/* harmony export */ });
/* harmony import */ var _common_Error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/Error */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AudioStreamFormat */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioStreamFormat.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



/**
 * Base audio player class
 * TODO: Plays only PCM for now.
 * @class
 */
class BaseAudioPlayer {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {AudioStreamFormat} audioFormat audio stream format recognized by the player.
     */
    constructor(audioFormat) {
        this.audioContext = null;
        this.gainNode = null;
        this.autoUpdateBufferTimer = 0;
        if (audioFormat === undefined) {
            audioFormat = _Exports__WEBPACK_IMPORTED_MODULE_0__.AudioStreamFormat.getDefaultInputFormat();
        }
        this.init(audioFormat);
    }
    /**
     * play Audio sample
     * @param newAudioData audio data to be played.
     */
    playAudioSample(newAudioData, cb, err) {
        try {
            this.ensureInitializedContext();
            const audioData = this.formatAudioData(newAudioData);
            const newSamplesData = new Float32Array(this.samples.length + audioData.length);
            newSamplesData.set(this.samples, 0);
            newSamplesData.set(audioData, this.samples.length);
            this.samples = newSamplesData;
            if (!!cb) {
                cb();
            }
        }
        catch (e) {
            if (!!err) {
                err(e);
            }
        }
    }
    /**
     * stops audio and clears the buffers
     */
    stopAudio(cb, err) {
        if (this.audioContext !== null) {
            this.samples = new Float32Array();
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            clearInterval(this.autoUpdateBufferTimer);
            this.audioContext.close().then(() => {
                if (!!cb) {
                    cb();
                }
            }, (error) => {
                if (!!err) {
                    err(error);
                }
            });
            this.audioContext = null;
        }
    }
    init(audioFormat) {
        this.audioFormat = audioFormat;
        this.samples = new Float32Array();
    }
    ensureInitializedContext() {
        if (this.audioContext === null) {
            this.createAudioContext();
            const timerPeriod = 200;
            this.autoUpdateBufferTimer = setInterval(() => {
                this.updateAudioBuffer();
            }, timerPeriod);
        }
    }
    createAudioContext() {
        // new ((window as any).AudioContext || (window as any).webkitAudioContext)();
        this.audioContext = _Exports__WEBPACK_IMPORTED_MODULE_0__.AudioStreamFormatImpl.getAudioContext();
        // TODO: Various examples shows this gain node, it does not seem to be needed unless we plan
        // to control the volume, not likely
        this.gainNode = this.audioContext.createGain();
        this.gainNode.gain.value = 1;
        this.gainNode.connect(this.audioContext.destination);
        this.startTime = this.audioContext.currentTime;
    }
    formatAudioData(audioData) {
        switch (this.audioFormat.bitsPerSample) {
            case 8:
                return this.formatArrayBuffer(new Int8Array(audioData), 128);
            case 16:
                return this.formatArrayBuffer(new Int16Array(audioData), 32768);
            case 32:
                return this.formatArrayBuffer(new Int32Array(audioData), 2147483648);
            default:
                throw new _common_Error__WEBPACK_IMPORTED_MODULE_1__.InvalidOperationError("Only WAVE_FORMAT_PCM (8/16/32 bps) format supported at this time");
        }
    }
    formatArrayBuffer(audioData, maxValue) {
        const float32Data = new Float32Array(audioData.length);
        for (let i = 0; i < audioData.length; i++) {
            float32Data[i] = audioData[i] / maxValue;
        }
        return float32Data;
    }
    updateAudioBuffer() {
        if (this.samples.length === 0) {
            return;
        }
        const channelCount = this.audioFormat.channels;
        const bufferSource = this.audioContext.createBufferSource();
        const frameCount = this.samples.length / channelCount;
        const audioBuffer = this.audioContext.createBuffer(channelCount, frameCount, this.audioFormat.samplesPerSec);
        // TODO: Should we do the conversion in the pushAudioSample instead?
        for (let channel = 0; channel < channelCount; channel++) {
            // Fill in individual channel data
            let channelOffset = channel;
            const audioData = audioBuffer.getChannelData(channel);
            for (let i = 0; i < this.samples.length; i++, channelOffset += channelCount) {
                audioData[i] = this.samples[channelOffset];
            }
        }
        if (this.startTime < this.audioContext.currentTime) {
            this.startTime = this.audioContext.currentTime;
        }
        bufferSource.buffer = audioBuffer;
        bufferSource.connect(this.gainNode);
        bufferSource.start(this.startTime);
        // Make sure we play the next sample after the current one.
        this.startTime += audioBuffer.duration;
        // Clear the samples for the next pushed data.
        this.samples = new Float32Array();
    }
    playAudio(audioData) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.audioContext === null) {
                this.createAudioContext();
            }
            const source = this.audioContext.createBufferSource();
            const destination = this.audioContext.destination;
            yield this.audioContext.decodeAudioData(audioData, (newBuffer) => {
                source.buffer = newBuffer;
                source.connect(destination);
                source.start(0);
            });
        });
    }
}

//# sourceMappingURL=BaseAudioPlayer.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/PullAudioInputStreamCallback.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/PullAudioInputStreamCallback.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PullAudioInputStreamCallback": () => (/* binding */ PullAudioInputStreamCallback)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * An abstract base class that defines callback methods (read() and close()) for
 * custom audio input streams).
 * @class PullAudioInputStreamCallback
 */
class PullAudioInputStreamCallback {
}

//# sourceMappingURL=PullAudioInputStreamCallback.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/PushAudioOutputStreamCallback.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/PushAudioOutputStreamCallback.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PushAudioOutputStreamCallback": () => (/* binding */ PushAudioOutputStreamCallback)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * An abstract base class that defines callback methods (write() and close()) for
 * custom audio output streams).
 * @class PushAudioOutputStreamCallback
 */
class PushAudioOutputStreamCallback {
}

//# sourceMappingURL=PushAudioOutputStreamCallback.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/SpeakerAudioDestination.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/SpeakerAudioDestination.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeakerAudioDestination": () => (/* binding */ SpeakerAudioDestination)
/* harmony export */ });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisAdapterBase.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Events.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/BackgroundError.js");
/* harmony import */ var _AudioOutputStream__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./AudioOutputStream */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioOutputStream.js");
/* harmony import */ var _AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AudioStreamFormat */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioStreamFormat.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




const MediaDurationPlaceholderSeconds = 60 * 30;
const AudioFormatToMimeType = {
    [_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.PCM]: "audio/wav",
    [_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.MuLaw]: "audio/x-wav",
    [_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.MP3]: "audio/mpeg",
    [_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.OGG_OPUS]: "audio/ogg",
    [_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.WEBM_OPUS]: "audio/webm; codecs=opus",
    [_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.ALaw]: "audio/x-wav",
    [_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.FLAC]: "audio/flac",
};
/**
 * Represents the speaker playback audio destination, which only works in browser.
 * Note: the SDK will try to use <a href="https://www.w3.org/TR/media-source/">Media Source Extensions</a> to play audio.
 * Mp3 format has better supports on Microsoft Edge, Chrome and Safari (desktop), so, it's better to specify mp3 format for playback.
 * @class SpeakerAudioDestination
 * Updated in version 1.17.0
 */
class SpeakerAudioDestination {
    constructor(audioDestinationId) {
        this.privPlaybackStarted = false;
        this.privAppendingToBuffer = false;
        this.privMediaSourceOpened = false;
        this.privBytesReceived = 0;
        this.privId = audioDestinationId ? audioDestinationId : (0,_common_Exports__WEBPACK_IMPORTED_MODULE_1__.createNoDashGuid)();
        this.privIsPaused = false;
        this.privIsClosed = false;
    }
    id() {
        return this.privId;
    }
    write(buffer, cb, err) {
        if (this.privAudioBuffer !== undefined) {
            this.privAudioBuffer.push(buffer);
            this.updateSourceBuffer().then(() => {
                if (!!cb) {
                    cb();
                }
            }, (error) => {
                if (!!err) {
                    err(error);
                }
            });
        }
        else if (this.privAudioOutputStream !== undefined) {
            this.privAudioOutputStream.write(buffer);
            this.privBytesReceived += buffer.byteLength;
        }
    }
    close(cb, err) {
        this.privIsClosed = true;
        if (this.privSourceBuffer !== undefined) {
            this.handleSourceBufferUpdateEnd().then(() => {
                if (!!cb) {
                    cb();
                }
            }, (error) => {
                if (!!err) {
                    err(error);
                }
            });
        }
        else if (this.privAudioOutputStream !== undefined && typeof window !== "undefined") {
            if ((this.privFormat.formatTag === _AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.PCM || this.privFormat.formatTag === _AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.MuLaw
                || this.privFormat.formatTag === _AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag.ALaw) && this.privFormat.hasHeader === false) {
                // eslint-disable-next-line no-console
                console.warn("Play back is not supported for raw PCM, mulaw or alaw format without header.");
                if (!!this.onAudioEnd) {
                    this.onAudioEnd(this);
                }
            }
            else {
                let receivedAudio = new ArrayBuffer(this.privBytesReceived);
                this.privAudioOutputStream.read(receivedAudio).then(() => {
                    receivedAudio = _common_speech_Exports__WEBPACK_IMPORTED_MODULE_2__.SynthesisAdapterBase.addHeader(receivedAudio, this.privFormat);
                    const audioBlob = new Blob([receivedAudio], { type: AudioFormatToMimeType[this.privFormat.formatTag] });
                    this.privAudio.src = window.URL.createObjectURL(audioBlob);
                    this.notifyPlayback().then(() => {
                        if (!!cb) {
                            cb();
                        }
                    }, (error) => {
                        if (!!err) {
                            err(error);
                        }
                    });
                }, (error) => {
                    if (!!err) {
                        err(error);
                    }
                });
            }
        }
        else {
            // unsupported format, call onAudioEnd directly.
            if (!!this.onAudioEnd) {
                this.onAudioEnd(this);
            }
        }
    }
    set format(format) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        if (typeof (AudioContext) !== "undefined" || (typeof (window) !== "undefined" && typeof (window.webkitAudioContext) !== "undefined")) {
            this.privFormat = format;
            const mimeType = AudioFormatToMimeType[this.privFormat.formatTag];
            if (mimeType === undefined) {
                // eslint-disable-next-line no-console
                console.warn(`Unknown mimeType for format ${_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag[this.privFormat.formatTag]}; playback is not supported.`);
            }
            else if (typeof (MediaSource) !== "undefined" && MediaSource.isTypeSupported(mimeType)) {
                this.privAudio = new Audio();
                this.privAudioBuffer = [];
                this.privMediaSource = new MediaSource();
                this.privAudio.src = URL.createObjectURL(this.privMediaSource);
                this.privAudio.load();
                this.privMediaSource.onsourceopen = () => {
                    this.privMediaSourceOpened = true;
                    this.privMediaSource.duration = MediaDurationPlaceholderSeconds;
                    this.privSourceBuffer = this.privMediaSource.addSourceBuffer(mimeType);
                    this.privSourceBuffer.onupdate = () => {
                        this.updateSourceBuffer().catch((reason) => {
                            _common_Exports__WEBPACK_IMPORTED_MODULE_3__.Events.instance.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_4__.BackgroundEvent(reason));
                        });
                    };
                    this.privSourceBuffer.onupdateend = () => {
                        this.handleSourceBufferUpdateEnd().catch((reason) => {
                            _common_Exports__WEBPACK_IMPORTED_MODULE_3__.Events.instance.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_4__.BackgroundEvent(reason));
                        });
                    };
                    this.privSourceBuffer.onupdatestart = () => {
                        this.privAppendingToBuffer = false;
                    };
                };
                this.updateSourceBuffer().catch((reason) => {
                    _common_Exports__WEBPACK_IMPORTED_MODULE_3__.Events.instance.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_4__.BackgroundEvent(reason));
                });
            }
            else {
                // eslint-disable-next-line no-console
                console.warn(`Format ${_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.AudioFormatTag[this.privFormat.formatTag]} could not be played by MSE, streaming playback is not enabled.`);
                this.privAudioOutputStream = new _AudioOutputStream__WEBPACK_IMPORTED_MODULE_5__.PullAudioOutputStreamImpl();
                this.privAudioOutputStream.format = this.privFormat;
                this.privAudio = new Audio();
            }
        }
    }
    get volume() {
        var _a, _b;
        return (_b = (_a = this.privAudio) === null || _a === void 0 ? void 0 : _a.volume) !== null && _b !== void 0 ? _b : -1;
    }
    set volume(volume) {
        if (!!this.privAudio) {
            this.privAudio.volume = volume;
        }
    }
    mute() {
        if (!!this.privAudio) {
            this.privAudio.muted = true;
        }
    }
    unmute() {
        if (!!this.privAudio) {
            this.privAudio.muted = false;
        }
    }
    get isClosed() {
        return this.privIsClosed;
    }
    get currentTime() {
        if (this.privAudio !== undefined) {
            return this.privAudio.currentTime;
        }
        return -1;
    }
    pause() {
        if (!this.privIsPaused && this.privAudio !== undefined) {
            this.privAudio.pause();
            this.privIsPaused = true;
        }
    }
    resume(cb, err) {
        if (this.privIsPaused && this.privAudio !== undefined) {
            this.privAudio.play().then(() => {
                if (!!cb) {
                    cb();
                }
            }, (error) => {
                if (!!err) {
                    err(error);
                }
            });
            this.privIsPaused = false;
        }
    }
    get internalAudio() {
        return this.privAudio;
    }
    updateSourceBuffer() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.privAudioBuffer !== undefined && (this.privAudioBuffer.length > 0) && this.sourceBufferAvailable()) {
                this.privAppendingToBuffer = true;
                const binary = this.privAudioBuffer.shift();
                try {
                    this.privSourceBuffer.appendBuffer(binary);
                }
                catch (error) {
                    this.privAudioBuffer.unshift(binary);
                    // eslint-disable-next-line no-console
                    console.log("buffer filled, pausing addition of binaries until space is made");
                    return;
                }
                yield this.notifyPlayback();
            }
            else if (this.canEndStream()) {
                yield this.handleSourceBufferUpdateEnd();
            }
        });
    }
    handleSourceBufferUpdateEnd() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.canEndStream() && this.sourceBufferAvailable()) {
                this.privMediaSource.endOfStream();
                yield this.notifyPlayback();
            }
        });
    }
    notifyPlayback() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.privPlaybackStarted && this.privAudio !== undefined) {
                this.privPlaybackStarted = true;
                if (!!this.onAudioStart) {
                    this.onAudioStart(this);
                }
                this.privAudio.onended = () => {
                    if (!!this.onAudioEnd) {
                        this.onAudioEnd(this);
                    }
                };
                if (!this.privIsPaused) {
                    yield this.privAudio.play();
                }
            }
        });
    }
    canEndStream() {
        return (this.isClosed && this.privSourceBuffer !== undefined && (this.privAudioBuffer.length === 0)
            && this.privMediaSourceOpened && !this.privAppendingToBuffer && this.privMediaSource.readyState === "open");
    }
    sourceBufferAvailable() {
        return (this.privSourceBuffer !== undefined && !this.privSourceBuffer.updating);
    }
}

//# sourceMappingURL=SpeakerAudioDestination.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/AutoDetectSourceLanguageConfig.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/AutoDetectSourceLanguageConfig.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AutoDetectSourceLanguageConfig": () => (/* binding */ AutoDetectSourceLanguageConfig)
/* harmony export */ });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _LanguageIdMode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LanguageIdMode */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/LanguageIdMode.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.




/**
 * Language auto detect configuration.
 * @class AutoDetectSourceLanguageConfig
 * Added in version 1.13.0.
 */
class AutoDetectSourceLanguageConfig {
    constructor() {
        this.privProperties = new _Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyCollection();
        this.privProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_LanguageIdMode, "AtStart");
        this.privLanguageIdMode = _LanguageIdMode__WEBPACK_IMPORTED_MODULE_2__.LanguageIdMode.AtStart;
    }
    /**
     * @member AutoDetectSourceLanguageConfig.fromOpenRange
     * @function
     * @public
     * Only [[SpeechSynthesizer]] supports source language auto detection from open range,
     * for [[Recognizer]], please use AutoDetectSourceLanguageConfig with specific source languages.
     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig
     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with open range.
     */
    static fromOpenRange() {
        const config = new AutoDetectSourceLanguageConfig();
        config.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, _common_speech_Exports__WEBPACK_IMPORTED_MODULE_3__.AutoDetectSourceLanguagesOpenRangeOptionName);
        return config;
    }
    /**
     * @member AutoDetectSourceLanguageConfig.fromLanguages
     * @function
     * @public
     * @param {string[]} languages Comma-separated string of languages (eg. "en-US,fr-FR") to populate properties of config.
     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig
     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given languages.
     */
    static fromLanguages(languages) {
        _Contracts__WEBPACK_IMPORTED_MODULE_4__.Contracts.throwIfArrayEmptyOrWhitespace(languages, "languages");
        const config = new AutoDetectSourceLanguageConfig();
        config.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, languages.join());
        return config;
    }
    /**
     * @member AutoDetectSourceLanguageConfig.fromSourceLanguageConfigs
     * @function
     * @public
     * @param {SourceLanguageConfig[]} configs SourceLanguageConfigs to populate properties of config.
     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig
     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given SourceLanguageConfigs.
     */
    static fromSourceLanguageConfigs(configs) {
        if (configs.length < 1) {
            throw new Error("Expected non-empty SourceLanguageConfig array.");
        }
        const autoConfig = new AutoDetectSourceLanguageConfig();
        const langs = [];
        configs.forEach((config) => {
            langs.push(config.language);
            if (config.endpointId !== undefined && config.endpointId !== "") {
                const customProperty = config.language + _Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_EndpointId.toString();
                autoConfig.properties.setProperty(customProperty, config.endpointId);
            }
        });
        autoConfig.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, langs.join());
        return autoConfig;
    }
    /**
     * @member AutoDetectSourceLanguageConfig.prototype.properties
     * @function
     * @public
     * @return {PropertyCollection} Properties of the config.
     * @summary Gets an auto detected language config properties
     */
    get properties() {
        return this.privProperties;
    }
    /**
     * @member AutoDetectSourceLanguageConfig.prototype.mode
     * @function
     * @public
     * @param {LanguageIdMode} mode LID mode desired.
     * @summary Sets LID operation to desired mode
     */
    set mode(mode) {
        if (mode === _LanguageIdMode__WEBPACK_IMPORTED_MODULE_2__.LanguageIdMode.Continuous) {
            this.privProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, "2");
            this.privProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_LanguageIdMode, "Continuous");
        }
        else { // LanguageIdMode.AtStart
            this.privProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, "1");
            this.privProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_LanguageIdMode, "AtStart");
        }
        this.privLanguageIdMode = mode;
    }
}

//# sourceMappingURL=AutoDetectSourceLanguageConfig.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/AutoDetectSourceLanguageResult.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/AutoDetectSourceLanguageResult.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AutoDetectSourceLanguageResult": () => (/* binding */ AutoDetectSourceLanguageResult)
/* harmony export */ });
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Output format
 * @class AutoDetectSourceLanguageResult
 */
class AutoDetectSourceLanguageResult {
    constructor(language, languageDetectionConfidence) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrUndefined(language, "language");
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrUndefined(languageDetectionConfidence, "languageDetectionConfidence");
        this.privLanguage = language;
        this.privLanguageDetectionConfidence = languageDetectionConfidence;
    }
    /**
     * Creates an instance of AutoDetectSourceLanguageResult object from a SpeechRecognitionResult instance.
     * @member AutoDetectSourceLanguageResult.fromResult
     * @function
     * @public
     * @param {SpeechRecognitionResult} result - The recognition result.
     * @returns {AutoDetectSourceLanguageResult} AutoDetectSourceLanguageResult object being created.
     */
    static fromResult(result) {
        return new AutoDetectSourceLanguageResult(result.language, result.languageDetectionConfidence);
    }
    get language() {
        return this.privLanguage;
    }
    get languageDetectionConfidence() {
        return this.privLanguageDetectionConfidence;
    }
}

//# sourceMappingURL=AutoDetectSourceLanguageResult.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/BotFrameworkConfig.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/BotFrameworkConfig.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BotFrameworkConfig": () => (/* binding */ BotFrameworkConfig)
/* harmony export */ });
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _DialogServiceConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DialogServiceConfig */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/DialogServiceConfig.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.



/**
 * Class that defines configurations for the dialog service connector object for using a Bot Framework backend.
 * @class BotFrameworkConfig
 */
class BotFrameworkConfig extends _DialogServiceConfig__WEBPACK_IMPORTED_MODULE_0__.DialogServiceConfigImpl {
    /**
     * Creates an instance of BotFrameworkConfig.
     */
    constructor() {
        super();
    }
    /**
     * Creates a bot framework configuration instance with the provided subscription information.
     * @member BotFrameworkConfig.fromSubscription
     * @function
     * @public
     * @param subscription Subscription key associated with the bot
     * @param region The region name (see the <a href="https://aka.ms/csspeech/region">region page</a>).
     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the
     * resource name.
     * @returns {BotFrameworkConfig} A new bot framework configuration instance.
     */
    static fromSubscription(subscription, region, botId) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(subscription, "subscription");
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(region, "region");
        const botFrameworkConfig = new _DialogServiceConfig__WEBPACK_IMPORTED_MODULE_0__.DialogServiceConfigImpl();
        botFrameworkConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.Conversation_DialogType, _DialogServiceConfig__WEBPACK_IMPORTED_MODULE_0__.DialogServiceConfig.DialogTypes.BotFramework);
        botFrameworkConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_Key, subscription);
        botFrameworkConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_Region, region);
        if (botId) {
            botFrameworkConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.Conversation_ApplicationId, botId);
        }
        return botFrameworkConfig;
    }
    /**
     * Creates a bot framework configuration instance for the specified authorization token and region.
     * Note: The caller must ensure that an authorization token is valid. Before an authorization token expires, the
     * caller must refresh it by setting the authorizationToken property on the corresponding
     * DialogServiceConnector instance created with this config. The contents of configuration objects are copied
     * when connectors are created, so setting authorizationToken on a DialogServiceConnector will not update the
     * original configuration's authorization token. Create a new configuration instance or set the
     * SpeechServiceAuthorization_Token property to update an existing instance if it will be used to create
     * further DialogServiceConnectors.
     * @member BotFrameworkConfig.fromAuthorizationToken
     * @function
     * @public
     * @param authorizationToken The authorization token associated with the bot
     * @param region The region name (see the <a href="https://aka.ms/csspeech/region">region page</a>).
     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the
     * resource name.
     * @returns {BotFrameworkConfig} A new bot framework configuration instance.
     */
    static fromAuthorizationToken(authorizationToken, region, botId) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(authorizationToken, "authorizationToken");
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(region, "region");
        const botFrameworkConfig = new _DialogServiceConfig__WEBPACK_IMPORTED_MODULE_0__.DialogServiceConfigImpl();
        botFrameworkConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.Conversation_DialogType, _DialogServiceConfig__WEBPACK_IMPORTED_MODULE_0__.DialogServiceConfig.DialogTypes.BotFramework);
        botFrameworkConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceAuthorization_Token, authorizationToken);
        botFrameworkConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_Region, region);
        if (botId) {
            botFrameworkConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.Conversation_ApplicationId, botId);
        }
        return botFrameworkConfig;
    }
    /**
     * Creates an instance of a BotFrameworkConfig.
     * This method is intended only for users who use a non-default service host. The standard resource path will be
     * assumed. For services with a non-standard resource path or no path at all, use fromEndpoint instead.
     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.
     * Note: To use an authorization token with fromHost, use fromHost(URL) and then set the AuthorizationToken
     * property on the created BotFrameworkConfig instance.
     * Note: Added in version 1.15.0.
     * @member BotFrameworkConfig.fromHost
     * @function
     * @public
     * @param {URL | string} host - If a URL is provided, the fully-qualified host with protocol (e.g.
     * wss://your.host.com:1234) will be used. If a string is provided, it will be embedded in
     * wss://{host}.convai.speech.azure.us.
     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization
     * token must be set.
     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the
     * resource name.
     * @returns {BotFrameworkConfig} A new bot framework configuration instance.
     */
    static fromHost(host, subscriptionKey, botId) {
        void botId;
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrUndefined(host, "host");
        const resolvedHost = host instanceof URL ? host : new URL(`wss://${host}.convai.speech.azure.us`);
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrUndefined(resolvedHost, "resolvedHost");
        const botFrameworkConfig = new _DialogServiceConfig__WEBPACK_IMPORTED_MODULE_0__.DialogServiceConfigImpl();
        botFrameworkConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.Conversation_DialogType, _DialogServiceConfig__WEBPACK_IMPORTED_MODULE_0__.DialogServiceConfig.DialogTypes.BotFramework);
        botFrameworkConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_Host, resolvedHost.toString());
        if (undefined !== subscriptionKey) {
            botFrameworkConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_Key, subscriptionKey);
        }
        return botFrameworkConfig;
    }
    /**
     * Creates an instance of a BotFrameworkConfig.
     * This method is intended only for users who use a non-standard service endpoint or parameters.
     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.
     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the
     * fromEndpoint method, and then set authorizationToken="token" on the created BotFrameworkConfig instance to
     * use the authorization token.
     * Note: Added in version 1.15.0.
     * @member BotFrameworkConfig.fromEndpoint
     * @function
     * @public
     * @param {URL} endpoint - The service endpoint to connect to.
     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization
     * token must be set.
     * @returns {BotFrameworkConfig} - A new bot framework configuration instance using the provided endpoint.
     */
    static fromEndpoint(endpoint, subscriptionKey) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNull(endpoint, "endpoint");
        const botFrameworkConfig = new _DialogServiceConfig__WEBPACK_IMPORTED_MODULE_0__.DialogServiceConfigImpl();
        botFrameworkConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.Conversation_DialogType, _DialogServiceConfig__WEBPACK_IMPORTED_MODULE_0__.DialogServiceConfig.DialogTypes.BotFramework);
        botFrameworkConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_Endpoint, endpoint.toString());
        if (undefined !== subscriptionKey) {
            botFrameworkConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_Key, subscriptionKey);
        }
        return botFrameworkConfig;
    }
}

//# sourceMappingURL=BotFrameworkConfig.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationDetails.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationDetails.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CancellationDetails": () => (/* binding */ CancellationDetails)
/* harmony export */ });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SimpleSpeechPhrase.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/EnumTranslation.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _CancellationDetailsBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CancellationDetailsBase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationDetailsBase.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationReason.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationErrorCodes.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/RecognitionResult.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.



/**
 * Contains detailed information about why a result was canceled.
 * @class CancellationDetails
 */
class CancellationDetails extends _CancellationDetailsBase__WEBPACK_IMPORTED_MODULE_0__.CancellationDetailsBase {
    constructor(reason, errorDetails, errorCode) {
        super(reason, errorDetails, errorCode);
    }
    /**
     * Creates an instance of CancellationDetails object for the canceled RecognitionResult.
     * @member CancellationDetails.fromResult
     * @function
     * @public
     * @param {RecognitionResult | SpeechSynthesisResult} result - The result that was canceled.
     * @returns {CancellationDetails} The cancellation details object being created.
     */
    static fromResult(result) {
        let reason = _Exports__WEBPACK_IMPORTED_MODULE_1__.CancellationReason.Error;
        let errorCode = _Exports__WEBPACK_IMPORTED_MODULE_2__.CancellationErrorCode.NoError;
        if (result instanceof _Exports__WEBPACK_IMPORTED_MODULE_3__.RecognitionResult && !!result.json) {
            const simpleSpeech = _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.SimpleSpeechPhrase.fromJSON(result.json);
            reason = _common_speech_Exports__WEBPACK_IMPORTED_MODULE_5__.EnumTranslation.implTranslateCancelResult(simpleSpeech.RecognitionStatus);
        }
        if (!!result.properties) {
            errorCode = _Exports__WEBPACK_IMPORTED_MODULE_2__.CancellationErrorCode[result.properties.getProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_6__.CancellationErrorCodePropertyName, _Exports__WEBPACK_IMPORTED_MODULE_2__.CancellationErrorCode[_Exports__WEBPACK_IMPORTED_MODULE_2__.CancellationErrorCode.NoError])];
        }
        return new CancellationDetails(reason, result.errorDetails || _common_speech_Exports__WEBPACK_IMPORTED_MODULE_5__.EnumTranslation.implTranslateErrorDetails(errorCode), errorCode);
    }
}

//# sourceMappingURL=CancellationDetails.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationDetailsBase.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationDetailsBase.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CancellationDetailsBase": () => (/* binding */ CancellationDetailsBase)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Contains detailed information about why a result was canceled.
 * @class CancellationDetailsBase
 */
class CancellationDetailsBase {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {CancellationReason} reason - The cancellation reason.
     * @param {string} errorDetails - The error details, if provided.
     */
    constructor(reason, errorDetails, errorCode) {
        this.privReason = reason;
        this.privErrorDetails = errorDetails;
        this.privErrorCode = errorCode;
    }
    /**
     * The reason the recognition was canceled.
     * @member CancellationDetailsBase.prototype.reason
     * @function
     * @public
     * @returns {CancellationReason} Specifies the reason canceled.
     */
    get reason() {
        return this.privReason;
    }
    /**
     * In case of an unsuccessful recognition, provides details of the occurred error.
     * @member CancellationDetailsBase.prototype.errorDetails
     * @function
     * @public
     * @returns {string} A String that represents the error details.
     */
    get errorDetails() {
        return this.privErrorDetails;
    }
    /**
     * The error code in case of an unsuccessful recognition.
     * Added in version 1.1.0.
     * @return An error code that represents the error reason.
     */
    get ErrorCode() {
        return this.privErrorCode;
    }
}

//# sourceMappingURL=CancellationDetailsBase.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationErrorCodes.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationErrorCodes.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CancellationErrorCode": () => (/* binding */ CancellationErrorCode)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Defines error code in case that CancellationReason is Error.
 * Added in version 1.1.0.
 */
var CancellationErrorCode;
(function (CancellationErrorCode) {
    /**
     * Indicates that no error occurred during speech recognition.
     */
    CancellationErrorCode[CancellationErrorCode["NoError"] = 0] = "NoError";
    /**
     * Indicates an authentication error.
     */
    CancellationErrorCode[CancellationErrorCode["AuthenticationFailure"] = 1] = "AuthenticationFailure";
    /**
     * Indicates that one or more recognition parameters are invalid.
     */
    CancellationErrorCode[CancellationErrorCode["BadRequestParameters"] = 2] = "BadRequestParameters";
    /**
     * Indicates that the number of parallel requests exceeded the number of allowed
     * concurrent transcriptions for the subscription.
     */
    CancellationErrorCode[CancellationErrorCode["TooManyRequests"] = 3] = "TooManyRequests";
    /**
     * Indicates a connection error.
     */
    CancellationErrorCode[CancellationErrorCode["ConnectionFailure"] = 4] = "ConnectionFailure";
    /**
     * Indicates a time-out error when waiting for response from service.
     */
    CancellationErrorCode[CancellationErrorCode["ServiceTimeout"] = 5] = "ServiceTimeout";
    /**
     * Indicates that an error is returned by the service.
     */
    CancellationErrorCode[CancellationErrorCode["ServiceError"] = 6] = "ServiceError";
    /**
     * Indicates an unexpected runtime error.
     */
    CancellationErrorCode[CancellationErrorCode["RuntimeError"] = 7] = "RuntimeError";
    /**
     * Indicates an quota overrun on existing key.
     */
    CancellationErrorCode[CancellationErrorCode["Forbidden"] = 8] = "Forbidden";
})(CancellationErrorCode || (CancellationErrorCode = {}));

//# sourceMappingURL=CancellationErrorCodes.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationEventArgsBase.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationEventArgsBase.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CancellationEventArgsBase": () => (/* binding */ CancellationEventArgsBase)
/* harmony export */ });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/RecognitionEventArgs.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Defines content of a CancellationEvent.
 * @class CancellationEventArgsBase
 */
class CancellationEventArgsBase extends _Exports__WEBPACK_IMPORTED_MODULE_0__.RecognitionEventArgs {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {CancellationReason} reason - The cancellation reason.
     * @param {string} errorDetails - Error details, if provided.
     * @param {number} offset - The offset.
     * @param {string} sessionId - The session id.
     */
    constructor(reason, errorDetails, errorCode, offset, sessionId) {
        super(offset, sessionId);
        this.privReason = reason;
        this.privErrorDetails = errorDetails;
        this.privErrorCode = errorCode;
    }
    /**
     * The reason the recognition was canceled.
     * @member CancellationEventArgsBase.prototype.reason
     * @function
     * @public
     * @returns {CancellationReason} Specifies the reason canceled.
     */
    get reason() {
        return this.privReason;
    }
    /**
     * The error code in case of an unsuccessful operation.
     * @return An error code that represents the error reason.
     */
    get errorCode() {
        return this.privErrorCode;
    }
    /**
     * In case of an unsuccessful operation, provides details of the occurred error.
     * @member CancellationEventArgsBase.prototype.errorDetails
     * @function
     * @public
     * @returns {string} A String that represents the error details.
     */
    get errorDetails() {
        return this.privErrorDetails;
    }
}

//# sourceMappingURL=CancellationEventArgsBase.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationReason.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationReason.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CancellationReason": () => (/* binding */ CancellationReason)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Defines the possible reasons a recognition result might be canceled.
 * @class CancellationReason
 */
var CancellationReason;
(function (CancellationReason) {
    /**
     * Indicates that an error occurred during speech recognition.
     * @member CancellationReason.Error
     */
    CancellationReason[CancellationReason["Error"] = 0] = "Error";
    /**
     * Indicates that the end of the audio stream was reached.
     * @member CancellationReason.EndOfStream
     */
    CancellationReason[CancellationReason["EndOfStream"] = 1] = "EndOfStream";
})(CancellationReason || (CancellationReason = {}));

//# sourceMappingURL=CancellationReason.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Connection.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Connection.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Connection": () => (/* binding */ Connection)
/* harmony export */ });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisAdapterBase.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceRecognizerBase.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js");
/* harmony import */ var _ConnectionMessage__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ConnectionMessage */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ConnectionMessage.js");
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ConnectionEventArgs.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ConnectionMessageEventArgs.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ServiceEventArgs.js");
//
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.
//





/**
 * Connection is a proxy class for managing connection to the speech service of the specified Recognizer.
 * By default, a Recognizer autonomously manages connection to service when needed.
 * The Connection class provides additional methods for users to explicitly open or close a connection and
 * to subscribe to connection status changes.
 * The use of Connection is optional, and mainly for scenarios where fine tuning of application
 * behavior based on connection status is needed. Users can optionally call Open() to manually set up a connection
 * in advance before starting recognition on the Recognizer associated with this Connection.
 * If the Recognizer needs to connect or disconnect to service, it will
 * setup or shutdown the connection independently. In this case the Connection will be notified by change of connection
 * status via Connected/Disconnected events.
 * Added in version 1.2.1.
 */
class Connection {
    /**
     * Gets the Connection instance from the specified recognizer.
     * @param recognizer The recognizer associated with the connection.
     * @return The Connection instance of the recognizer.
     */
    static fromRecognizer(recognizer) {
        const recoBase = recognizer.internalData;
        const ret = new Connection();
        ret.privInternalData = recoBase;
        ret.setupEvents();
        return ret;
    }
    /**
     * Gets the Connection instance from the specified synthesizer.
     * @param synthesizer The synthesizer associated with the connection.
     * @return The Connection instance of the synthesizer.
     */
    static fromSynthesizer(synthesizer) {
        const synthBase = synthesizer.internalData;
        const ret = new Connection();
        ret.privInternalData = synthBase;
        ret.setupEvents();
        return ret;
    }
    /**
     * Starts to set up connection to the service.
     * Users can optionally call openConnection() to manually set up a connection in advance before starting recognition on the
     * Recognizer associated with this Connection. After starting recognition, calling Open() will have no effect
     *
     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to
     * be notified when the connection is established.
     */
    openConnection(cb, err) {
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_0__.marshalPromiseToCallbacks)(this.privInternalData.connect(), cb, err);
    }
    /**
     * Closes the connection the service.
     * Users can optionally call closeConnection() to manually shutdown the connection of the associated Recognizer.
     *
     * If closeConnection() is called during recognition, recognition will fail and cancel with an error.
     */
    closeConnection(cb, err) {
        if (this.privInternalData instanceof _common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__.SynthesisAdapterBase) {
            throw new Error("Disconnecting a synthesizer's connection is currently not supported");
        }
        else {
            (0,_common_Exports__WEBPACK_IMPORTED_MODULE_0__.marshalPromiseToCallbacks)(this.privInternalData.disconnect(), cb, err);
        }
    }
    /**
     * Appends a parameter in a message to service.
     * Added in version 1.12.1.
     * @param path The path of the network message.
     * @param propertyName Name of the property
     * @param propertyValue Value of the property. This is a json string.
     */
    setMessageProperty(path, propertyName, propertyValue) {
        _Contracts__WEBPACK_IMPORTED_MODULE_2__.Contracts.throwIfNullOrWhitespace(propertyName, "propertyName");
        if (this.privInternalData instanceof _common_speech_Exports__WEBPACK_IMPORTED_MODULE_3__.ServiceRecognizerBase) {
            if (path.toLowerCase() !== "speech.context") {
                throw new Error("Only speech.context message property sets are currently supported for recognizer");
            }
            else {
                this.privInternalData.speechContext.setSection(propertyName, propertyValue);
            }
        }
        else if (this.privInternalData instanceof _common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__.SynthesisAdapterBase) {
            if (path.toLowerCase() !== "synthesis.context") {
                throw new Error("Only synthesis.context message property sets are currently supported for synthesizer");
            }
            else {
                this.privInternalData.synthesisContext.setSection(propertyName, propertyValue);
            }
        }
    }
    /**
     * Sends a message to the speech service.
     * Added in version 1.13.0.
     * @param path The WebSocket path of the message
     * @param payload The payload of the message. This is a json string or a ArrayBuffer.
     * @param success A callback to indicate success.
     * @param error A callback to indicate an error.
     */
    sendMessageAsync(path, payload, success, error) {
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_0__.marshalPromiseToCallbacks)(this.privInternalData.sendNetworkMessage(path, payload), success, error);
    }
    /**
     * Dispose of associated resources.
     */
    close() {
        /* eslint-disable no-empty */
    }
    setupEvents() {
        this.privEventListener = this.privInternalData.connectionEvents.attach((connectionEvent) => {
            if (connectionEvent.name === "ConnectionEstablishedEvent") {
                if (!!this.connected) {
                    this.connected(new _Exports__WEBPACK_IMPORTED_MODULE_4__.ConnectionEventArgs(connectionEvent.connectionId));
                }
            }
            else if (connectionEvent.name === "ConnectionClosedEvent") {
                if (!!this.disconnected) {
                    this.disconnected(new _Exports__WEBPACK_IMPORTED_MODULE_4__.ConnectionEventArgs(connectionEvent.connectionId));
                }
            }
            else if (connectionEvent.name === "ConnectionMessageSentEvent") {
                if (!!this.messageSent) {
                    this.messageSent(new _Exports__WEBPACK_IMPORTED_MODULE_5__.ConnectionMessageEventArgs(new _ConnectionMessage__WEBPACK_IMPORTED_MODULE_6__.ConnectionMessageImpl(connectionEvent.message)));
                }
            }
            else if (connectionEvent.name === "ConnectionMessageReceivedEvent") {
                if (!!this.messageReceived) {
                    this.messageReceived(new _Exports__WEBPACK_IMPORTED_MODULE_5__.ConnectionMessageEventArgs(new _ConnectionMessage__WEBPACK_IMPORTED_MODULE_6__.ConnectionMessageImpl(connectionEvent.message)));
                }
            }
        });
        this.privServiceEventListener = this.privInternalData.serviceEvents.attach((e) => {
            if (!!this.receivedServiceMessage) {
                this.receivedServiceMessage(new _Exports__WEBPACK_IMPORTED_MODULE_7__.ServiceEventArgs(e.jsonString, e.name));
            }
        });
    }
}

//# sourceMappingURL=Connection.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ConnectionEventArgs.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ConnectionEventArgs.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConnectionEventArgs": () => (/* binding */ ConnectionEventArgs)
/* harmony export */ });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SessionEventArgs.js");
//
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.
//

/**
 * Defines payload for connection events like Connected/Disconnected.
 * Added in version 1.2.0
 */
class ConnectionEventArgs extends _Exports__WEBPACK_IMPORTED_MODULE_0__.SessionEventArgs {
}

//# sourceMappingURL=ConnectionEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ConnectionMessage.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ConnectionMessage.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConnectionMessage": () => (/* binding */ ConnectionMessage),
/* harmony export */   "ConnectionMessageImpl": () => (/* binding */ ConnectionMessageImpl)
/* harmony export */ });
/* harmony import */ var _common_speech_HeaderNames__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common.speech/HeaderNames */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/HeaderNames.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js");
/* harmony import */ var _PropertyCollection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PropertyCollection */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js");
/* harmony import */ var _PropertyId__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PropertyId */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
//
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.
//
// eslint-disable-next-line max-classes-per-file




/**
 * ConnectionMessage represents implementation specific messages sent to and received from
 * the speech service. These messages are provided for debugging purposes and should not
 * be used for production use cases with the Azure Cognitive Services Speech Service.
 * Messages sent to and received from the Speech Service are subject to change without
 * notice. This includes message contents, headers, payloads, ordering, etc.
 * Added in version 1.11.0.
 */
class ConnectionMessage {
}
class ConnectionMessageImpl {
    constructor(message) {
        this.privConnectionMessage = message;
        this.privProperties = new _PropertyCollection__WEBPACK_IMPORTED_MODULE_0__.PropertyCollection();
        if (!!this.privConnectionMessage.headers[_common_speech_HeaderNames__WEBPACK_IMPORTED_MODULE_1__.HeaderNames.ConnectionId]) {
            this.privProperties.setProperty(_PropertyId__WEBPACK_IMPORTED_MODULE_2__.PropertyId.Speech_SessionId, this.privConnectionMessage.headers[_common_speech_HeaderNames__WEBPACK_IMPORTED_MODULE_1__.HeaderNames.ConnectionId]);
        }
        Object.keys(this.privConnectionMessage.headers).forEach((header) => {
            this.privProperties.setProperty(header, this.privConnectionMessage.headers[header]);
        });
    }
    /**
     * The message path.
     */
    get path() {
        return this.privConnectionMessage.headers[Object.keys(this.privConnectionMessage.headers).find((key) => key.toLowerCase() === "path".toLowerCase())];
    }
    /**
     * Checks to see if the ConnectionMessage is a text message.
     * See also IsBinaryMessage().
     */
    get isTextMessage() {
        return this.privConnectionMessage.messageType === _common_Exports__WEBPACK_IMPORTED_MODULE_3__.MessageType.Text;
    }
    /**
     * Checks to see if the ConnectionMessage is a binary message.
     * See also GetBinaryMessage().
     */
    get isBinaryMessage() {
        return this.privConnectionMessage.messageType === _common_Exports__WEBPACK_IMPORTED_MODULE_3__.MessageType.Binary;
    }
    /**
     * Gets the text message payload. Typically the text message content-type is
     * application/json. To determine other content-types use
     * Properties.GetProperty("Content-Type").
     */
    get TextMessage() {
        return this.privConnectionMessage.textBody;
    }
    /**
     * Gets the binary message payload.
     */
    get binaryMessage() {
        return this.privConnectionMessage.binaryBody;
    }
    /**
     * A collection of properties and their values defined for this <see cref="ConnectionMessage"/>.
     * Message headers can be accessed via this collection (e.g. "Content-Type").
     */
    get properties() {
        return this.privProperties;
    }
    /**
     * Returns a string that represents the connection message.
     */
    toString() {
        return "";
    }
}

//# sourceMappingURL=ConnectionMessage.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ConnectionMessageEventArgs.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ConnectionMessageEventArgs.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConnectionMessageEventArgs": () => (/* binding */ ConnectionMessageEventArgs)
/* harmony export */ });
//
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.
//
class ConnectionMessageEventArgs {
    constructor(message) {
        this.privConnectionMessage = message;
    }
    /**
     * Gets the <see cref="ConnectionMessage"/> associated with this <see cref="ConnectionMessageEventArgs"/>.
     */
    get message() {
        return this.privConnectionMessage;
    }
    /**
     * Returns a string that represents the connection message event.
     */
    toString() {
        return "Message: " + this.privConnectionMessage.toString();
    }
}

//# sourceMappingURL=ConnectionMessageEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Contracts": () => (/* binding */ Contracts)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * @class Contracts
 * @private
 */
class Contracts {
    static throwIfNullOrUndefined(param, name) {
        if (param === undefined || param === null) {
            throw new Error("throwIfNullOrUndefined:" + name);
        }
    }
    static throwIfNull(param, name) {
        if (param === null) {
            throw new Error("throwIfNull:" + name);
        }
    }
    static throwIfNullOrWhitespace(param, name) {
        Contracts.throwIfNullOrUndefined(param, name);
        if (("" + param).trim().length < 1) {
            throw new Error("throwIfNullOrWhitespace:" + name);
        }
    }
    static throwIfNullOrTooLong(param, name, maxLength) {
        Contracts.throwIfNullOrUndefined(param, name);
        if (("" + param).length > maxLength) {
            throw new Error("throwIfNullOrTooLong:" + name + " (more than " + maxLength.toString() + " characters)");
        }
    }
    static throwIfNullOrTooShort(param, name, minLength) {
        Contracts.throwIfNullOrUndefined(param, name);
        if (("" + param).length < minLength) {
            throw new Error("throwIfNullOrTooShort:" + name + " (less than " + minLength.toString() + " characters)");
        }
    }
    static throwIfDisposed(isDisposed) {
        if (isDisposed) {
            throw new Error("the object is already disposed");
        }
    }
    static throwIfArrayEmptyOrWhitespace(array, name) {
        Contracts.throwIfNullOrUndefined(array, name);
        if (array.length === 0) {
            throw new Error("throwIfArrayEmptyOrWhitespace:" + name);
        }
        for (const item of array) {
            Contracts.throwIfNullOrWhitespace(item, name);
        }
    }
    static throwIfFileDoesNotExist(param, name) {
        Contracts.throwIfNullOrWhitespace(param, name);
        // TODO check for file existence.
    }
    static throwIfNotUndefined(param, name) {
        if (param !== undefined) {
            throw new Error("throwIfNotUndefined:" + name);
        }
    }
}

//# sourceMappingURL=Contracts.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ConversationTranscriptionCanceledEventArgs.js":
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ConversationTranscriptionCanceledEventArgs.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConversationTranscriptionCanceledEventArgs": () => (/* binding */ ConversationTranscriptionCanceledEventArgs)
/* harmony export */ });
/* harmony import */ var _CancellationEventArgsBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CancellationEventArgsBase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationEventArgsBase.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Defines content of a RecognitionErrorEvent.
 * @class ConversationTranscriptionCanceledEventArgs
 */
class ConversationTranscriptionCanceledEventArgs extends _CancellationEventArgsBase__WEBPACK_IMPORTED_MODULE_0__.CancellationEventArgsBase {
}

//# sourceMappingURL=ConversationTranscriptionCanceledEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CustomCommandsConfig.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CustomCommandsConfig.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CustomCommandsConfig": () => (/* binding */ CustomCommandsConfig)
/* harmony export */ });
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _DialogServiceConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DialogServiceConfig */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/DialogServiceConfig.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.



/**
 * Class that defines configurations for the dialog service connector object for using a CustomCommands backend.
 * @class CustomCommandsConfig
 */
class CustomCommandsConfig extends _DialogServiceConfig__WEBPACK_IMPORTED_MODULE_0__.DialogServiceConfigImpl {
    /**
     * Creates an instance of CustomCommandsConfig.
     */
    constructor() {
        super();
    }
    /**
     * Creates an instance of the bot framework config with the specified subscription and region.
     * @member CustomCommandsConfig.fromSubscription
     * @function
     * @public
     * @param applicationId Speech Commands application id.
     * @param subscription Subscription key associated with the bot
     * @param region The region name (see the <a href="https://aka.ms/csspeech/region">region page</a>).
     * @returns {CustomCommandsConfig} A new bot framework config.
     */
    static fromSubscription(applicationId, subscription, region) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(applicationId, "applicationId");
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(subscription, "subscription");
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(region, "region");
        const customCommandsConfig = new _DialogServiceConfig__WEBPACK_IMPORTED_MODULE_0__.DialogServiceConfigImpl();
        customCommandsConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.Conversation_DialogType, _DialogServiceConfig__WEBPACK_IMPORTED_MODULE_0__.DialogServiceConfig.DialogTypes.CustomCommands);
        customCommandsConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.Conversation_ApplicationId, applicationId);
        customCommandsConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_Key, subscription);
        customCommandsConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_Region, region);
        return customCommandsConfig;
    }
    /**
     * Creates an instance of the bot framework config with the specified Speech Commands application id, authorization token and region.
     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token
     * expires, the caller needs to refresh it by calling this setter with a new valid token.
     * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.
     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer
     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.
     * @member CustomCommandsConfig.fromAuthorizationToken
     * @function
     * @public
     * @param applicationId Speech Commands application id.
     * @param authorizationToken The authorization token associated with the application.
     * @param region The region name (see the <a href="https://aka.ms/csspeech/region">region page</a>).
     * @returns {CustomCommandsConfig} A new speech commands config.
     */
    static fromAuthorizationToken(applicationId, authorizationToken, region) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(applicationId, "applicationId");
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(authorizationToken, "authorizationToken");
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(region, "region");
        const customCommandsConfig = new _DialogServiceConfig__WEBPACK_IMPORTED_MODULE_0__.DialogServiceConfigImpl();
        customCommandsConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.Conversation_DialogType, _DialogServiceConfig__WEBPACK_IMPORTED_MODULE_0__.DialogServiceConfig.DialogTypes.CustomCommands);
        customCommandsConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.Conversation_ApplicationId, applicationId);
        customCommandsConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceAuthorization_Token, authorizationToken);
        customCommandsConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_Region, region);
        return customCommandsConfig;
    }
    /**
     * Sets the corresponding backend application identifier.
     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId
     * @function
     * @public
     * @param {string} value - The application identifier to set.
     */
    set applicationId(value) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(value, "value");
        this.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.Conversation_ApplicationId, value);
    }
    /**
     * Gets the corresponding backend application identifier.
     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId
     * @function
     * @public
     * @param {string} value - The application identifier to get.
     */
    get applicationId() {
        return this.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.Conversation_ApplicationId);
    }
}

//# sourceMappingURL=CustomCommandsConfig.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Diagnostics.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Diagnostics.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Diagnostics": () => (/* binding */ Diagnostics)
/* harmony export */ });
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ConsoleLoggingListener.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Events.js");
//
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.
//


/**
 * Defines diagnostics API for managing console output
 * Added in version 1.21.0
 */
class Diagnostics {
    static SetLoggingLevel(logLevel) {
        this.privListener = new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__.ConsoleLoggingListener(logLevel);
        _common_Exports__WEBPACK_IMPORTED_MODULE_1__.Events.instance.attachConsoleListener(this.privListener);
    }
    static StartConsoleOutput() {
        if (!!this.privListener) {
            this.privListener.enableConsoleOutput = true;
        }
    }
    static StopConsoleOutput() {
        if (!!this.privListener) {
            this.privListener.enableConsoleOutput = false;
        }
    }
    static SetLogOutputPath(path) {
        if (typeof window === "undefined") {
            if (!!this.privListener) {
                this.privListener.logPath = path;
            }
        }
        else {
            throw new Error("File system logging not available in browser.");
        }
    }
}
Diagnostics.privListener = undefined;

//# sourceMappingURL=Diagnostics.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/DialogServiceConfig.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/DialogServiceConfig.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DialogServiceConfig": () => (/* binding */ DialogServiceConfig),
/* harmony export */   "DialogServiceConfigImpl": () => (/* binding */ DialogServiceConfigImpl)
/* harmony export */ });
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechConfig.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/* eslint-disable max-classes-per-file */


/**
 * Class that defines base configurations for dialog service connector
 * @class DialogServiceConfig
 */
class DialogServiceConfig {
    /**
     * Creates an instance of DialogService config.
     * @constructor
     */
    constructor() {
        return;
    }
    /**
     * Sets the corresponding backend application identifier.
     * @member DialogServiceConfig.prototype.Conversation_ApplicationId
     * @function
     * @public
     * @param {string} value - The application identifier to set.
     */
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    set applicationId(value) { }
    static get DialogTypes() {
        return {
            BotFramework: "bot_framework",
            CustomCommands: "custom_commands"
        };
    }
}
/**
 * Dialog Service configuration.
 * @class DialogServiceConfigImpl
 */
class DialogServiceConfigImpl extends DialogServiceConfig {
    /**
     * Creates an instance of dialogService config.
     */
    constructor() {
        super();
        this.privSpeechConfig = new _Exports__WEBPACK_IMPORTED_MODULE_0__.SpeechConfigImpl();
    }
    /**
     * Provides access to custom properties.
     * @member DialogServiceConfigImpl.prototype.properties
     * @function
     * @public
     * @returns {PropertyCollection} The properties.
     */
    get properties() {
        return this.privSpeechConfig.properties;
    }
    /**
     * Gets the speech recognition language.
     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage
     * @function
     * @public
     */
    get speechRecognitionLanguage() {
        return this.privSpeechConfig.speechRecognitionLanguage;
    }
    /**
     * Sets the speech recognition language.
     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage
     * @function
     * @public
     * @param {string} value - The language to set.
     */
    set speechRecognitionLanguage(value) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(value, "value");
        this.privSpeechConfig.speechRecognitionLanguage = value;
    }
    get outputFormat() {
        return this.privSpeechConfig.outputFormat;
    }
    set outputFormat(value) {
        this.privSpeechConfig.outputFormat = value;
    }
    /**
     * Sets a named property as value
     * @member DialogServiceConfigImpl.prototype.setProperty
     * @function
     * @public
     * @param {PropertyId | string} name - The property to set.
     * @param {string} value - The value.
     */
    setProperty(name, value) {
        this.privSpeechConfig.setProperty(name, value);
    }
    /**
     * Sets a named property as value
     * @member DialogServiceConfigImpl.prototype.getProperty
     * @function
     * @public
     * @param {PropertyId | string} name - The property to get.
     * @param {string} def - The default value to return in case the property is not known.
     * @returns {string} The current value, or provided default, of the given property.
     */
    getProperty(name, def) {
        void def;
        return this.privSpeechConfig.getProperty(name);
    }
    /**
     * Sets the proxy configuration.
     * Only relevant in Node.js environments.
     * Added in version 1.4.0.
     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)
     * @param proxyPort The port number of the proxy server.
     * @param proxyUserName The user name of the proxy server.
     * @param proxyPassword The password of the proxy server.
     */
    setProxy(proxyHostName, proxyPort, proxyUserName, proxyPassword) {
        this.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_ProxyHostName, proxyHostName);
        this.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_ProxyPort, `${proxyPort}`);
        if (proxyUserName) {
            this.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_ProxyUserName, proxyUserName);
        }
        if (proxyPassword) {
            this.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_ProxyPassword, proxyPassword);
        }
    }
    setServiceProperty(name, value, channel) {
        void channel;
        this.privSpeechConfig.setServiceProperty(name, value);
    }
    /**
     * Dispose of associated resources.
     * @member DialogServiceConfigImpl.prototype.close
     * @function
     * @public
     */
    close() {
        return;
    }
}

//# sourceMappingURL=DialogServiceConfig.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/DialogServiceConnector.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/DialogServiceConnector.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DialogServiceConnector": () => (/* binding */ DialogServiceConnector)
/* harmony export */ });
/* harmony import */ var _common_speech_DialogConnectorFactory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common.speech/DialogConnectorFactory */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DialogConnectorFactory.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognizerConfig.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DialogServiceAdapter.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js");
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Recognizer.js");
/* harmony import */ var _PropertyId__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./PropertyId */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






/**
 * Dialog Service Connector
 * @class DialogServiceConnector
 */
class DialogServiceConnector extends _Exports__WEBPACK_IMPORTED_MODULE_0__.Recognizer {
    /**
     * Initializes an instance of the DialogServiceConnector.
     * @constructor
     * @param {DialogServiceConfig} dialogConfig - Set of properties to configure this recognizer.
     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer
     */
    constructor(dialogConfig, audioConfig) {
        const dialogServiceConfigImpl = dialogConfig;
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNull(dialogConfig, "dialogConfig");
        super(audioConfig, dialogServiceConfigImpl.properties, new _common_speech_DialogConnectorFactory__WEBPACK_IMPORTED_MODULE_2__.DialogConnectionFactory());
        this.isTurnComplete = true;
        this.privIsDisposed = false;
        this.privProperties = dialogServiceConfigImpl.properties.clone();
        const agentConfig = this.buildAgentConfig();
        this.privReco.agentConfig.set(agentConfig);
    }
    /**
     * Starts a connection to the service.
     * Users can optionally call connect() to manually set up a connection in advance, before starting interactions.
     *
     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to
     * be notified when the connection is established.
     * @member DialogServiceConnector.prototype.connect
     * @function
     * @public
     */
    connect(cb, err) {
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_3__.marshalPromiseToCallbacks)(this.privReco.connect(), cb, err);
    }
    /**
     * Closes the connection the service.
     * Users can optionally call disconnect() to manually shutdown the connection of the associated DialogServiceConnector.
     *
     * If disconnect() is called during a recognition, recognition will fail and cancel with an error.
     */
    disconnect(cb, err) {
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_3__.marshalPromiseToCallbacks)(this.privReco.disconnect(), cb, err);
    }
    /**
     * Gets the authorization token used to communicate with the service.
     * @member DialogServiceConnector.prototype.authorizationToken
     * @function
     * @public
     * @returns {string} Authorization token.
     */
    get authorizationToken() {
        return this.properties.getProperty(_PropertyId__WEBPACK_IMPORTED_MODULE_4__.PropertyId.SpeechServiceAuthorization_Token);
    }
    /**
     * Sets the authorization token used to communicate with the service.
     * @member DialogServiceConnector.prototype.authorizationToken
     * @function
     * @public
     * @param {string} token - Authorization token.
     */
    set authorizationToken(token) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(token, "token");
        this.properties.setProperty(_PropertyId__WEBPACK_IMPORTED_MODULE_4__.PropertyId.SpeechServiceAuthorization_Token, token);
    }
    /**
     * The collection of properties and their values defined for this DialogServiceConnector.
     * @member DialogServiceConnector.prototype.properties
     * @function
     * @public
     * @returns {PropertyCollection} The collection of properties and their values defined for this DialogServiceConnector.
     */
    get properties() {
        return this.privProperties;
    }
    /** Gets the template for the activity generated by service from speech.
     * Properties from the template will be stamped on the generated activity.
     * It can be empty
     */
    get speechActivityTemplate() {
        return this.properties.getProperty(_PropertyId__WEBPACK_IMPORTED_MODULE_4__.PropertyId.Conversation_Speech_Activity_Template);
    }
    /** Sets the template for the activity generated by service from speech.
     * Properties from the template will be stamped on the generated activity.
     * It can be null or empty.
     * Note: it has to be a valid Json object.
     */
    set speechActivityTemplate(speechActivityTemplate) {
        this.properties.setProperty(_PropertyId__WEBPACK_IMPORTED_MODULE_4__.PropertyId.Conversation_Speech_Activity_Template, speechActivityTemplate);
    }
    /**
     * Starts recognition and stops after the first utterance is recognized.
     * @member DialogServiceConnector.prototype.listenOnceAsync
     * @function
     * @public
     * @param cb - Callback that received the result when the reco has completed.
     * @param err - Callback invoked in case of an error.
     */
    listenOnceAsync(cb, err) {
        if (this.isTurnComplete) {
            _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfDisposed(this.privIsDisposed);
            const callbackHolder = () => __awaiter(this, void 0, void 0, function* () {
                yield this.privReco.connect();
                yield this.implRecognizerStop();
                this.isTurnComplete = false;
                const ret = new _common_Exports__WEBPACK_IMPORTED_MODULE_3__.Deferred();
                yield this.privReco.recognize(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_5__.RecognitionMode.Conversation, ret.resolve, ret.reject);
                const e = yield ret.promise;
                yield this.implRecognizerStop();
                return e;
            });
            const retPromise = callbackHolder();
            retPromise.catch(() => {
                // Destroy the recognizer.
                // We've done all we can here.
                // eslint-disable-next-line @typescript-eslint/no-empty-function
                this.dispose(true).catch(() => { });
            });
            (0,_common_Exports__WEBPACK_IMPORTED_MODULE_3__.marshalPromiseToCallbacks)(retPromise.finally(() => {
                this.isTurnComplete = true;
            }), cb, err);
        }
    }
    sendActivityAsync(activity, cb, errCb) {
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_3__.marshalPromiseToCallbacks)(this.privReco.sendMessage(activity), cb, errCb);
    }
    /**
     * closes all external resources held by an instance of this class.
     * @member DialogServiceConnector.prototype.close
     * @function
     * @public
     */
    close(cb, err) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfDisposed(this.privIsDisposed);
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_3__.marshalPromiseToCallbacks)(this.dispose(true), cb, err);
    }
    dispose(disposing) {
        const _super = Object.create(null, {
            dispose: { get: () => super.dispose }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (this.privIsDisposed) {
                return;
            }
            if (disposing) {
                this.privIsDisposed = true;
                yield this.implRecognizerStop();
                yield _super.dispose.call(this, disposing);
            }
        });
    }
    createRecognizerConfig(speechConfig) {
        return new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_5__.RecognizerConfig(speechConfig, this.privProperties);
    }
    createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {
        const audioSource = audioConfig;
        return new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_6__.DialogServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);
    }
    buildAgentConfig() {
        const communicationType = this.properties.getProperty("Conversation_Communication_Type", "Default");
        return {
            botInfo: {
                commType: communicationType,
                commandsCulture: undefined,
                connectionId: this.properties.getProperty(_PropertyId__WEBPACK_IMPORTED_MODULE_4__.PropertyId.Conversation_Agent_Connection_Id),
                conversationId: this.properties.getProperty(_PropertyId__WEBPACK_IMPORTED_MODULE_4__.PropertyId.Conversation_Conversation_Id, undefined),
                fromId: this.properties.getProperty(_PropertyId__WEBPACK_IMPORTED_MODULE_4__.PropertyId.Conversation_From_Id, undefined),
                ttsAudioFormat: this.properties.getProperty(_PropertyId__WEBPACK_IMPORTED_MODULE_4__.PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)
            },
            version: 0.2
        };
    }
}

//# sourceMappingURL=DialogServiceConnector.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ActivityReceivedEventArgs": () => (/* reexport safe */ _ActivityReceivedEventArgs__WEBPACK_IMPORTED_MODULE_48__.ActivityReceivedEventArgs),
/* harmony export */   "AudioConfig": () => (/* reexport safe */ _Audio_AudioConfig__WEBPACK_IMPORTED_MODULE_0__.AudioConfig),
/* harmony export */   "AudioFormatTag": () => (/* reexport safe */ _Audio_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_1__.AudioFormatTag),
/* harmony export */   "AudioInputStream": () => (/* reexport safe */ _Audio_AudioInputStream__WEBPACK_IMPORTED_MODULE_2__.AudioInputStream),
/* harmony export */   "AudioOutputStream": () => (/* reexport safe */ _Audio_AudioOutputStream__WEBPACK_IMPORTED_MODULE_3__.AudioOutputStream),
/* harmony export */   "AudioStreamFormat": () => (/* reexport safe */ _Audio_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_1__.AudioStreamFormat),
/* harmony export */   "AutoDetectSourceLanguageConfig": () => (/* reexport safe */ _AutoDetectSourceLanguageConfig__WEBPACK_IMPORTED_MODULE_63__.AutoDetectSourceLanguageConfig),
/* harmony export */   "AutoDetectSourceLanguageResult": () => (/* reexport safe */ _AutoDetectSourceLanguageResult__WEBPACK_IMPORTED_MODULE_64__.AutoDetectSourceLanguageResult),
/* harmony export */   "BaseAudioPlayer": () => (/* reexport safe */ _Audio_BaseAudioPlayer__WEBPACK_IMPORTED_MODULE_52__.BaseAudioPlayer),
/* harmony export */   "BotFrameworkConfig": () => (/* reexport safe */ _BotFrameworkConfig__WEBPACK_IMPORTED_MODULE_45__.BotFrameworkConfig),
/* harmony export */   "CancellationDetails": () => (/* reexport safe */ _CancellationDetails__WEBPACK_IMPORTED_MODULE_38__.CancellationDetails),
/* harmony export */   "CancellationDetailsBase": () => (/* reexport safe */ _CancellationDetailsBase__WEBPACK_IMPORTED_MODULE_37__.CancellationDetailsBase),
/* harmony export */   "CancellationErrorCode": () => (/* reexport safe */ _CancellationErrorCodes__WEBPACK_IMPORTED_MODULE_39__.CancellationErrorCode),
/* harmony export */   "CancellationReason": () => (/* reexport safe */ _CancellationReason__WEBPACK_IMPORTED_MODULE_4__.CancellationReason),
/* harmony export */   "Connection": () => (/* reexport safe */ _Connection__WEBPACK_IMPORTED_MODULE_42__.Connection),
/* harmony export */   "ConnectionEventArgs": () => (/* reexport safe */ _ConnectionEventArgs__WEBPACK_IMPORTED_MODULE_40__.ConnectionEventArgs),
/* harmony export */   "ConnectionMessage": () => (/* reexport safe */ _ConnectionMessage__WEBPACK_IMPORTED_MODULE_54__.ConnectionMessage),
/* harmony export */   "ConnectionMessageEventArgs": () => (/* reexport safe */ _ConnectionMessageEventArgs__WEBPACK_IMPORTED_MODULE_53__.ConnectionMessageEventArgs),
/* harmony export */   "Conversation": () => (/* reexport safe */ _Transcription_Exports__WEBPACK_IMPORTED_MODULE_67__.Conversation),
/* harmony export */   "ConversationExpirationEventArgs": () => (/* reexport safe */ _Transcription_Exports__WEBPACK_IMPORTED_MODULE_68__.ConversationExpirationEventArgs),
/* harmony export */   "ConversationParticipantsChangedEventArgs": () => (/* reexport safe */ _Transcription_Exports__WEBPACK_IMPORTED_MODULE_69__.ConversationParticipantsChangedEventArgs),
/* harmony export */   "ConversationTranscriber": () => (/* reexport safe */ _Transcription_Exports__WEBPACK_IMPORTED_MODULE_74__.ConversationTranscriber),
/* harmony export */   "ConversationTranscriptionCanceledEventArgs": () => (/* reexport safe */ _ConversationTranscriptionCanceledEventArgs__WEBPACK_IMPORTED_MODULE_89__.ConversationTranscriptionCanceledEventArgs),
/* harmony export */   "ConversationTranscriptionEventArgs": () => (/* reexport safe */ _SpeechRecognitionEventArgs__WEBPACK_IMPORTED_MODULE_16__.ConversationTranscriptionEventArgs),
/* harmony export */   "ConversationTranslationCanceledEventArgs": () => (/* reexport safe */ _Transcription_Exports__WEBPACK_IMPORTED_MODULE_70__.ConversationTranslationCanceledEventArgs),
/* harmony export */   "ConversationTranslationEventArgs": () => (/* reexport safe */ _Transcription_Exports__WEBPACK_IMPORTED_MODULE_71__.ConversationTranslationEventArgs),
/* harmony export */   "ConversationTranslationResult": () => (/* reexport safe */ _Transcription_Exports__WEBPACK_IMPORTED_MODULE_72__.ConversationTranslationResult),
/* harmony export */   "ConversationTranslator": () => (/* reexport safe */ _Transcription_Exports__WEBPACK_IMPORTED_MODULE_73__.ConversationTranslator),
/* harmony export */   "CustomCommandsConfig": () => (/* reexport safe */ _CustomCommandsConfig__WEBPACK_IMPORTED_MODULE_46__.CustomCommandsConfig),
/* harmony export */   "Diagnostics": () => (/* reexport safe */ _Diagnostics__WEBPACK_IMPORTED_MODULE_95__.Diagnostics),
/* harmony export */   "DialogServiceConfig": () => (/* reexport safe */ _DialogServiceConfig__WEBPACK_IMPORTED_MODULE_44__.DialogServiceConfig),
/* harmony export */   "DialogServiceConnector": () => (/* reexport safe */ _DialogServiceConnector__WEBPACK_IMPORTED_MODULE_47__.DialogServiceConnector),
/* harmony export */   "IntentRecognitionCanceledEventArgs": () => (/* reexport safe */ _IntentRecognitionCanceledEventArgs__WEBPACK_IMPORTED_MODULE_36__.IntentRecognitionCanceledEventArgs),
/* harmony export */   "IntentRecognitionEventArgs": () => (/* reexport safe */ _IntentRecognitionEventArgs__WEBPACK_IMPORTED_MODULE_11__.IntentRecognitionEventArgs),
/* harmony export */   "IntentRecognitionResult": () => (/* reexport safe */ _IntentRecognitionResult__WEBPACK_IMPORTED_MODULE_14__.IntentRecognitionResult),
/* harmony export */   "IntentRecognizer": () => (/* reexport safe */ _IntentRecognizer__WEBPACK_IMPORTED_MODULE_29__.IntentRecognizer),
/* harmony export */   "KeywordRecognitionModel": () => (/* reexport safe */ _KeywordRecognitionModel__WEBPACK_IMPORTED_MODULE_7__.KeywordRecognitionModel),
/* harmony export */   "LanguageIdMode": () => (/* reexport safe */ _LanguageIdMode__WEBPACK_IMPORTED_MODULE_94__.LanguageIdMode),
/* harmony export */   "LanguageUnderstandingModel": () => (/* reexport safe */ _LanguageUnderstandingModel__WEBPACK_IMPORTED_MODULE_15__.LanguageUnderstandingModel),
/* harmony export */   "LogLevel": () => (/* reexport safe */ _LogLevel__WEBPACK_IMPORTED_MODULE_96__.EventType),
/* harmony export */   "NoMatchDetails": () => (/* reexport safe */ _NoMatchDetails__WEBPACK_IMPORTED_MODULE_34__.NoMatchDetails),
/* harmony export */   "NoMatchReason": () => (/* reexport safe */ _NoMatchReason__WEBPACK_IMPORTED_MODULE_33__.NoMatchReason),
/* harmony export */   "OutputFormat": () => (/* reexport safe */ _OutputFormat__WEBPACK_IMPORTED_MODULE_10__.OutputFormat),
/* harmony export */   "Participant": () => (/* reexport safe */ _Transcription_Exports__WEBPACK_IMPORTED_MODULE_75__.Participant),
/* harmony export */   "ParticipantChangedReason": () => (/* reexport safe */ _Transcription_Exports__WEBPACK_IMPORTED_MODULE_76__.ParticipantChangedReason),
/* harmony export */   "PhraseListGrammar": () => (/* reexport safe */ _PhraseListGrammar__WEBPACK_IMPORTED_MODULE_43__.PhraseListGrammar),
/* harmony export */   "ProfanityOption": () => (/* reexport safe */ _ProfanityOption__WEBPACK_IMPORTED_MODULE_51__.ProfanityOption),
/* harmony export */   "PronunciationAssessmentConfig": () => (/* reexport safe */ _PronunciationAssessmentConfig__WEBPACK_IMPORTED_MODULE_92__.PronunciationAssessmentConfig),
/* harmony export */   "PronunciationAssessmentGradingSystem": () => (/* reexport safe */ _PronunciationAssessmentGradingSystem__WEBPACK_IMPORTED_MODULE_90__.PronunciationAssessmentGradingSystem),
/* harmony export */   "PronunciationAssessmentGranularity": () => (/* reexport safe */ _PronunciationAssessmentGranularity__WEBPACK_IMPORTED_MODULE_91__.PronunciationAssessmentGranularity),
/* harmony export */   "PronunciationAssessmentResult": () => (/* reexport safe */ _PronunciationAssessmentResult__WEBPACK_IMPORTED_MODULE_93__.PronunciationAssessmentResult),
/* harmony export */   "PropertyCollection": () => (/* reexport safe */ _PropertyCollection__WEBPACK_IMPORTED_MODULE_25__.PropertyCollection),
/* harmony export */   "PropertyId": () => (/* reexport safe */ _PropertyId__WEBPACK_IMPORTED_MODULE_26__.PropertyId),
/* harmony export */   "PullAudioInputStream": () => (/* reexport safe */ _Audio_AudioInputStream__WEBPACK_IMPORTED_MODULE_2__.PullAudioInputStream),
/* harmony export */   "PullAudioInputStreamCallback": () => (/* reexport safe */ _Audio_PullAudioInputStreamCallback__WEBPACK_IMPORTED_MODULE_5__.PullAudioInputStreamCallback),
/* harmony export */   "PullAudioOutputStream": () => (/* reexport safe */ _Audio_AudioOutputStream__WEBPACK_IMPORTED_MODULE_3__.PullAudioOutputStream),
/* harmony export */   "PushAudioInputStream": () => (/* reexport safe */ _Audio_AudioInputStream__WEBPACK_IMPORTED_MODULE_2__.PushAudioInputStream),
/* harmony export */   "PushAudioOutputStream": () => (/* reexport safe */ _Audio_AudioOutputStream__WEBPACK_IMPORTED_MODULE_3__.PushAudioOutputStream),
/* harmony export */   "PushAudioOutputStreamCallback": () => (/* reexport safe */ _Audio_PushAudioOutputStreamCallback__WEBPACK_IMPORTED_MODULE_6__.PushAudioOutputStreamCallback),
/* harmony export */   "RecognitionEventArgs": () => (/* reexport safe */ _RecognitionEventArgs__WEBPACK_IMPORTED_MODULE_9__.RecognitionEventArgs),
/* harmony export */   "RecognitionResult": () => (/* reexport safe */ _RecognitionResult__WEBPACK_IMPORTED_MODULE_12__.RecognitionResult),
/* harmony export */   "Recognizer": () => (/* reexport safe */ _Recognizer__WEBPACK_IMPORTED_MODULE_27__.Recognizer),
/* harmony export */   "ResultReason": () => (/* reexport safe */ _ResultReason__WEBPACK_IMPORTED_MODULE_22__.ResultReason),
/* harmony export */   "ServiceEventArgs": () => (/* reexport safe */ _ServiceEventArgs__WEBPACK_IMPORTED_MODULE_41__.ServiceEventArgs),
/* harmony export */   "ServicePropertyChannel": () => (/* reexport safe */ _ServicePropertyChannel__WEBPACK_IMPORTED_MODULE_50__.ServicePropertyChannel),
/* harmony export */   "SessionEventArgs": () => (/* reexport safe */ _SessionEventArgs__WEBPACK_IMPORTED_MODULE_8__.SessionEventArgs),
/* harmony export */   "SourceLanguageConfig": () => (/* reexport safe */ _SourceLanguageConfig__WEBPACK_IMPORTED_MODULE_65__.SourceLanguageConfig),
/* harmony export */   "SpeakerAudioDestination": () => (/* reexport safe */ _Audio_SpeakerAudioDestination__WEBPACK_IMPORTED_MODULE_88__.SpeakerAudioDestination),
/* harmony export */   "SpeakerIdentificationModel": () => (/* reexport safe */ _SpeakerIdentificationModel__WEBPACK_IMPORTED_MODULE_61__.SpeakerIdentificationModel),
/* harmony export */   "SpeakerRecognitionCancellationDetails": () => (/* reexport safe */ _SpeakerRecognitionResult__WEBPACK_IMPORTED_MODULE_66__.SpeakerRecognitionCancellationDetails),
/* harmony export */   "SpeakerRecognitionResult": () => (/* reexport safe */ _SpeakerRecognitionResult__WEBPACK_IMPORTED_MODULE_66__.SpeakerRecognitionResult),
/* harmony export */   "SpeakerRecognitionResultType": () => (/* reexport safe */ _SpeakerRecognitionResult__WEBPACK_IMPORTED_MODULE_66__.SpeakerRecognitionResultType),
/* harmony export */   "SpeakerRecognizer": () => (/* reexport safe */ _SpeakerRecognizer__WEBPACK_IMPORTED_MODULE_60__.SpeakerRecognizer),
/* harmony export */   "SpeakerVerificationModel": () => (/* reexport safe */ _SpeakerVerificationModel__WEBPACK_IMPORTED_MODULE_62__.SpeakerVerificationModel),
/* harmony export */   "SpeechConfig": () => (/* reexport safe */ _SpeechConfig__WEBPACK_IMPORTED_MODULE_23__.SpeechConfig),
/* harmony export */   "SpeechConfigImpl": () => (/* reexport safe */ _SpeechConfig__WEBPACK_IMPORTED_MODULE_23__.SpeechConfigImpl),
/* harmony export */   "SpeechRecognitionCanceledEventArgs": () => (/* reexport safe */ _SpeechRecognitionCanceledEventArgs__WEBPACK_IMPORTED_MODULE_17__.SpeechRecognitionCanceledEventArgs),
/* harmony export */   "SpeechRecognitionEventArgs": () => (/* reexport safe */ _SpeechRecognitionEventArgs__WEBPACK_IMPORTED_MODULE_16__.SpeechRecognitionEventArgs),
/* harmony export */   "SpeechRecognitionResult": () => (/* reexport safe */ _SpeechRecognitionResult__WEBPACK_IMPORTED_MODULE_13__.SpeechRecognitionResult),
/* harmony export */   "SpeechRecognizer": () => (/* reexport safe */ _SpeechRecognizer__WEBPACK_IMPORTED_MODULE_28__.SpeechRecognizer),
/* harmony export */   "SpeechSynthesisBookmarkEventArgs": () => (/* reexport safe */ _SpeechSynthesisBookmarkEventArgs__WEBPACK_IMPORTED_MODULE_83__.SpeechSynthesisBookmarkEventArgs),
/* harmony export */   "SpeechSynthesisBoundaryType": () => (/* reexport safe */ _SpeechSynthesisBoundaryType__WEBPACK_IMPORTED_MODULE_85__.SpeechSynthesisBoundaryType),
/* harmony export */   "SpeechSynthesisEventArgs": () => (/* reexport safe */ _SpeechSynthesisEventArgs__WEBPACK_IMPORTED_MODULE_81__.SpeechSynthesisEventArgs),
/* harmony export */   "SpeechSynthesisOutputFormat": () => (/* reexport safe */ _SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_77__.SpeechSynthesisOutputFormat),
/* harmony export */   "SpeechSynthesisResult": () => (/* reexport safe */ _SpeechSynthesisResult__WEBPACK_IMPORTED_MODULE_80__.SpeechSynthesisResult),
/* harmony export */   "SpeechSynthesisVisemeEventArgs": () => (/* reexport safe */ _SpeechSynthesisVisemeEventArgs__WEBPACK_IMPORTED_MODULE_84__.SpeechSynthesisVisemeEventArgs),
/* harmony export */   "SpeechSynthesisWordBoundaryEventArgs": () => (/* reexport safe */ _SpeechSynthesisWordBoundaryEventArgs__WEBPACK_IMPORTED_MODULE_82__.SpeechSynthesisWordBoundaryEventArgs),
/* harmony export */   "SpeechSynthesizer": () => (/* reexport safe */ _SpeechSynthesizer__WEBPACK_IMPORTED_MODULE_78__.SpeechSynthesizer),
/* harmony export */   "SpeechTranslationConfig": () => (/* reexport safe */ _SpeechTranslationConfig__WEBPACK_IMPORTED_MODULE_24__.SpeechTranslationConfig),
/* harmony export */   "SpeechTranslationConfigImpl": () => (/* reexport safe */ _SpeechTranslationConfig__WEBPACK_IMPORTED_MODULE_24__.SpeechTranslationConfigImpl),
/* harmony export */   "SynthesisResult": () => (/* reexport safe */ _SynthesisResult__WEBPACK_IMPORTED_MODULE_79__.SynthesisResult),
/* harmony export */   "SynthesisVoicesResult": () => (/* reexport safe */ _SynthesisVoicesResult__WEBPACK_IMPORTED_MODULE_86__.SynthesisVoicesResult),
/* harmony export */   "TranslationRecognitionCanceledEventArgs": () => (/* reexport safe */ _TranslationRecognitionCanceledEventArgs__WEBPACK_IMPORTED_MODULE_35__.TranslationRecognitionCanceledEventArgs),
/* harmony export */   "TranslationRecognitionEventArgs": () => (/* reexport safe */ _TranslationRecognitionEventArgs__WEBPACK_IMPORTED_MODULE_18__.TranslationRecognitionEventArgs),
/* harmony export */   "TranslationRecognitionResult": () => (/* reexport safe */ _TranslationRecognitionResult__WEBPACK_IMPORTED_MODULE_20__.TranslationRecognitionResult),
/* harmony export */   "TranslationRecognizer": () => (/* reexport safe */ _TranslationRecognizer__WEBPACK_IMPORTED_MODULE_31__.TranslationRecognizer),
/* harmony export */   "TranslationSynthesisEventArgs": () => (/* reexport safe */ _TranslationSynthesisEventArgs__WEBPACK_IMPORTED_MODULE_19__.TranslationSynthesisEventArgs),
/* harmony export */   "TranslationSynthesisResult": () => (/* reexport safe */ _TranslationSynthesisResult__WEBPACK_IMPORTED_MODULE_21__.TranslationSynthesisResult),
/* harmony export */   "Translations": () => (/* reexport safe */ _Translations__WEBPACK_IMPORTED_MODULE_32__.Translations),
/* harmony export */   "TurnStatusReceivedEventArgs": () => (/* reexport safe */ _TurnStatusReceivedEventArgs__WEBPACK_IMPORTED_MODULE_49__.TurnStatusReceivedEventArgs),
/* harmony export */   "User": () => (/* reexport safe */ _Transcription_Exports__WEBPACK_IMPORTED_MODULE_75__.User),
/* harmony export */   "VoiceInfo": () => (/* reexport safe */ _VoiceInfo__WEBPACK_IMPORTED_MODULE_87__.VoiceInfo),
/* harmony export */   "VoiceProfile": () => (/* reexport safe */ _VoiceProfile__WEBPACK_IMPORTED_MODULE_55__.VoiceProfile),
/* harmony export */   "VoiceProfileCancellationDetails": () => (/* reexport safe */ _VoiceProfileResult__WEBPACK_IMPORTED_MODULE_57__.VoiceProfileCancellationDetails),
/* harmony export */   "VoiceProfileClient": () => (/* reexport safe */ _VoiceProfileClient__WEBPACK_IMPORTED_MODULE_59__.VoiceProfileClient),
/* harmony export */   "VoiceProfileEnrollmentCancellationDetails": () => (/* reexport safe */ _VoiceProfileEnrollmentResult__WEBPACK_IMPORTED_MODULE_56__.VoiceProfileEnrollmentCancellationDetails),
/* harmony export */   "VoiceProfileEnrollmentResult": () => (/* reexport safe */ _VoiceProfileEnrollmentResult__WEBPACK_IMPORTED_MODULE_56__.VoiceProfileEnrollmentResult),
/* harmony export */   "VoiceProfilePhraseResult": () => (/* reexport safe */ _VoiceProfilePhraseResult__WEBPACK_IMPORTED_MODULE_58__.VoiceProfilePhraseResult),
/* harmony export */   "VoiceProfileResult": () => (/* reexport safe */ _VoiceProfileResult__WEBPACK_IMPORTED_MODULE_57__.VoiceProfileResult),
/* harmony export */   "VoiceProfileType": () => (/* reexport safe */ _VoiceProfileType__WEBPACK_IMPORTED_MODULE_30__.VoiceProfileType)
/* harmony export */ });
/* harmony import */ var _Audio_AudioConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Audio/AudioConfig */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioConfig.js");
/* harmony import */ var _Audio_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Audio/AudioStreamFormat */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioStreamFormat.js");
/* harmony import */ var _Audio_AudioInputStream__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Audio/AudioInputStream */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioInputStream.js");
/* harmony import */ var _Audio_AudioOutputStream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Audio/AudioOutputStream */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioOutputStream.js");
/* harmony import */ var _CancellationReason__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CancellationReason */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationReason.js");
/* harmony import */ var _Audio_PullAudioInputStreamCallback__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Audio/PullAudioInputStreamCallback */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/PullAudioInputStreamCallback.js");
/* harmony import */ var _Audio_PushAudioOutputStreamCallback__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Audio/PushAudioOutputStreamCallback */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/PushAudioOutputStreamCallback.js");
/* harmony import */ var _KeywordRecognitionModel__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./KeywordRecognitionModel */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/KeywordRecognitionModel.js");
/* harmony import */ var _SessionEventArgs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./SessionEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SessionEventArgs.js");
/* harmony import */ var _RecognitionEventArgs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./RecognitionEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/RecognitionEventArgs.js");
/* harmony import */ var _OutputFormat__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./OutputFormat */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/OutputFormat.js");
/* harmony import */ var _IntentRecognitionEventArgs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./IntentRecognitionEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/IntentRecognitionEventArgs.js");
/* harmony import */ var _RecognitionResult__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./RecognitionResult */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/RecognitionResult.js");
/* harmony import */ var _SpeechRecognitionResult__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./SpeechRecognitionResult */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionResult.js");
/* harmony import */ var _IntentRecognitionResult__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./IntentRecognitionResult */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/IntentRecognitionResult.js");
/* harmony import */ var _LanguageUnderstandingModel__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./LanguageUnderstandingModel */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/LanguageUnderstandingModel.js");
/* harmony import */ var _SpeechRecognitionEventArgs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./SpeechRecognitionEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionEventArgs.js");
/* harmony import */ var _SpeechRecognitionCanceledEventArgs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./SpeechRecognitionCanceledEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionCanceledEventArgs.js");
/* harmony import */ var _TranslationRecognitionEventArgs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./TranslationRecognitionEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationRecognitionEventArgs.js");
/* harmony import */ var _TranslationSynthesisEventArgs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./TranslationSynthesisEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationSynthesisEventArgs.js");
/* harmony import */ var _TranslationRecognitionResult__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./TranslationRecognitionResult */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationRecognitionResult.js");
/* harmony import */ var _TranslationSynthesisResult__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./TranslationSynthesisResult */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationSynthesisResult.js");
/* harmony import */ var _ResultReason__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./ResultReason */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ResultReason.js");
/* harmony import */ var _SpeechConfig__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./SpeechConfig */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechConfig.js");
/* harmony import */ var _SpeechTranslationConfig__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./SpeechTranslationConfig */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechTranslationConfig.js");
/* harmony import */ var _PropertyCollection__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./PropertyCollection */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js");
/* harmony import */ var _PropertyId__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./PropertyId */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _Recognizer__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./Recognizer */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Recognizer.js");
/* harmony import */ var _SpeechRecognizer__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./SpeechRecognizer */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognizer.js");
/* harmony import */ var _IntentRecognizer__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./IntentRecognizer */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/IntentRecognizer.js");
/* harmony import */ var _VoiceProfileType__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./VoiceProfileType */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceProfileType.js");
/* harmony import */ var _TranslationRecognizer__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./TranslationRecognizer */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationRecognizer.js");
/* harmony import */ var _Translations__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./Translations */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Translations.js");
/* harmony import */ var _NoMatchReason__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./NoMatchReason */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/NoMatchReason.js");
/* harmony import */ var _NoMatchDetails__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./NoMatchDetails */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/NoMatchDetails.js");
/* harmony import */ var _TranslationRecognitionCanceledEventArgs__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./TranslationRecognitionCanceledEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationRecognitionCanceledEventArgs.js");
/* harmony import */ var _IntentRecognitionCanceledEventArgs__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./IntentRecognitionCanceledEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/IntentRecognitionCanceledEventArgs.js");
/* harmony import */ var _CancellationDetailsBase__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./CancellationDetailsBase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationDetailsBase.js");
/* harmony import */ var _CancellationDetails__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./CancellationDetails */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationDetails.js");
/* harmony import */ var _CancellationErrorCodes__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./CancellationErrorCodes */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationErrorCodes.js");
/* harmony import */ var _ConnectionEventArgs__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./ConnectionEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ConnectionEventArgs.js");
/* harmony import */ var _ServiceEventArgs__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./ServiceEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ServiceEventArgs.js");
/* harmony import */ var _Connection__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./Connection */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Connection.js");
/* harmony import */ var _PhraseListGrammar__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./PhraseListGrammar */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PhraseListGrammar.js");
/* harmony import */ var _DialogServiceConfig__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./DialogServiceConfig */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/DialogServiceConfig.js");
/* harmony import */ var _BotFrameworkConfig__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./BotFrameworkConfig */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/BotFrameworkConfig.js");
/* harmony import */ var _CustomCommandsConfig__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./CustomCommandsConfig */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CustomCommandsConfig.js");
/* harmony import */ var _DialogServiceConnector__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./DialogServiceConnector */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/DialogServiceConnector.js");
/* harmony import */ var _ActivityReceivedEventArgs__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./ActivityReceivedEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ActivityReceivedEventArgs.js");
/* harmony import */ var _TurnStatusReceivedEventArgs__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./TurnStatusReceivedEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TurnStatusReceivedEventArgs.js");
/* harmony import */ var _ServicePropertyChannel__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./ServicePropertyChannel */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ServicePropertyChannel.js");
/* harmony import */ var _ProfanityOption__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./ProfanityOption */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ProfanityOption.js");
/* harmony import */ var _Audio_BaseAudioPlayer__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./Audio/BaseAudioPlayer */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/BaseAudioPlayer.js");
/* harmony import */ var _ConnectionMessageEventArgs__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./ConnectionMessageEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ConnectionMessageEventArgs.js");
/* harmony import */ var _ConnectionMessage__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./ConnectionMessage */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ConnectionMessage.js");
/* harmony import */ var _VoiceProfile__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./VoiceProfile */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceProfile.js");
/* harmony import */ var _VoiceProfileEnrollmentResult__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./VoiceProfileEnrollmentResult */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceProfileEnrollmentResult.js");
/* harmony import */ var _VoiceProfileResult__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./VoiceProfileResult */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceProfileResult.js");
/* harmony import */ var _VoiceProfilePhraseResult__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./VoiceProfilePhraseResult */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceProfilePhraseResult.js");
/* harmony import */ var _VoiceProfileClient__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./VoiceProfileClient */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceProfileClient.js");
/* harmony import */ var _SpeakerRecognizer__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./SpeakerRecognizer */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeakerRecognizer.js");
/* harmony import */ var _SpeakerIdentificationModel__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./SpeakerIdentificationModel */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeakerIdentificationModel.js");
/* harmony import */ var _SpeakerVerificationModel__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./SpeakerVerificationModel */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeakerVerificationModel.js");
/* harmony import */ var _AutoDetectSourceLanguageConfig__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./AutoDetectSourceLanguageConfig */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/AutoDetectSourceLanguageConfig.js");
/* harmony import */ var _AutoDetectSourceLanguageResult__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./AutoDetectSourceLanguageResult */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/AutoDetectSourceLanguageResult.js");
/* harmony import */ var _SourceLanguageConfig__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./SourceLanguageConfig */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SourceLanguageConfig.js");
/* harmony import */ var _SpeakerRecognitionResult__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./SpeakerRecognitionResult */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeakerRecognitionResult.js");
/* harmony import */ var _Transcription_Exports__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./Transcription/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/Conversation.js");
/* harmony import */ var _Transcription_Exports__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./Transcription/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationExpirationEventArgs.js");
/* harmony import */ var _Transcription_Exports__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./Transcription/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationParticipantsChangedEventArgs.js");
/* harmony import */ var _Transcription_Exports__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./Transcription/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationTranslationCanceledEventArgs.js");
/* harmony import */ var _Transcription_Exports__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./Transcription/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationTranslationEventArgs.js");
/* harmony import */ var _Transcription_Exports__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./Transcription/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationTranslationResult.js");
/* harmony import */ var _Transcription_Exports__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./Transcription/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationTranslator.js");
/* harmony import */ var _Transcription_Exports__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./Transcription/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationTranscriber.js");
/* harmony import */ var _Transcription_Exports__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./Transcription/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/IParticipant.js");
/* harmony import */ var _Transcription_Exports__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./Transcription/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ParticipantChangedReason.js");
/* harmony import */ var _SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./SpeechSynthesisOutputFormat */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisOutputFormat.js");
/* harmony import */ var _SpeechSynthesizer__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./SpeechSynthesizer */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesizer.js");
/* harmony import */ var _SynthesisResult__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./SynthesisResult */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SynthesisResult.js");
/* harmony import */ var _SpeechSynthesisResult__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./SpeechSynthesisResult */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisResult.js");
/* harmony import */ var _SpeechSynthesisEventArgs__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./SpeechSynthesisEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisEventArgs.js");
/* harmony import */ var _SpeechSynthesisWordBoundaryEventArgs__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ./SpeechSynthesisWordBoundaryEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisWordBoundaryEventArgs.js");
/* harmony import */ var _SpeechSynthesisBookmarkEventArgs__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ./SpeechSynthesisBookmarkEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisBookmarkEventArgs.js");
/* harmony import */ var _SpeechSynthesisVisemeEventArgs__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ./SpeechSynthesisVisemeEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisVisemeEventArgs.js");
/* harmony import */ var _SpeechSynthesisBoundaryType__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ./SpeechSynthesisBoundaryType */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisBoundaryType.js");
/* harmony import */ var _SynthesisVoicesResult__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! ./SynthesisVoicesResult */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SynthesisVoicesResult.js");
/* harmony import */ var _VoiceInfo__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! ./VoiceInfo */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceInfo.js");
/* harmony import */ var _Audio_SpeakerAudioDestination__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! ./Audio/SpeakerAudioDestination */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/SpeakerAudioDestination.js");
/* harmony import */ var _ConversationTranscriptionCanceledEventArgs__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! ./ConversationTranscriptionCanceledEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ConversationTranscriptionCanceledEventArgs.js");
/* harmony import */ var _PronunciationAssessmentGradingSystem__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! ./PronunciationAssessmentGradingSystem */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PronunciationAssessmentGradingSystem.js");
/* harmony import */ var _PronunciationAssessmentGranularity__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! ./PronunciationAssessmentGranularity */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PronunciationAssessmentGranularity.js");
/* harmony import */ var _PronunciationAssessmentConfig__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! ./PronunciationAssessmentConfig */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PronunciationAssessmentConfig.js");
/* harmony import */ var _PronunciationAssessmentResult__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(/*! ./PronunciationAssessmentResult */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PronunciationAssessmentResult.js");
/* harmony import */ var _LanguageIdMode__WEBPACK_IMPORTED_MODULE_94__ = __webpack_require__(/*! ./LanguageIdMode */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/LanguageIdMode.js");
/* harmony import */ var _Diagnostics__WEBPACK_IMPORTED_MODULE_95__ = __webpack_require__(/*! ./Diagnostics */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Diagnostics.js");
/* harmony import */ var _LogLevel__WEBPACK_IMPORTED_MODULE_96__ = __webpack_require__(/*! ./LogLevel */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/PlatformEvent.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

























































































//# sourceMappingURL=Exports.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/IntentRecognitionCanceledEventArgs.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/IntentRecognitionCanceledEventArgs.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IntentRecognitionCanceledEventArgs": () => (/* binding */ IntentRecognitionCanceledEventArgs)
/* harmony export */ });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/IntentRecognitionEventArgs.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Define payload of intent recognition canceled result events.
 * @class IntentRecognitionCanceledEventArgs
 */
class IntentRecognitionCanceledEventArgs extends _Exports__WEBPACK_IMPORTED_MODULE_0__.IntentRecognitionEventArgs {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {CancellationReason} result - The result of the intent recognition.
     * @param {string} offset - The offset.
     * @param {IntentRecognitionResult} sessionId - The session id.
     */
    constructor(reason, errorDetails, errorCode, result, offset, sessionId) {
        super(result, offset, sessionId);
        this.privReason = reason;
        this.privErrorDetails = errorDetails;
        this.privErrorCode = errorCode;
    }
    /**
     * The reason the recognition was canceled.
     * @member IntentRecognitionCanceledEventArgs.prototype.reason
     * @function
     * @public
     * @returns {CancellationReason} Specifies the reason canceled.
     */
    get reason() {
        return this.privReason;
    }
    /**
     * The error code in case of an unsuccessful recognition.
     * Added in version 1.1.0.
     * @return An error code that represents the error reason.
     */
    get errorCode() {
        return this.privErrorCode;
    }
    /**
     * In case of an unsuccessful recognition, provides details of the occurred error.
     * @member IntentRecognitionCanceledEventArgs.prototype.errorDetails
     * @function
     * @public
     * @returns {string} A String that represents the error details.
     */
    get errorDetails() {
        return this.privErrorDetails;
    }
}

//# sourceMappingURL=IntentRecognitionCanceledEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/IntentRecognitionEventArgs.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/IntentRecognitionEventArgs.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IntentRecognitionEventArgs": () => (/* binding */ IntentRecognitionEventArgs)
/* harmony export */ });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/RecognitionEventArgs.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Intent recognition result event arguments.
 * @class
 */
class IntentRecognitionEventArgs extends _Exports__WEBPACK_IMPORTED_MODULE_0__.RecognitionEventArgs {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param result - The result of the intent recognition.
     * @param offset - The offset.
     * @param sessionId - The session id.
     */
    constructor(result, offset, sessionId) {
        super(offset, sessionId);
        this.privResult = result;
    }
    /**
     * Represents the intent recognition result.
     * @member IntentRecognitionEventArgs.prototype.result
     * @function
     * @public
     * @returns {IntentRecognitionResult} Represents the intent recognition result.
     */
    get result() {
        return this.privResult;
    }
}

//# sourceMappingURL=IntentRecognitionEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/IntentRecognitionResult.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/IntentRecognitionResult.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IntentRecognitionResult": () => (/* binding */ IntentRecognitionResult)
/* harmony export */ });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionResult.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Intent recognition result.
 * @class
 */
class IntentRecognitionResult extends _Exports__WEBPACK_IMPORTED_MODULE_0__.SpeechRecognitionResult {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param intentId - The intent id.
     * @param resultId - The result id.
     * @param reason - The reason.
     * @param text - The recognized text.
     * @param duration - The duration.
     * @param offset - The offset into the stream.
     * @param language - Primary Language detected, if provided.
     * @param languageDetectionConfidence - Primary Language confidence ("Unknown," "Low," "Medium," "High"...), if provided.
     * @param errorDetails - Error details, if provided.
     * @param json - Additional Json, if provided.
     * @param properties - Additional properties, if provided.
     */
    constructor(intentId, resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties) {
        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, undefined, errorDetails, json, properties);
        this.privIntentId = intentId;
    }
    /**
     * A String that represents the intent identifier being recognized.
     * @member IntentRecognitionResult.prototype.intentId
     * @function
     * @public
     * @returns {string} A String that represents the intent identifier being recognized.
     */
    get intentId() {
        return this.privIntentId;
    }
}

//# sourceMappingURL=IntentRecognitionResult.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/IntentRecognizer.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/IntentRecognizer.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IntentRecognizer": () => (/* binding */ IntentRecognizer)
/* harmony export */ });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IntentConnectionFactory.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognizerConfig.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/AddedLmIntent.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IntentServiceRecognizer.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js");
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Recognizer.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




/**
 * Intent recognizer.
 * @class
 */
class IntentRecognizer extends _Exports__WEBPACK_IMPORTED_MODULE_0__.Recognizer {
    /**
     * Initializes an instance of the IntentRecognizer.
     * @constructor
     * @param {SpeechConfig} speechConfig - The set of configuration properties.
     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer
     */
    constructor(speechConfig, audioConfig) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrUndefined(speechConfig, "speechConfig");
        const configImpl = speechConfig;
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrUndefined(configImpl, "speechConfig");
        super(audioConfig, configImpl.properties, new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_2__.IntentConnectionFactory());
        this.privAddedIntents = [];
        this.privAddedLmIntents = {};
        this.privDisposedIntentRecognizer = false;
        this.privProperties = configImpl.properties;
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_RecoLanguage), _Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId[_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_RecoLanguage]);
    }
    /**
     * Gets the spoken language of recognition.
     * @member IntentRecognizer.prototype.speechRecognitionLanguage
     * @function
     * @public
     * @returns {string} the spoken language of recognition.
     */
    get speechRecognitionLanguage() {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);
        return this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_RecoLanguage);
    }
    /**
     * Gets the authorization token used to communicate with the service.
     * @member IntentRecognizer.prototype.authorizationToken
     * @function
     * @public
     * @returns {string} Authorization token.
     */
    get authorizationToken() {
        return this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceAuthorization_Token);
    }
    /**
     * Gets/Sets the authorization token used to communicate with the service.
     * Note: Please use a token derived from your LanguageUnderstanding subscription key for the Intent recognizer.
     * @member IntentRecognizer.prototype.authorizationToken
     * @function
     * @public
     * @param {string} value - Authorization token.
     */
    set authorizationToken(value) {
        this.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceAuthorization_Token, value);
    }
    /**
     * The collection of properties and their values defined for this IntentRecognizer.
     * @member IntentRecognizer.prototype.properties
     * @function
     * @public
     * @returns {PropertyCollection} The collection of properties and their
     * values defined for this IntentRecognizer.
     */
    get properties() {
        return this.privProperties;
    }
    /**
     * Starts intent recognition, and stops after the first utterance is recognized.
     * The task returns the recognition text and intent as result.
     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,
     * so it is suitable only for single shot recognition like command or query.
     * For long-running recognition, use StartContinuousRecognitionAsync() instead.
     * @member IntentRecognizer.prototype.recognizeOnceAsync
     * @function
     * @public
     * @param cb - Callback that received the recognition has finished with an IntentRecognitionResult.
     * @param err - Callback invoked in case of an error.
     */
    recognizeOnceAsync(cb, err) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);
        if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {
            const context = this.buildSpeechContext();
            this.privReco.speechContext.setSection("intent", context.Intent);
            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);
            const intentReco = this.privReco;
            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);
        }
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_4__.marshalPromiseToCallbacks)(this.recognizeOnceAsyncImpl(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_5__.RecognitionMode.Interactive), cb, err);
    }
    /**
     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.
     * User must subscribe to events to receive recognition results.
     * @member IntentRecognizer.prototype.startContinuousRecognitionAsync
     * @function
     * @public
     * @param cb - Callback invoked once the recognition has started.
     * @param err - Callback invoked in case of an error.
     */
    startContinuousRecognitionAsync(cb, err) {
        if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {
            const context = this.buildSpeechContext();
            this.privReco.speechContext.setSection("intent", context.Intent);
            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);
            const intentReco = this.privReco;
            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);
        }
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_4__.marshalPromiseToCallbacks)(this.startContinuousRecognitionAsyncImpl(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_5__.RecognitionMode.Conversation), cb, err);
    }
    /**
     * Stops continuous intent recognition.
     * @member IntentRecognizer.prototype.stopContinuousRecognitionAsync
     * @function
     * @public
     * @param cb - Callback invoked once the recognition has stopped.
     * @param err - Callback invoked in case of an error.
     */
    stopContinuousRecognitionAsync(cb, err) {
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_4__.marshalPromiseToCallbacks)(this.stopContinuousRecognitionAsyncImpl(), cb, err);
    }
    /**
     * Starts speech recognition with keyword spotting, until stopKeywordRecognitionAsync() is called.
     * User must subscribe to events to receive recognition results.
     * Note: Key word spotting functionality is only available on the Speech Devices SDK.
     * This functionality is currently not included in the SDK itself.
     * @member IntentRecognizer.prototype.startKeywordRecognitionAsync
     * @function
     * @public
     * @param {KeywordRecognitionModel} model - The keyword recognition model that specifies the keyword to be recognized.
     * @param cb - Callback invoked once the recognition has started.
     * @param err - Callback invoked in case of an error.
     */
    startKeywordRecognitionAsync(model, cb, err) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNull(model, "model");
        if (!!err) {
            err("Not yet implemented.");
        }
    }
    /**
     * Stops continuous speech recognition.
     * Note: Key word spotting functionality is only available on the Speech Devices SDK.
     * This functionality is currently not included in the SDK itself.
     * @member IntentRecognizer.prototype.stopKeywordRecognitionAsync
     * @function
     * @public
     * @param cb - Callback invoked once the recognition has stopped.
     * @param err - Callback invoked in case of an error.
     */
    stopKeywordRecognitionAsync(cb, err) {
        if (!!cb) {
            try {
                cb();
            }
            catch (e) {
                if (!!err) {
                    err(e);
                }
            }
        }
    }
    /**
     * Adds a phrase that should be recognized as intent.
     * @member IntentRecognizer.prototype.addIntent
     * @function
     * @public
     * @param {string} intentId - A String that represents the identifier of the intent to be recognized.
     * @param {string} phrase - A String that specifies the phrase representing the intent.
     */
    addIntent(simplePhrase, intentId) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(intentId, "intentId");
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(simplePhrase, "simplePhrase");
        this.privAddedIntents.push([intentId, simplePhrase]);
    }
    /**
     * Adds an intent from Language Understanding service for recognition.
     * @member IntentRecognizer.prototype.addIntentWithLanguageModel
     * @function
     * @public
     * @param {string} intentId - A String that represents the identifier of the intent
     * to be recognized. Ignored if intentName is empty.
     * @param {string} model - The intent model from Language Understanding service.
     * @param {string} intentName - The intent name defined in the intent model. If it
     * is empty, all intent names defined in the model will be added.
     */
    addIntentWithLanguageModel(intentId, model, intentName) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(intentId, "intentId");
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNull(model, "model");
        const modelImpl = model;
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(modelImpl.appId, "model.appId");
        this.privAddedLmIntents[intentId] = new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_6__.AddedLmIntent(modelImpl, intentName);
    }
    /**
     * @summary Adds all intents from the specified Language Understanding Model.
     * @member IntentRecognizer.prototype.addAllIntents
     * @function
     * @public
     * @function
     * @public
     * @param {LanguageUnderstandingModel} model - The language understanding model containing the intents.
     * @param {string} intentId - A custom id String to be returned in the IntentRecognitionResult's getIntentId() method.
     */
    addAllIntents(model, intentId) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNull(model, "model");
        const modelImpl = model;
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(modelImpl.appId, "model.appId");
        this.privUmbrellaIntent = new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_6__.AddedLmIntent(modelImpl, intentId);
    }
    /**
     * closes all external resources held by an instance of this class.
     * @member IntentRecognizer.prototype.close
     * @function
     * @public
     */
    close(cb, errorCb) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_4__.marshalPromiseToCallbacks)(this.dispose(true), cb, errorCb);
    }
    createRecognizerConfig(speechConfig) {
        return new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_5__.RecognizerConfig(speechConfig, this.privProperties);
    }
    createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {
        const audioImpl = audioConfig;
        return new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_7__.IntentServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);
    }
    dispose(disposing) {
        const _super = Object.create(null, {
            dispose: { get: () => super.dispose }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (this.privDisposedIntentRecognizer) {
                return;
            }
            if (disposing) {
                this.privDisposedIntentRecognizer = true;
                yield _super.dispose.call(this, disposing);
            }
        });
    }
    buildSpeechContext() {
        let appId;
        let region;
        let subscriptionKey;
        const refGrammers = [];
        if (undefined !== this.privUmbrellaIntent) {
            appId = this.privUmbrellaIntent.modelImpl.appId;
            region = this.privUmbrellaIntent.modelImpl.region;
            subscriptionKey = this.privUmbrellaIntent.modelImpl.subscriptionKey;
        }
        // Build the reference grammer array.
        for (const intentId of Object.keys(this.privAddedLmIntents)) {
            const addedLmIntent = this.privAddedLmIntents[intentId];
            // validate all the same model, region, and key...
            if (appId === undefined) {
                appId = addedLmIntent.modelImpl.appId;
            }
            else {
                if (appId !== addedLmIntent.modelImpl.appId) {
                    throw new Error("Intents must all be from the same LUIS model");
                }
            }
            if (region === undefined) {
                region = addedLmIntent.modelImpl.region;
            }
            else {
                if (region !== addedLmIntent.modelImpl.region) {
                    throw new Error("Intents must all be from the same LUIS model in a single region");
                }
            }
            if (subscriptionKey === undefined) {
                subscriptionKey = addedLmIntent.modelImpl.subscriptionKey;
            }
            else {
                if (subscriptionKey !== addedLmIntent.modelImpl.subscriptionKey) {
                    throw new Error("Intents must all use the same subscription key");
                }
            }
            const grammer = "luis/" + appId + "-PRODUCTION#" + intentId;
            refGrammers.push(grammer);
        }
        return {
            Intent: {
                id: appId,
                key: (subscriptionKey === undefined) ? this.privProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId[_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_Key]) : subscriptionKey,
                provider: "LUIS",
            },
            ReferenceGrammars: (undefined === this.privUmbrellaIntent) ? refGrammers : ["luis/" + appId + "-PRODUCTION"],
        };
    }
}

//# sourceMappingURL=IntentRecognizer.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/KeywordRecognitionModel.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/KeywordRecognitionModel.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KeywordRecognitionModel": () => (/* binding */ KeywordRecognitionModel)
/* harmony export */ });
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Represents a keyword recognition model for recognizing when
 * the user says a keyword to initiate further speech recognition.
 * @class KeywordRecognitionModel
 */
class KeywordRecognitionModel {
    /**
     * Create and initializes a new instance.
     * @constructor
     */
    constructor() {
        this.privDisposed = false;
        return;
    }
    /**
     * Creates a keyword recognition model using the specified filename.
     * @member KeywordRecognitionModel.fromFile
     * @function
     * @public
     * @param {string} fileName - A string that represents file name for the keyword recognition model.
     * Note, the file can point to a zip file in which case the model
     * will be extracted from the zip.
     * @returns {KeywordRecognitionModel} The keyword recognition model being created.
     */
    static fromFile(fileName) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfFileDoesNotExist(fileName, "fileName");
        throw new Error("Not yet implemented.");
    }
    /**
     * Creates a keyword recognition model using the specified filename.
     * @member KeywordRecognitionModel.fromStream
     * @function
     * @public
     * @param {string} file - A File that represents file for the keyword recognition model.
     * Note, the file can point to a zip file in which case the model will be extracted from the zip.
     * @returns {KeywordRecognitionModel} The keyword recognition model being created.
     */
    static fromStream(file) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNull(file, "file");
        throw new Error("Not yet implemented.");
    }
    /**
     * Dispose of associated resources.
     * @member KeywordRecognitionModel.prototype.close
     * @function
     * @public
     */
    close() {
        if (this.privDisposed) {
            return;
        }
        this.privDisposed = true;
    }
}

//# sourceMappingURL=KeywordRecognitionModel.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/LanguageIdMode.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/LanguageIdMode.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LanguageIdMode": () => (/* binding */ LanguageIdMode)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Language Identification mode
 * @class LanguageIdMode
 */
var LanguageIdMode;
(function (LanguageIdMode) {
    /**
     * Detect language at audio start
     * @member LanguageIdMode.AtStart
     */
    LanguageIdMode[LanguageIdMode["AtStart"] = 0] = "AtStart";
    /**
     * Continuously detect language
     * @member LanguageIdMode.Continuous
     */
    LanguageIdMode[LanguageIdMode["Continuous"] = 1] = "Continuous";
})(LanguageIdMode || (LanguageIdMode = {}));

//# sourceMappingURL=LanguageIdMode.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/LanguageUnderstandingModel.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/LanguageUnderstandingModel.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LanguageUnderstandingModel": () => (/* binding */ LanguageUnderstandingModel),
/* harmony export */   "LanguageUnderstandingModelImpl": () => (/* binding */ LanguageUnderstandingModelImpl)
/* harmony export */ });
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
// eslint-disable-next-line max-classes-per-file

/**
 * Language understanding model
 * @class LanguageUnderstandingModel
 */
class LanguageUnderstandingModel {
    /**
     * Creates and initializes a new instance
     * @constructor
     */
    constructor() {
        return;
    }
    /**
     * Creates an language understanding model using the specified endpoint.
     * @member LanguageUnderstandingModel.fromEndpoint
     * @function
     * @public
     * @param {URL} uri - A String that represents the endpoint of the language understanding model.
     * @returns {LanguageUnderstandingModel} The language understanding model being created.
     */
    static fromEndpoint(uri) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNull(uri, "uri");
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(uri.hostname, "uri");
        const langModelImp = new LanguageUnderstandingModelImpl();
        // Need to extract the app ID from the URL.
        // URL is in the format: https://<region>.api.cognitive.microsoft.com/luis/v2.0/apps/<Guid>?subscription-key=<key>&timezoneOffset=-360
        // Start tearing the string apart.
        // region can be extracted from the host name.
        const firstDot = uri.host.indexOf(".");
        if (-1 === firstDot) {
            throw new Error("Could not determine region from endpoint");
        }
        langModelImp.region = uri.host.substr(0, firstDot);
        // Now the app ID.
        const lastSegment = uri.pathname.lastIndexOf("/") + 1;
        if (-1 === lastSegment) {
            throw new Error("Could not determine appId from endpoint");
        }
        langModelImp.appId = uri.pathname.substr(lastSegment);
        // And finally the key.
        langModelImp.subscriptionKey = uri.searchParams.get("subscription-key");
        if (undefined === langModelImp.subscriptionKey) {
            throw new Error("Could not determine subscription key from endpoint");
        }
        return langModelImp;
    }
    /**
     * Creates an language understanding model using the application id of Language Understanding service.
     * @member LanguageUnderstandingModel.fromAppId
     * @function
     * @public
     * @param {string} appId - A String that represents the application id of Language Understanding service.
     * @returns {LanguageUnderstandingModel} The language understanding model being created.
     */
    static fromAppId(appId) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(appId, "appId");
        const langModelImp = new LanguageUnderstandingModelImpl();
        langModelImp.appId = appId;
        return langModelImp;
    }
    /**
     * Creates a language understanding model using hostname, subscription key and application
     * id of Language Understanding service.
     * @member LanguageUnderstandingModel.fromSubscription
     * @function
     * @public
     * @param {string} subscriptionKey - A String that represents the subscription key of
     * Language Understanding service.
     * @param {string} appId - A String that represents the application id of Language
     * Understanding service.
     * @param {LanguageUnderstandingModel} region - A String that represents the region
     * of the Language Understanding service (see the <a href="https://aka.ms/csspeech/region">region page</a>).
     * @returns {LanguageUnderstandingModel} The language understanding model being created.
     */
    static fromSubscription(subscriptionKey, appId, region) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(subscriptionKey, "subscriptionKey");
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(appId, "appId");
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(region, "region");
        const langModelImp = new LanguageUnderstandingModelImpl();
        langModelImp.appId = appId;
        langModelImp.region = region;
        langModelImp.subscriptionKey = subscriptionKey;
        return langModelImp;
    }
}
/**
 * @private
 * @class LanguageUnderstandingModelImpl
 */
class LanguageUnderstandingModelImpl extends LanguageUnderstandingModel {
}

//# sourceMappingURL=LanguageUnderstandingModel.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/NoMatchDetails.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/NoMatchDetails.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NoMatchDetails": () => (/* binding */ NoMatchDetails)
/* harmony export */ });
/* harmony import */ var _src_common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SimpleSpeechPhrase.js");
/* harmony import */ var _src_common_speech_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../src/common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/Enums.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/NoMatchReason.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


/**
 * Contains detailed information for NoMatch recognition results.
 * @class NoMatchDetails
 */
class NoMatchDetails {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {NoMatchReason} reason - The no-match reason.
     */
    constructor(reason) {
        this.privReason = reason;
    }
    /**
     * Creates an instance of NoMatchDetails object for the NoMatch SpeechRecognitionResults.
     * @member NoMatchDetails.fromResult
     * @function
     * @public
     * @param {SpeechRecognitionResult | IntentRecognitionResult | TranslationRecognitionResult}
     * result - The recognition result that was not recognized.
     * @returns {NoMatchDetails} The no match details object being created.
     */
    static fromResult(result) {
        const simpleSpeech = _src_common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__.SimpleSpeechPhrase.fromJSON(result.json);
        let reason = _Exports__WEBPACK_IMPORTED_MODULE_1__.NoMatchReason.NotRecognized;
        switch (simpleSpeech.RecognitionStatus) {
            case _src_common_speech_Exports__WEBPACK_IMPORTED_MODULE_2__.RecognitionStatus.BabbleTimeout:
                reason = _Exports__WEBPACK_IMPORTED_MODULE_1__.NoMatchReason.InitialBabbleTimeout;
                break;
            case _src_common_speech_Exports__WEBPACK_IMPORTED_MODULE_2__.RecognitionStatus.InitialSilenceTimeout:
                reason = _Exports__WEBPACK_IMPORTED_MODULE_1__.NoMatchReason.InitialSilenceTimeout;
                break;
            default:
                reason = _Exports__WEBPACK_IMPORTED_MODULE_1__.NoMatchReason.NotRecognized;
                break;
        }
        return new NoMatchDetails(reason);
    }
    /**
     * The reason the recognition was canceled.
     * @member NoMatchDetails.prototype.reason
     * @function
     * @public
     * @returns {NoMatchReason} Specifies the reason canceled.
     */
    get reason() {
        return this.privReason;
    }
}

//# sourceMappingURL=NoMatchDetails.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/NoMatchReason.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/NoMatchReason.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NoMatchReason": () => (/* binding */ NoMatchReason)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Defines the possible reasons a recognition result might not be recognized.
 * @class NoMatchReason
 */
var NoMatchReason;
(function (NoMatchReason) {
    /**
     * Indicates that speech was detected, but not recognized.
     * @member NoMatchReason.NotRecognized
     */
    NoMatchReason[NoMatchReason["NotRecognized"] = 0] = "NotRecognized";
    /**
     * Indicates that the start of the audio stream contained only silence,
     * and the service timed out waiting for speech.
     * @member NoMatchReason.InitialSilenceTimeout
     */
    NoMatchReason[NoMatchReason["InitialSilenceTimeout"] = 1] = "InitialSilenceTimeout";
    /**
     * Indicates that the start of the audio stream contained only noise,
     * and the service timed out waiting for speech.
     * @member NoMatchReason.InitialBabbleTimeout
     */
    NoMatchReason[NoMatchReason["InitialBabbleTimeout"] = 2] = "InitialBabbleTimeout";
})(NoMatchReason || (NoMatchReason = {}));

//# sourceMappingURL=NoMatchReason.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/OutputFormat.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/OutputFormat.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OutputFormat": () => (/* binding */ OutputFormat)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Define Speech Recognizer output formats.
 * @class OutputFormat
 */
var OutputFormat;
(function (OutputFormat) {
    /**
     * @member OutputFormat.Simple
     */
    OutputFormat[OutputFormat["Simple"] = 0] = "Simple";
    /**
     * @member OutputFormat.Detailed
     */
    OutputFormat[OutputFormat["Detailed"] = 1] = "Detailed";
})(OutputFormat || (OutputFormat = {}));

//# sourceMappingURL=OutputFormat.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PhraseListGrammar.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PhraseListGrammar.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PhraseListGrammar": () => (/* binding */ PhraseListGrammar)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Allows additions of new phrases to improve speech recognition.
 *
 * Phrases added to the recognizer are effective at the start of the next recognition, or the next time the SpeechSDK must reconnect
 * to the speech service.
 */
class PhraseListGrammar {
    constructor(recogBase) {
        this.privGrammerBuilder = recogBase.dynamicGrammar;
    }
    /**
     * Creates a PhraseListGrammar from a given speech recognizer. Will accept any recognizer that derives from @class Recognizer.
     * @param recognizer The recognizer to add phrase lists to.
     */
    static fromRecognizer(recognizer) {
        const recoBase = recognizer.internalData;
        return new PhraseListGrammar(recoBase);
    }
    /**
     * Adds a single phrase to the current recognizer.
     * @param phrase Phrase to add.
     */
    addPhrase(phrase) {
        this.privGrammerBuilder.addPhrase(phrase);
    }
    /**
     * Adds multiple phrases to the current recognizer.
     * @param phrases Array of phrases to add.
     */
    addPhrases(phrases) {
        this.privGrammerBuilder.addPhrase(phrases);
    }
    /**
     * Clears all phrases added to the current recognizer.
     */
    clear() {
        this.privGrammerBuilder.clearPhrases();
    }
}

//# sourceMappingURL=PhraseListGrammar.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ProfanityOption.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ProfanityOption.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ProfanityOption": () => (/* binding */ ProfanityOption)
/* harmony export */ });
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Profanity option.
 * Added in version 1.7.0.
 */
var ProfanityOption;
(function (ProfanityOption) {
    ProfanityOption[ProfanityOption["Masked"] = 0] = "Masked";
    ProfanityOption[ProfanityOption["Removed"] = 1] = "Removed";
    ProfanityOption[ProfanityOption["Raw"] = 2] = "Raw";
})(ProfanityOption || (ProfanityOption = {}));

//# sourceMappingURL=ProfanityOption.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PronunciationAssessmentConfig.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PronunciationAssessmentConfig.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PronunciationAssessmentConfig": () => (/* binding */ PronunciationAssessmentConfig)
/* harmony export */ });
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PronunciationAssessmentGradingSystem.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PronunciationAssessmentGranularity.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


/**
 * Pronunciation assessment configuration.
 * @class PronunciationAssessmentConfig
 * Added in version 1.15.0.
 */
class PronunciationAssessmentConfig {
    /**
     * PronunciationAssessmentConfig constructor.
     * @constructor
     * @param {string} referenceText
     * @param gradingSystem
     * @param granularity
     * @param enableMiscue
     */
    constructor(referenceText, gradingSystem = _Exports__WEBPACK_IMPORTED_MODULE_0__.PronunciationAssessmentGradingSystem.FivePoint, granularity = _Exports__WEBPACK_IMPORTED_MODULE_1__.PronunciationAssessmentGranularity.Phoneme, enableMiscue = false) {
        _Contracts__WEBPACK_IMPORTED_MODULE_2__.Contracts.throwIfNullOrUndefined(referenceText, "referenceText");
        this.privProperties = new _Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyCollection();
        this.privProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.PronunciationAssessment_ReferenceText, referenceText);
        this.privProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.PronunciationAssessment_GradingSystem, _Exports__WEBPACK_IMPORTED_MODULE_0__.PronunciationAssessmentGradingSystem[gradingSystem]);
        this.privProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.PronunciationAssessment_Granularity, _Exports__WEBPACK_IMPORTED_MODULE_1__.PronunciationAssessmentGranularity[granularity]);
        this.privProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.PronunciationAssessment_EnableMiscue, String(enableMiscue));
    }
    /**
     * @member PronunciationAssessmentConfig.fromJSON
     * @function
     * @public
     * @param {string} json The json string containing the pronunciation assessment parameters.
     * @return {PronunciationAssessmentConfig} Instance of PronunciationAssessmentConfig
     * @summary Creates an instance of the PronunciationAssessmentConfig from json.
     */
    static fromJSON(json) {
        _Contracts__WEBPACK_IMPORTED_MODULE_2__.Contracts.throwIfNullOrUndefined(json, "json");
        const config = new PronunciationAssessmentConfig("");
        config.privProperties = new _Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyCollection();
        config.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.PronunciationAssessment_Json, json);
        return config;
    }
    toJSON() {
        this.updateJson();
        return this.privProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.PronunciationAssessment_Params);
    }
    applyTo(recognizer) {
        this.updateJson();
        const recoBase = recognizer.internalData;
        recoBase.speechContext.setPronunciationAssessmentParams(this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.PronunciationAssessment_Params));
    }
    /**
     * Gets the reference text.
     * @member PronunciationAssessmentConfig.prototype.referenceText
     * @function
     * @public
     * @returns {string} Reference text.
     */
    get referenceText() {
        return this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.PronunciationAssessment_ReferenceText);
    }
    /**
     * Gets/Sets the reference text.
     * @member PronunciationAssessmentConfig.prototype.referenceText
     * @function
     * @public
     * @param {string} referenceText - Reference text.
     */
    set referenceText(referenceText) {
        _Contracts__WEBPACK_IMPORTED_MODULE_2__.Contracts.throwIfNullOrWhitespace(referenceText, "referenceText");
        this.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.PronunciationAssessment_ReferenceText, referenceText);
    }
    /**
     * Sets the phoneme alphabet.
     * The valid values are "SAPI" (default) and "IPA".
     * Added in version 1.20.0
     * @member PronunciationAssessmentConfig.prototype.phonemeAlphabet
     * @function
     * @public
     * @param {string} phonemeAlphabet - Phoneme alphabet.
     */
    set phonemeAlphabet(phonemeAlphabet) {
        _Contracts__WEBPACK_IMPORTED_MODULE_2__.Contracts.throwIfNullOrWhitespace(phonemeAlphabet, "phonemeAlphabet");
        this.privPhonemeAlphabet = phonemeAlphabet;
    }
    /**
     * Sets the boolean enableMiscue property.
     * Added in version 1.26.0
     * @member PronunciationAssessmentConfig.prototype.enableMiscue
     * @function
     * @public
     * @param {boolean} enableMiscue - enable miscue.
     */
    set enableMiscue(enableMiscue) {
        const enableMiscueString = enableMiscue ? "true" : "false";
        this.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.PronunciationAssessment_EnableMiscue, enableMiscueString);
    }
    /**
     * Gets the boolean enableMiscue property.
     * Added in version 1.26.0
     * @member PronunciationAssessmentConfig.prototype.enableMiscue
     * @function
     * @public
     * @return {boolean} enableMiscue - enable miscue.
     */
    get enableMiscue() {
        const enableMiscueString = this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.PronunciationAssessment_EnableMiscue, "false");
        return (enableMiscueString.toLowerCase() === "true");
    }
    /**
     * Sets the nbest phoneme count
     * Added in version 1.20.0
     * @member PronunciationAssessmentConfig.prototype.nbestPhonemeCount
     * @function
     * @public
     * @param {number} nbestPhonemeCount - NBest phoneme count.
     */
    set nbestPhonemeCount(nbestPhonemeCount) {
        this.privNBestPhonemeCount = nbestPhonemeCount;
    }
    /**
     * @member PronunciationAssessmentConfig.prototype.properties
     * @function
     * @public
     * @return {PropertyCollection} Properties of the config.
     * @summary Gets a pronunciation assessment config properties
     */
    get properties() {
        return this.privProperties;
    }
    updateJson() {
        const jsonString = this.privProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.PronunciationAssessment_Json, "{}");
        const paramsJson = JSON.parse(jsonString);
        const referenceText = this.privProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.PronunciationAssessment_ReferenceText);
        if (referenceText) {
            paramsJson.referenceText = referenceText;
        }
        const gradingSystem = this.privProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.PronunciationAssessment_GradingSystem);
        if (gradingSystem) {
            paramsJson.gradingSystem = gradingSystem;
        }
        const granularity = this.privProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.PronunciationAssessment_Granularity);
        if (granularity) {
            paramsJson.granularity = granularity;
        }
        if (this.privPhonemeAlphabet) {
            paramsJson.phonemeAlphabet = this.privPhonemeAlphabet;
        }
        if (this.privNBestPhonemeCount) {
            paramsJson.nbestPhonemeCount = this.privNBestPhonemeCount;
        }
        // always set dimension to Comprehensive
        paramsJson.dimension = "Comprehensive";
        paramsJson.enableMiscue = this.enableMiscue;
        this.privProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.PronunciationAssessment_Params, JSON.stringify(paramsJson));
    }
}

//# sourceMappingURL=PronunciationAssessmentConfig.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PronunciationAssessmentGradingSystem.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PronunciationAssessmentGradingSystem.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PronunciationAssessmentGradingSystem": () => (/* binding */ PronunciationAssessmentGradingSystem)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Defines the point system for pronunciation score calibration; default value is FivePoint.
 * Added in version 1.15.0
 * @class PronunciationAssessmentGradingSystem
 */
var PronunciationAssessmentGradingSystem;
(function (PronunciationAssessmentGradingSystem) {
    /**
     * Five point calibration
     * @member PronunciationAssessmentGradingSystem.FivePoint
     */
    PronunciationAssessmentGradingSystem[PronunciationAssessmentGradingSystem["FivePoint"] = 1] = "FivePoint";
    /**
     * Hundred mark
     * @member PronunciationAssessmentGradingSystem.HundredMark
     */
    PronunciationAssessmentGradingSystem[PronunciationAssessmentGradingSystem["HundredMark"] = 2] = "HundredMark";
})(PronunciationAssessmentGradingSystem || (PronunciationAssessmentGradingSystem = {}));

//# sourceMappingURL=PronunciationAssessmentGradingSystem.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PronunciationAssessmentGranularity.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PronunciationAssessmentGranularity.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PronunciationAssessmentGranularity": () => (/* binding */ PronunciationAssessmentGranularity)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Defines the pronunciation evaluation granularity; default value is Phoneme.
 * Added in version 1.15.0
 * @class PronunciationAssessmentGranularity
 */
var PronunciationAssessmentGranularity;
(function (PronunciationAssessmentGranularity) {
    /**
     * Shows the score on the full text, word and phoneme level
     * @member PronunciationAssessmentGranularity.Phoneme
     */
    PronunciationAssessmentGranularity[PronunciationAssessmentGranularity["Phoneme"] = 1] = "Phoneme";
    /**
     * Shows the score on the full text and word level
     * @member PronunciationAssessmentGranularity.Word
     */
    PronunciationAssessmentGranularity[PronunciationAssessmentGranularity["Word"] = 2] = "Word";
    /**
     * Shows the score on the full text level only
     * @member PronunciationAssessmentGranularity.FullText
     */
    PronunciationAssessmentGranularity[PronunciationAssessmentGranularity["FullText"] = 3] = "FullText";
})(PronunciationAssessmentGranularity || (PronunciationAssessmentGranularity = {}));

//# sourceMappingURL=PronunciationAssessmentGranularity.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PronunciationAssessmentResult.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PronunciationAssessmentResult.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PronunciationAssessmentResult": () => (/* binding */ PronunciationAssessmentResult)
/* harmony export */ });
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


/**
 * Pronunciation assessment results.
 * @class PronunciationAssessmentResult
 * Added in version 1.15.0.
 */
class PronunciationAssessmentResult {
    constructor(jsonString) {
        const j = JSON.parse(jsonString);
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrUndefined(j.NBest[0], "NBest");
        this.privPronJson = j.NBest[0];
    }
    /**
     * @member PronunciationAssessmentResult.fromResult
     * @function
     * @public
     * @param {RecognitionResult} result The recognition result.
     * @return {PronunciationAssessmentConfig} Instance of PronunciationAssessmentConfig
     * @summary Creates an instance of the PronunciationAssessmentResult from recognition result.
     */
    static fromResult(result) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrUndefined(result, "result");
        const json = result.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceResponse_JsonResult);
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrUndefined(json, "json");
        return new PronunciationAssessmentResult(json);
    }
    /**
     * Gets the detail result of pronunciation assessment.
     * @member PronunciationAssessmentConfig.prototype.detailResult
     * @function
     * @public
     * @returns {DetailResult} detail result.
     */
    get detailResult() {
        return this.privPronJson;
    }
    /**
     * The score indicating the pronunciation accuracy of the given speech, which indicates
     * how closely the phonemes match a native speaker's pronunciation.
     * @member PronunciationAssessmentResult.prototype.accuracyScore
     * @function
     * @public
     * @returns {number} Accuracy score.
     */
    get accuracyScore() {
        return this.detailResult.PronunciationAssessment.AccuracyScore;
    }
    /**
     * The overall score indicating the pronunciation quality of the given speech.
     * This is calculated from AccuracyScore, FluencyScore and CompletenessScore with weight.
     * @member PronunciationAssessmentResult.prototype.pronunciationScore
     * @function
     * @public
     * @returns {number} Pronunciation score.
     */
    get pronunciationScore() {
        return this.detailResult.PronunciationAssessment.PronScore;
    }
    /**
     * The score indicating the completeness of the given speech by calculating the ratio of pronounced words towards entire input.
     * @member PronunciationAssessmentResult.prototype.completenessScore
     * @function
     * @public
     * @returns {number} Completeness score.
     */
    get completenessScore() {
        return this.detailResult.PronunciationAssessment.CompletenessScore;
    }
    /**
     * The score indicating the fluency of the given speech.
     * @member PronunciationAssessmentResult.prototype.fluencyScore
     * @function
     * @public
     * @returns {number} Fluency score.
     */
    get fluencyScore() {
        return this.detailResult.PronunciationAssessment.FluencyScore;
    }
}

//# sourceMappingURL=PronunciationAssessmentResult.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PropertyCollection": () => (/* binding */ PropertyCollection)
/* harmony export */ });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Represents collection of properties and their values.
 * @class PropertyCollection
 */
class PropertyCollection {
    constructor() {
        this.privKeys = [];
        this.privValues = [];
    }
    /**
     * Returns the property value in type String.
     * Currently only String, int and bool are allowed.
     * If the name is not available, the specified defaultValue is returned.
     * @member PropertyCollection.prototype.getProperty
     * @function
     * @public
     * @param {string} key - The parameter name.
     * @param {string | number | boolean} def - The default value which is returned if the parameter
     * is not available in the collection.
     * @returns {string} value of the parameter.
     */
    getProperty(key, def) {
        let keyToUse;
        if (typeof key === "string") {
            keyToUse = key;
        }
        else {
            keyToUse = _Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyId[key];
        }
        for (let n = 0; n < this.privKeys.length; n++) {
            if (this.privKeys[n] === keyToUse) {
                return this.privValues[n];
            }
        }
        if (def === undefined) {
            return undefined;
        }
        return String(def);
    }
    /**
     * Sets the String value of the parameter specified by name.
     * @member PropertyCollection.prototype.setProperty
     * @function
     * @public
     * @param {string} key - The parameter name.
     * @param {string} value - The value of the parameter.
     */
    setProperty(key, value) {
        let keyToUse;
        if (typeof key === "string") {
            keyToUse = key;
        }
        else {
            keyToUse = _Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyId[key];
        }
        for (let n = 0; n < this.privKeys.length; n++) {
            if (this.privKeys[n] === keyToUse) {
                this.privValues[n] = value;
                return;
            }
        }
        this.privKeys.push(keyToUse);
        this.privValues.push(value);
    }
    /**
     * Clones the collection.
     * @member PropertyCollection.prototype.clone
     * @function
     * @public
     * @returns {PropertyCollection} A copy of the collection.
     */
    clone() {
        const clonedMap = new PropertyCollection();
        for (let n = 0; n < this.privKeys.length; n++) {
            clonedMap.privKeys.push(this.privKeys[n]);
            clonedMap.privValues.push(this.privValues[n]);
        }
        return clonedMap;
    }
    /**
     * Merges this set of properties into another, no overwrites.
     * @member PropertyCollection.prototype.mergeTo
     * @function
     * @public
     * @param {PropertyCollection}  destinationCollection - The collection to merge into.
     */
    mergeTo(destinationCollection) {
        this.privKeys.forEach((key) => {
            if (destinationCollection.getProperty(key, undefined) === undefined) {
                const value = this.getProperty(key);
                destinationCollection.setProperty(key, value);
            }
        });
    }
    /**
     * Get the keys in Property Collection.
     * @member PropertyCollection.prototype.keys
     * @function
     * @public
     * @returns {string []} Keys in the collection.
     */
    get keys() {
        return this.privKeys;
    }
}

//# sourceMappingURL=PropertyCollection.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PropertyId": () => (/* binding */ PropertyId)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Defines speech property ids.
 * @class PropertyId
 */
var PropertyId;
(function (PropertyId) {
    /**
     * The Cognitive Services Speech Service subscription Key. If you are using an intent recognizer, you need to
     * specify the LUIS endpoint key for your particular LUIS app. Under normal circumstances, you shouldn't
     * have to use this property directly.
     * Instead, use [[SpeechConfig.fromSubscription]].
     * @member PropertyId.SpeechServiceConnection_Key
     */
    PropertyId[PropertyId["SpeechServiceConnection_Key"] = 0] = "SpeechServiceConnection_Key";
    /**
     * The Cognitive Services Speech Service endpoint (url). Under normal circumstances, you shouldn't
     * have to use this property directly.
     * Instead, use [[SpeechConfig.fromEndpoint]].
     * NOTE: This endpoint is not the same as the endpoint used to obtain an access token.
     * @member PropertyId.SpeechServiceConnection_Endpoint
     */
    PropertyId[PropertyId["SpeechServiceConnection_Endpoint"] = 1] = "SpeechServiceConnection_Endpoint";
    /**
     * The Cognitive Services Speech Service region. Under normal circumstances, you shouldn't have to
     * use this property directly.
     * Instead, use [[SpeechConfig.fromSubscription]], [[SpeechConfig.fromEndpoint]], [[SpeechConfig.fromAuthorizationToken]].
     * @member PropertyId.SpeechServiceConnection_Region
     */
    PropertyId[PropertyId["SpeechServiceConnection_Region"] = 2] = "SpeechServiceConnection_Region";
    /**
     * The Cognitive Services Speech Service authorization token (aka access token). Under normal circumstances,
     * you shouldn't have to use this property directly.
     * Instead, use [[SpeechConfig.fromAuthorizationToken]], [[SpeechRecognizer.authorizationToken]],
     * [[IntentRecognizer.authorizationToken]], [[TranslationRecognizer.authorizationToken]], [[SpeakerRecognizer.authorizationToken]].
     * @member PropertyId.SpeechServiceAuthorization_Token
     */
    PropertyId[PropertyId["SpeechServiceAuthorization_Token"] = 3] = "SpeechServiceAuthorization_Token";
    /**
     * The Cognitive Services Speech Service authorization type. Currently unused.
     * @member PropertyId.SpeechServiceAuthorization_Type
     */
    PropertyId[PropertyId["SpeechServiceAuthorization_Type"] = 4] = "SpeechServiceAuthorization_Type";
    /**
     * The Cognitive Services Speech Service endpoint id. Under normal circumstances, you shouldn't
     * have to use this property directly.
     * Instead, use [[SpeechConfig.endpointId]].
     * NOTE: The endpoint id is available in the Speech Portal, listed under Endpoint Details.
     * @member PropertyId.SpeechServiceConnection_EndpointId
     */
    PropertyId[PropertyId["SpeechServiceConnection_EndpointId"] = 5] = "SpeechServiceConnection_EndpointId";
    /**
     * The list of comma separated languages (BCP-47 format) used as target translation languages. Under normal circumstances,
     * you shouldn't have to use this property directly.
     * Instead use [[SpeechTranslationConfig.addTargetLanguage]],
     * [[SpeechTranslationConfig.targetLanguages]], [[TranslationRecognizer.targetLanguages]].
     * @member PropertyId.SpeechServiceConnection_TranslationToLanguages
     */
    PropertyId[PropertyId["SpeechServiceConnection_TranslationToLanguages"] = 6] = "SpeechServiceConnection_TranslationToLanguages";
    /**
     * The name of the Cognitive Service Text to Speech Service Voice. Under normal circumstances, you shouldn't have to use this
     * property directly.
     * Instead, use [[SpeechTranslationConfig.voiceName]].
     * NOTE: Valid voice names can be found <a href="https://aka.ms/csspeech/voicenames">here</a>.
     * @member PropertyId.SpeechServiceConnection_TranslationVoice
     */
    PropertyId[PropertyId["SpeechServiceConnection_TranslationVoice"] = 7] = "SpeechServiceConnection_TranslationVoice";
    /**
     * Translation features.
     * @member PropertyId.SpeechServiceConnection_TranslationFeatures
     */
    PropertyId[PropertyId["SpeechServiceConnection_TranslationFeatures"] = 8] = "SpeechServiceConnection_TranslationFeatures";
    /**
     * The Language Understanding Service Region. Under normal circumstances, you shouldn't have to use this property directly.
     * Instead, use [[LanguageUnderstandingModel]].
     * @member PropertyId.SpeechServiceConnection_IntentRegion
     */
    PropertyId[PropertyId["SpeechServiceConnection_IntentRegion"] = 9] = "SpeechServiceConnection_IntentRegion";
    /**
     * The host name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.
     * You shouldn't have to use this property directly.
     * Instead use <see cref="SpeechConfig.SetProxy(string,int,string,string)"/>.
     * Added in version 1.4.0.
     */
    PropertyId[PropertyId["SpeechServiceConnection_ProxyHostName"] = 10] = "SpeechServiceConnection_ProxyHostName";
    /**
     * The port of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.
     * You shouldn't have to use this property directly.
     * Instead use <see cref="SpeechConfig.SetProxy(string,int,string,string)"/>.
     * Added in version 1.4.0.
     */
    PropertyId[PropertyId["SpeechServiceConnection_ProxyPort"] = 11] = "SpeechServiceConnection_ProxyPort";
    /**
     * The user name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.
     * You shouldn't have to use this property directly.
     * Instead use <see cref="SpeechConfig.SetProxy(string,int,string,string)"/>.
     * Added in version 1.4.0.
     */
    PropertyId[PropertyId["SpeechServiceConnection_ProxyUserName"] = 12] = "SpeechServiceConnection_ProxyUserName";
    /**
     * The password of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.
     * You shouldn't have to use this property directly.
     * Instead use <see cref="SpeechConfig.SetProxy(string,int,string,string)"/>.
     * Added in version 1.4.0.
     */
    PropertyId[PropertyId["SpeechServiceConnection_ProxyPassword"] = 13] = "SpeechServiceConnection_ProxyPassword";
    /**
     * The Cognitive Services Speech Service recognition Mode. Can be "INTERACTIVE", "CONVERSATION", "DICTATION".
     * This property is intended to be read-only. The SDK is using it internally.
     * @member PropertyId.SpeechServiceConnection_RecoMode
     */
    PropertyId[PropertyId["SpeechServiceConnection_RecoMode"] = 14] = "SpeechServiceConnection_RecoMode";
    /**
     * The spoken language to be recognized (in BCP-47 format). Under normal circumstances, you shouldn't have to use this property
     * directly.
     * Instead, use [[SpeechConfig.speechRecognitionLanguage]].
     * @member PropertyId.SpeechServiceConnection_RecoLanguage
     */
    PropertyId[PropertyId["SpeechServiceConnection_RecoLanguage"] = 15] = "SpeechServiceConnection_RecoLanguage";
    /**
     * The session id. This id is a universally unique identifier (aka UUID) representing a specific binding of an audio input stream
     * and the underlying speech recognition instance to which it is bound. Under normal circumstances, you shouldn't have to use this
     * property directly.
     * Instead use [[SessionEventArgs.sessionId]].
     * @member PropertyId.Speech_SessionId
     */
    PropertyId[PropertyId["Speech_SessionId"] = 16] = "Speech_SessionId";
    /**
     * The spoken language to be synthesized (e.g. en-US)
     * @member PropertyId.SpeechServiceConnection_SynthLanguage
     */
    PropertyId[PropertyId["SpeechServiceConnection_SynthLanguage"] = 17] = "SpeechServiceConnection_SynthLanguage";
    /**
     * The name of the TTS voice to be used for speech synthesis
     * @member PropertyId.SpeechServiceConnection_SynthVoice
     */
    PropertyId[PropertyId["SpeechServiceConnection_SynthVoice"] = 18] = "SpeechServiceConnection_SynthVoice";
    /**
     * The string to specify TTS output audio format
     * @member PropertyId.SpeechServiceConnection_SynthOutputFormat
     */
    PropertyId[PropertyId["SpeechServiceConnection_SynthOutputFormat"] = 19] = "SpeechServiceConnection_SynthOutputFormat";
    /**
     * The list of comma separated languages used as possible source languages
     * Added in version 1.13.0
     * @member PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages
     */
    PropertyId[PropertyId["SpeechServiceConnection_AutoDetectSourceLanguages"] = 20] = "SpeechServiceConnection_AutoDetectSourceLanguages";
    /**
     * The requested Cognitive Services Speech Service response output format (simple or detailed). Under normal circumstances, you shouldn't have
     * to use this property directly.
     * Instead use [[SpeechConfig.outputFormat]].
     * @member PropertyId.SpeechServiceResponse_RequestDetailedResultTrueFalse
     */
    PropertyId[PropertyId["SpeechServiceResponse_RequestDetailedResultTrueFalse"] = 21] = "SpeechServiceResponse_RequestDetailedResultTrueFalse";
    /**
     * The requested Cognitive Services Speech Service response output profanity level. Currently unused.
     * @member PropertyId.SpeechServiceResponse_RequestProfanityFilterTrueFalse
     */
    PropertyId[PropertyId["SpeechServiceResponse_RequestProfanityFilterTrueFalse"] = 22] = "SpeechServiceResponse_RequestProfanityFilterTrueFalse";
    /**
     * The Cognitive Services Speech Service response output (in JSON format). This property is available on recognition result objects only.
     * @member PropertyId.SpeechServiceResponse_JsonResult
     */
    PropertyId[PropertyId["SpeechServiceResponse_JsonResult"] = 23] = "SpeechServiceResponse_JsonResult";
    /**
     * The Cognitive Services Speech Service error details (in JSON format). Under normal circumstances, you shouldn't have to
     * use this property directly. Instead use [[CancellationDetails.errorDetails]].
     * @member PropertyId.SpeechServiceResponse_JsonErrorDetails
     */
    PropertyId[PropertyId["SpeechServiceResponse_JsonErrorDetails"] = 24] = "SpeechServiceResponse_JsonErrorDetails";
    /**
     * The cancellation reason. Currently unused.
     * @member PropertyId.CancellationDetails_Reason
     */
    PropertyId[PropertyId["CancellationDetails_Reason"] = 25] = "CancellationDetails_Reason";
    /**
     * The cancellation text. Currently unused.
     * @member PropertyId.CancellationDetails_ReasonText
     */
    PropertyId[PropertyId["CancellationDetails_ReasonText"] = 26] = "CancellationDetails_ReasonText";
    /**
     * The Cancellation detailed text. Currently unused.
     * @member PropertyId.CancellationDetails_ReasonDetailedText
     */
    PropertyId[PropertyId["CancellationDetails_ReasonDetailedText"] = 27] = "CancellationDetails_ReasonDetailedText";
    /**
     * The Language Understanding Service response output (in JSON format). Available via [[IntentRecognitionResult]]
     * @member PropertyId.LanguageUnderstandingServiceResponse_JsonResult
     */
    PropertyId[PropertyId["LanguageUnderstandingServiceResponse_JsonResult"] = 28] = "LanguageUnderstandingServiceResponse_JsonResult";
    /**
     * The URL string built from speech configuration.
     * This property is intended to be read-only. The SDK is using it internally.
     * NOTE: Added in version 1.7.0.
     */
    PropertyId[PropertyId["SpeechServiceConnection_Url"] = 29] = "SpeechServiceConnection_Url";
    /**
     * The initial silence timeout value (in milliseconds) used by the service.
     * Added in version 1.7.0
     */
    PropertyId[PropertyId["SpeechServiceConnection_InitialSilenceTimeoutMs"] = 30] = "SpeechServiceConnection_InitialSilenceTimeoutMs";
    /**
     * The end silence timeout value (in milliseconds) used by the service.
     * Added in version 1.7.0
     */
    PropertyId[PropertyId["SpeechServiceConnection_EndSilenceTimeoutMs"] = 31] = "SpeechServiceConnection_EndSilenceTimeoutMs";
    /**
     * A duration of detected silence, measured in milliseconds, after which speech-to-text will determine a spoken
     * phrase has ended and generate a final Recognized result. Configuring this timeout may be helpful in situations
     * where spoken input is significantly faster or slower than usual and default segmentation behavior consistently
     * yields results that are too long or too short. Segmentation timeout values that are inappropriately high or low
     * can negatively affect speech-to-text accuracy; this property should be carefully configured and the resulting
     * behavior should be thoroughly validated as intended.
     *
     * For more information about timeout configuration that includes discussion of default behaviors, please visit
     * https://aka.ms/csspeech/timeouts.
     *
     * Added in version 1.21.0.
     */
    PropertyId[PropertyId["Speech_SegmentationSilenceTimeoutMs"] = 32] = "Speech_SegmentationSilenceTimeoutMs";
    /**
     * A boolean value specifying whether audio logging is enabled in the service or not.
     * Audio and content logs are stored either in Microsoft-owned storage, or in your own storage account linked
     * to your Cognitive Services subscription (Bring Your Own Storage (BYOS) enabled Speech resource).
     * The logs will be removed after 30 days.
     * Added in version 1.7.0
     */
    PropertyId[PropertyId["SpeechServiceConnection_EnableAudioLogging"] = 33] = "SpeechServiceConnection_EnableAudioLogging";
    /**
     * The speech service connection language identifier mode.
     * Can be "AtStart" (the default), or "Continuous". See Language
     * Identification document https://aka.ms/speech/lid?pivots=programming-language-javascript
     * for more details.
     * Added in 1.25.0
     **/
    PropertyId[PropertyId["SpeechServiceConnection_LanguageIdMode"] = 34] = "SpeechServiceConnection_LanguageIdMode";
    /**
     * A string value representing the desired endpoint version to target for Speech Recognition.
     * Added in version 1.21.0
     */
    PropertyId[PropertyId["SpeechServiceConnection_RecognitionEndpointVersion"] = 35] = "SpeechServiceConnection_RecognitionEndpointVersion";
    /**
    /**
     * A string value the current speaker recognition scenario/mode (TextIndependentIdentification, etc.).
     * Added in version 1.23.0
     */
    PropertyId[PropertyId["SpeechServiceConnection_SpeakerIdMode"] = 36] = "SpeechServiceConnection_SpeakerIdMode";
    /**
     * The requested Cognitive Services Speech Service response output profanity setting.
     * Allowed values are "masked", "removed", and "raw".
     * Added in version 1.7.0.
     */
    PropertyId[PropertyId["SpeechServiceResponse_ProfanityOption"] = 37] = "SpeechServiceResponse_ProfanityOption";
    /**
     * A string value specifying which post processing option should be used by service.
     * Allowed values are "TrueText".
     * Added in version 1.7.0
     */
    PropertyId[PropertyId["SpeechServiceResponse_PostProcessingOption"] = 38] = "SpeechServiceResponse_PostProcessingOption";
    /**
     * A boolean value specifying whether to include word-level timestamps in the response result.
     * Added in version 1.7.0
     */
    PropertyId[PropertyId["SpeechServiceResponse_RequestWordLevelTimestamps"] = 39] = "SpeechServiceResponse_RequestWordLevelTimestamps";
    /**
     * The number of times a word has to be in partial results to be returned.
     * Added in version 1.7.0
     */
    PropertyId[PropertyId["SpeechServiceResponse_StablePartialResultThreshold"] = 40] = "SpeechServiceResponse_StablePartialResultThreshold";
    /**
     * A string value specifying the output format option in the response result. Internal use only.
     * Added in version 1.7.0.
     */
    PropertyId[PropertyId["SpeechServiceResponse_OutputFormatOption"] = 41] = "SpeechServiceResponse_OutputFormatOption";
    /**
     * A boolean value to request for stabilizing translation partial results by omitting words in the end.
     * Added in version 1.7.0.
     */
    PropertyId[PropertyId["SpeechServiceResponse_TranslationRequestStablePartialResult"] = 42] = "SpeechServiceResponse_TranslationRequestStablePartialResult";
    /**
     * A boolean value specifying whether to request WordBoundary events.
     * @member PropertyId.SpeechServiceResponse_RequestWordBoundary
     * Added in version 1.21.0.
     */
    PropertyId[PropertyId["SpeechServiceResponse_RequestWordBoundary"] = 43] = "SpeechServiceResponse_RequestWordBoundary";
    /**
     * A boolean value specifying whether to request punctuation boundary in WordBoundary Events. Default is true.
     * @member PropertyId.SpeechServiceResponse_RequestPunctuationBoundary
     * Added in version 1.21.0.
     */
    PropertyId[PropertyId["SpeechServiceResponse_RequestPunctuationBoundary"] = 44] = "SpeechServiceResponse_RequestPunctuationBoundary";
    /**
     * A boolean value specifying whether to request sentence boundary in WordBoundary Events. Default is false.
     * @member PropertyId.SpeechServiceResponse_RequestSentenceBoundary
     * Added in version 1.21.0.
     */
    PropertyId[PropertyId["SpeechServiceResponse_RequestSentenceBoundary"] = 45] = "SpeechServiceResponse_RequestSentenceBoundary";
    /**
     * Identifier used to connect to the backend service.
     * @member PropertyId.Conversation_ApplicationId
     */
    PropertyId[PropertyId["Conversation_ApplicationId"] = 46] = "Conversation_ApplicationId";
    /**
     * Type of dialog backend to connect to.
     * @member PropertyId.Conversation_DialogType
     */
    PropertyId[PropertyId["Conversation_DialogType"] = 47] = "Conversation_DialogType";
    /**
     * Silence timeout for listening
     * @member PropertyId.Conversation_Initial_Silence_Timeout
     */
    PropertyId[PropertyId["Conversation_Initial_Silence_Timeout"] = 48] = "Conversation_Initial_Silence_Timeout";
    /**
     * From Id to add to speech recognition activities.
     * @member PropertyId.Conversation_From_Id
     */
    PropertyId[PropertyId["Conversation_From_Id"] = 49] = "Conversation_From_Id";
    /**
     * ConversationId for the session.
     * @member PropertyId.Conversation_Conversation_Id
     */
    PropertyId[PropertyId["Conversation_Conversation_Id"] = 50] = "Conversation_Conversation_Id";
    /**
     * Comma separated list of custom voice deployment ids.
     * @member PropertyId.Conversation_Custom_Voice_Deployment_Ids
     */
    PropertyId[PropertyId["Conversation_Custom_Voice_Deployment_Ids"] = 51] = "Conversation_Custom_Voice_Deployment_Ids";
    /**
     * Speech activity template, stamp properties from the template on the activity generated by the service for speech.
     * @member PropertyId.Conversation_Speech_Activity_Template
     * Added in version 1.10.0.
     */
    PropertyId[PropertyId["Conversation_Speech_Activity_Template"] = 52] = "Conversation_Speech_Activity_Template";
    /**
     * Enables or disables the receipt of turn status messages as obtained on the turnStatusReceived event.
     * @member PropertyId.Conversation_Request_Bot_Status_Messages
     * Added in version 1.15.0.
     */
    PropertyId[PropertyId["Conversation_Request_Bot_Status_Messages"] = 53] = "Conversation_Request_Bot_Status_Messages";
    /**
     * Specifies the connection ID to be provided in the Agent configuration message, e.g. a Direct Line token for
     * channel authentication.
     * Added in version 1.15.1.
     */
    PropertyId[PropertyId["Conversation_Agent_Connection_Id"] = 54] = "Conversation_Agent_Connection_Id";
    /**
     * The Cognitive Services Speech Service host (url). Under normal circumstances, you shouldn't have to use this property directly.
     * Instead, use [[SpeechConfig.fromHost]].
     */
    PropertyId[PropertyId["SpeechServiceConnection_Host"] = 55] = "SpeechServiceConnection_Host";
    /**
     * Set the host for service calls to the Conversation Translator REST management and websocket calls.
     */
    PropertyId[PropertyId["ConversationTranslator_Host"] = 56] = "ConversationTranslator_Host";
    /**
     * Optionally set the the host's display name.
     * Used when joining a conversation.
     */
    PropertyId[PropertyId["ConversationTranslator_Name"] = 57] = "ConversationTranslator_Name";
    /**
     * Optionally set a value for the X-CorrelationId request header.
     * Used for troubleshooting errors in the server logs. It should be a valid guid.
     */
    PropertyId[PropertyId["ConversationTranslator_CorrelationId"] = 58] = "ConversationTranslator_CorrelationId";
    /**
     * Set the conversation token to be sent to the speech service. This enables the
     * service to service call from the speech service to the Conversation Translator service for relaying
     * recognitions. For internal use.
     */
    PropertyId[PropertyId["ConversationTranslator_Token"] = 59] = "ConversationTranslator_Token";
    /**
     * The reference text of the audio for pronunciation evaluation.
     * For this and the following pronunciation assessment parameters, see
     * https://docs.microsoft.com/azure/cognitive-services/speech-service/rest-speech-to-text#pronunciation-assessment-parameters for details.
     * Under normal circumstances, you shouldn't have to use this property directly.
     * Added in version 1.15.0
     */
    PropertyId[PropertyId["PronunciationAssessment_ReferenceText"] = 60] = "PronunciationAssessment_ReferenceText";
    /**
     * The point system for pronunciation score calibration (FivePoint or HundredMark).
     * Under normal circumstances, you shouldn't have to use this property directly.
     * Added in version 1.15.0
     */
    PropertyId[PropertyId["PronunciationAssessment_GradingSystem"] = 61] = "PronunciationAssessment_GradingSystem";
    /**
     * The pronunciation evaluation granularity (Phoneme, Word, or FullText).
     * Under normal circumstances, you shouldn't have to use this property directly.
     * Added in version 1.15.0
     */
    PropertyId[PropertyId["PronunciationAssessment_Granularity"] = 62] = "PronunciationAssessment_Granularity";
    /**
     * Defines if enable miscue calculation.
     * With this enabled, the pronounced words will be compared to the reference text,
     * and will be marked with omission/insertion based on the comparison. The default setting is False.
     * Under normal circumstances, you shouldn't have to use this property directly.
     * Added in version 1.15.0
     */
    PropertyId[PropertyId["PronunciationAssessment_EnableMiscue"] = 63] = "PronunciationAssessment_EnableMiscue";
    /**
     * The json string of pronunciation assessment parameters
     * Under normal circumstances, you shouldn't have to use this property directly.
     * Added in version 1.15.0
     */
    PropertyId[PropertyId["PronunciationAssessment_Json"] = 64] = "PronunciationAssessment_Json";
    /**
     * Pronunciation assessment parameters.
     * This property is intended to be read-only. The SDK is using it internally.
     * Added in version 1.15.0
     */
    PropertyId[PropertyId["PronunciationAssessment_Params"] = 65] = "PronunciationAssessment_Params";
    /**
     * Version of Speaker Recognition API to use.
     * Added in version 1.18.0
     */
    PropertyId[PropertyId["SpeakerRecognition_Api_Version"] = 66] = "SpeakerRecognition_Api_Version";
})(PropertyId || (PropertyId = {}));

//# sourceMappingURL=PropertyId.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/RecognitionEventArgs.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/RecognitionEventArgs.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RecognitionEventArgs": () => (/* binding */ RecognitionEventArgs)
/* harmony export */ });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SessionEventArgs.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Defines payload for session events like Speech Start/End Detected
 * @class
 */
class RecognitionEventArgs extends _Exports__WEBPACK_IMPORTED_MODULE_0__.SessionEventArgs {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {number} offset - The offset.
     * @param {string} sessionId - The session id.
     */
    constructor(offset, sessionId) {
        super(sessionId);
        this.privOffset = offset;
    }
    /**
     * Represents the message offset
     * @member RecognitionEventArgs.prototype.offset
     * @function
     * @public
     */
    get offset() {
        return this.privOffset;
    }
}

//# sourceMappingURL=RecognitionEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/RecognitionResult.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/RecognitionResult.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RecognitionResult": () => (/* binding */ RecognitionResult)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Defines result of speech recognition.
 * @class RecognitionResult
 */
class RecognitionResult {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {string} resultId - The result id.
     * @param {ResultReason} reason - The reason.
     * @param {string} text - The recognized text.
     * @param {number} duration - The duration.
     * @param {number} offset - The offset into the stream.
     * @param {string} language - Primary Language detected, if provided.
     * @param {string} languageDetectionConfidence - Primary Language confidence ("Unknown," "Low," "Medium," "High"...), if provided.
     * @param {string} errorDetails - Error details, if provided.
     * @param {string} json - Additional Json, if provided.
     * @param {PropertyCollection} properties - Additional properties, if provided.
     */
    constructor(resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties) {
        this.privResultId = resultId;
        this.privReason = reason;
        this.privText = text;
        this.privDuration = duration;
        this.privOffset = offset;
        this.privLanguage = language;
        this.privLanguageDetectionConfidence = languageDetectionConfidence;
        this.privErrorDetails = errorDetails;
        this.privJson = json;
        this.privProperties = properties;
    }
    /**
     * Specifies the result identifier.
     * @member RecognitionResult.prototype.resultId
     * @function
     * @public
     * @returns {string} Specifies the result identifier.
     */
    get resultId() {
        return this.privResultId;
    }
    /**
     * Specifies status of the result.
     * @member RecognitionResult.prototype.reason
     * @function
     * @public
     * @returns {ResultReason} Specifies status of the result.
     */
    get reason() {
        return this.privReason;
    }
    /**
     * Presents the recognized text in the result.
     * @member RecognitionResult.prototype.text
     * @function
     * @public
     * @returns {string} Presents the recognized text in the result.
     */
    get text() {
        return this.privText;
    }
    /**
     * Duration of recognized speech in 100 nano second increments.
     * @member RecognitionResult.prototype.duration
     * @function
     * @public
     * @returns {number} Duration of recognized speech in 100 nano second increments.
     */
    get duration() {
        return this.privDuration;
    }
    /**
     * Offset of recognized speech in 100 nano second increments.
     * @member RecognitionResult.prototype.offset
     * @function
     * @public
     * @returns {number} Offset of recognized speech in 100 nano second increments.
     */
    get offset() {
        return this.privOffset;
    }
    /**
     * Primary Language detected.
     * @member RecognitionResult.prototype.language
     * @function
     * @public
     * @returns {string} language detected.
     */
    get language() {
        return this.privLanguage;
    }
    /**
     * Primary Language detection confidence (Unknown, Low, Medium, High).
     * @member RecognitionResult.prototype.languageDetectionConfidence
     * @function
     * @public
     * @returns {string} detection confidence strength.
     */
    get languageDetectionConfidence() {
        return this.privLanguageDetectionConfidence;
    }
    /**
     * In case of an unsuccessful recognition, provides details of the occurred error.
     * @member RecognitionResult.prototype.errorDetails
     * @function
     * @public
     * @returns {string} a brief description of an error.
     */
    get errorDetails() {
        return this.privErrorDetails;
    }
    /**
     * A string containing Json serialized recognition result as it was received from the service.
     * @member RecognitionResult.prototype.json
     * @function
     * @private
     * @returns {string} Json serialized representation of the result.
     */
    get json() {
        return this.privJson;
    }
    /**
     * The set of properties exposed in the result.
     * @member RecognitionResult.prototype.properties
     * @function
     * @public
     * @returns {PropertyCollection} The set of properties exposed in the result.
     */
    get properties() {
        return this.privProperties;
    }
}

//# sourceMappingURL=RecognitionResult.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Recognizer.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Recognizer.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Recognizer": () => (/* binding */ Recognizer)
/* harmony export */ });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceRecognizerBase.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognizerConfig.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/CognitiveSubscriptionKeyAuthentication.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/CognitiveTokenAuthentication.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js");
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioConfig.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




/**
 * Defines the base class Recognizer which mainly contains common event handlers.
 * @class Recognizer
 */
class Recognizer {
    /**
     * Creates and initializes an instance of a Recognizer
     * @constructor
     * @param {AudioConfig} audioInput - An optional audio input stream associated with the recognizer
     */
    constructor(audioConfig, properties, connectionFactory) {
        this.audioConfig = (audioConfig !== undefined) ? audioConfig : _Exports__WEBPACK_IMPORTED_MODULE_0__.AudioConfig.fromDefaultMicrophoneInput();
        this.privDisposed = false;
        this.privProperties = properties.clone();
        this.privConnectionFactory = connectionFactory;
        this.implCommonRecognizerSetup();
    }
    /**
     * Dispose of associated resources.
     * @member Recognizer.prototype.close
     * @function
     * @public
     */
    close(cb, errorCb) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfDisposed(this.privDisposed);
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_2__.marshalPromiseToCallbacks)(this.dispose(true), cb, errorCb);
    }
    /**
     * @Internal
     * Internal data member to support fromRecognizer* pattern methods on other classes.
     * Do not use externally, object returned will change without warning or notice.
     */
    get internalData() {
        return this.privReco;
    }
    /**
     * This method performs cleanup of resources.
     * The Boolean parameter disposing indicates whether the method is called
     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).
     * Derived classes should override this method to dispose resource if needed.
     * @member Recognizer.prototype.dispose
     * @function
     * @public
     * @param {boolean} disposing - Flag to request disposal.
     */
    dispose(disposing) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.privDisposed) {
                return;
            }
            this.privDisposed = true;
            if (disposing) {
                if (this.privReco) {
                    yield this.privReco.audioSource.turnOff();
                    yield this.privReco.dispose();
                }
            }
        });
    }
    /**
     * This method returns the current state of the telemetry setting.
     * @member Recognizer.prototype.telemetryEnabled
     * @function
     * @public
     * @returns true if the telemetry is enabled, false otherwise.
     */
    static get telemetryEnabled() {
        return _common_speech_Exports__WEBPACK_IMPORTED_MODULE_3__.ServiceRecognizerBase.telemetryDataEnabled;
    }
    /**
     * This method globally enables or disables telemetry.
     * @member Recognizer.prototype.enableTelemetry
     * @function
     * @public
     * @param enabled - Global setting for telemetry collection.
     * If set to true, telemetry information like microphone errors,
     * recognition errors are collected and sent to Microsoft.
     * If set to false, no telemetry is sent to Microsoft.
     */
    static enableTelemetry(enabled) {
        _common_speech_Exports__WEBPACK_IMPORTED_MODULE_3__.ServiceRecognizerBase.telemetryDataEnabled = enabled;
    }
    // Does the generic recognizer setup that is common across all recognizer types.
    implCommonRecognizerSetup() {
        let osPlatform = (typeof window !== "undefined") ? "Browser" : "Node";
        let osName = "unknown";
        let osVersion = "unknown";
        if (typeof navigator !== "undefined") {
            osPlatform = osPlatform + "/" + navigator.platform;
            osName = navigator.userAgent;
            osVersion = navigator.appVersion;
        }
        const recognizerConfig = this.createRecognizerConfig(new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.SpeechServiceConfig(new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.Context(new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.OS(osPlatform, osName, osVersion))));
        this.privReco = this.createServiceRecognizer(Recognizer.getAuthFromProperties(this.privProperties), this.privConnectionFactory, this.audioConfig, recognizerConfig);
    }
    recognizeOnceAsyncImpl(recognitionMode) {
        return __awaiter(this, void 0, void 0, function* () {
            _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfDisposed(this.privDisposed);
            const ret = new _common_Exports__WEBPACK_IMPORTED_MODULE_2__.Deferred();
            yield this.implRecognizerStop();
            yield this.privReco.recognize(recognitionMode, ret.resolve, ret.reject);
            const result = yield ret.promise;
            yield this.implRecognizerStop();
            return result;
        });
    }
    startContinuousRecognitionAsyncImpl(recognitionMode) {
        return __awaiter(this, void 0, void 0, function* () {
            _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfDisposed(this.privDisposed);
            yield this.implRecognizerStop();
            yield this.privReco.recognize(recognitionMode, undefined, undefined);
        });
    }
    stopContinuousRecognitionAsyncImpl() {
        return __awaiter(this, void 0, void 0, function* () {
            _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfDisposed(this.privDisposed);
            yield this.implRecognizerStop();
        });
    }
    implRecognizerStop() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.privReco) {
                yield this.privReco.stopRecognizing();
            }
            return;
        });
    }
    static getAuthFromProperties(properties) {
        const subscriptionKey = properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_5__.PropertyId.SpeechServiceConnection_Key, undefined);
        const authentication = (subscriptionKey && subscriptionKey !== "") ?
            new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_6__.CognitiveSubscriptionKeyAuthentication(subscriptionKey) :
            new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_7__.CognitiveTokenAuthentication(() => {
                const authorizationToken = properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_5__.PropertyId.SpeechServiceAuthorization_Token, undefined);
                return Promise.resolve(authorizationToken);
            }, () => {
                const authorizationToken = properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_5__.PropertyId.SpeechServiceAuthorization_Token, undefined);
                return Promise.resolve(authorizationToken);
            });
        return authentication;
    }
}

//# sourceMappingURL=Recognizer.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ResultReason.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ResultReason.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ResultReason": () => (/* binding */ ResultReason)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Defines the possible reasons a recognition result might be generated.
 * @class ResultReason
 */
var ResultReason;
(function (ResultReason) {
    /**
     * Indicates speech could not be recognized. More details
     * can be found in the NoMatchDetails object.
     * @member ResultReason.NoMatch
     */
    ResultReason[ResultReason["NoMatch"] = 0] = "NoMatch";
    /**
     * Indicates that the recognition was canceled. More details
     * can be found using the CancellationDetails object.
     * @member ResultReason.Canceled
     */
    ResultReason[ResultReason["Canceled"] = 1] = "Canceled";
    /**
     * Indicates the speech result contains hypothesis text.
     * @member ResultReason.RecognizedSpeech
     */
    ResultReason[ResultReason["RecognizingSpeech"] = 2] = "RecognizingSpeech";
    /**
     * Indicates the speech result contains final text that has been recognized.
     * Speech Recognition is now complete for this phrase.
     * @member ResultReason.RecognizedSpeech
     */
    ResultReason[ResultReason["RecognizedSpeech"] = 3] = "RecognizedSpeech";
    /**
     * Indicates the speech result contains a finalized acceptance of a provided keyword.
     * Speech recognition will continue unless otherwise configured.
     * @member ResultReason.RecognizedKeyword
     */
    ResultReason[ResultReason["RecognizedKeyword"] = 4] = "RecognizedKeyword";
    /**
     * Indicates the intent result contains hypothesis text and intent.
     * @member ResultReason.RecognizingIntent
     */
    ResultReason[ResultReason["RecognizingIntent"] = 5] = "RecognizingIntent";
    /**
     * Indicates the intent result contains final text and intent.
     * Speech Recognition and Intent determination are now complete for this phrase.
     * @member ResultReason.RecognizedIntent
     */
    ResultReason[ResultReason["RecognizedIntent"] = 6] = "RecognizedIntent";
    /**
     * Indicates the translation result contains hypothesis text and its translation(s).
     * @member ResultReason.TranslatingSpeech
     */
    ResultReason[ResultReason["TranslatingSpeech"] = 7] = "TranslatingSpeech";
    /**
     * Indicates the translation result contains final text and corresponding translation(s).
     * Speech Recognition and Translation are now complete for this phrase.
     * @member ResultReason.TranslatedSpeech
     */
    ResultReason[ResultReason["TranslatedSpeech"] = 8] = "TranslatedSpeech";
    /**
     * Indicates the synthesized audio result contains a non-zero amount of audio data
     * @member ResultReason.SynthesizingAudio
     */
    ResultReason[ResultReason["SynthesizingAudio"] = 9] = "SynthesizingAudio";
    /**
     * Indicates the synthesized audio is now complete for this phrase.
     * @member ResultReason.SynthesizingAudioCompleted
     */
    ResultReason[ResultReason["SynthesizingAudioCompleted"] = 10] = "SynthesizingAudioCompleted";
    /**
     * Indicates the speech synthesis is now started
     * @member ResultReason.SynthesizingAudioStarted
     */
    ResultReason[ResultReason["SynthesizingAudioStarted"] = 11] = "SynthesizingAudioStarted";
    /**
     * Indicates the voice profile is being enrolled and customers need to send more audio to create a voice profile.
     * @member ResultReason.EnrollingVoiceProfile
     */
    ResultReason[ResultReason["EnrollingVoiceProfile"] = 12] = "EnrollingVoiceProfile";
    /**
     * Indicates the voice profile has been enrolled.
     * @member ResultReason.EnrolledVoiceProfile
     */
    ResultReason[ResultReason["EnrolledVoiceProfile"] = 13] = "EnrolledVoiceProfile";
    /**
     * Indicates successful identification of some speakers.
     * @member ResultReason.RecognizedSpeakers
     */
    ResultReason[ResultReason["RecognizedSpeakers"] = 14] = "RecognizedSpeakers";
    /**
     * Indicates successfully verified one speaker.
     * @member ResultReason.RecognizedSpeaker
     */
    ResultReason[ResultReason["RecognizedSpeaker"] = 15] = "RecognizedSpeaker";
    /**
     * Indicates a voice profile has been reset successfully.
     * @member ResultReason.ResetVoiceProfile
     */
    ResultReason[ResultReason["ResetVoiceProfile"] = 16] = "ResetVoiceProfile";
    /**
     * Indicates a voice profile has been deleted successfully.
     * @member ResultReason.DeletedVoiceProfile
     */
    ResultReason[ResultReason["DeletedVoiceProfile"] = 17] = "DeletedVoiceProfile";
    /**
     * Indicates synthesis voices list has been successfully retrieved.
     * @member ResultReason.VoicesListRetrieved
     */
    ResultReason[ResultReason["VoicesListRetrieved"] = 18] = "VoicesListRetrieved";
    /**
     * Indicates the transcription result contains hypothesis text and its translation(s) for
     * other participants in the conversation.
     * @member ResultReason.TranslatingParticipantSpeech
     */
    ResultReason[ResultReason["TranslatingParticipantSpeech"] = 19] = "TranslatingParticipantSpeech";
    /**
     * Indicates the transcription result contains final text and corresponding translation(s)
     * for other participants in the conversation. Speech Recognition and Translation are now
     * complete for this phrase.
     * @member ResultReason.TranslatedParticipantSpeech
     */
    ResultReason[ResultReason["TranslatedParticipantSpeech"] = 20] = "TranslatedParticipantSpeech";
    /**
     * <summary>
     * Indicates the transcription result contains the instant message and corresponding
     * translation(s).
     * @member ResultReason.TranslatedInstantMessage
     */
    ResultReason[ResultReason["TranslatedInstantMessage"] = 21] = "TranslatedInstantMessage";
    /**
     * Indicates the transcription result contains the instant message for other participants
     * in the conversation and corresponding translation(s).
     * @member ResultReason.TranslatedParticipantInstantMessage
     */
    ResultReason[ResultReason["TranslatedParticipantInstantMessage"] = 22] = "TranslatedParticipantInstantMessage";
})(ResultReason || (ResultReason = {}));

//# sourceMappingURL=ResultReason.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ServiceEventArgs.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ServiceEventArgs.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ServiceEventArgs": () => (/* binding */ ServiceEventArgs)
/* harmony export */ });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SessionEventArgs.js");
//
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.
//

/**
 * Defines payload for any Service message event
 * Added in version 1.9.0
 */
class ServiceEventArgs extends _Exports__WEBPACK_IMPORTED_MODULE_0__.SessionEventArgs {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {string} json - json payload of the USP message.
     */
    constructor(json, name, sessionId) {
        super(sessionId);
        this.privJsonResult = json;
        this.privEventName = name;
    }
    get jsonString() {
        return this.privJsonResult;
    }
    get eventName() {
        return this.privEventName;
    }
}

//# sourceMappingURL=ServiceEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ServicePropertyChannel.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ServicePropertyChannel.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ServicePropertyChannel": () => (/* binding */ ServicePropertyChannel)
/* harmony export */ });
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Defines channels used to pass property settings to service.
 * Added in version 1.7.0.
 */
var ServicePropertyChannel;
(function (ServicePropertyChannel) {
    /**
     * Uses URI query parameter to pass property settings to service.
     */
    ServicePropertyChannel[ServicePropertyChannel["UriQueryParameter"] = 0] = "UriQueryParameter";
})(ServicePropertyChannel || (ServicePropertyChannel = {}));

//# sourceMappingURL=ServicePropertyChannel.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SessionEventArgs.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SessionEventArgs.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SessionEventArgs": () => (/* binding */ SessionEventArgs)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Defines content for session events like SessionStarted/Stopped, SoundStarted/Stopped.
 * @class SessionEventArgs
 */
class SessionEventArgs {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {string} sessionId - The session id.
     */
    constructor(sessionId) {
        this.privSessionId = sessionId;
    }
    /**
     * Represents the session identifier.
     * @member SessionEventArgs.prototype.sessionId
     * @function
     * @public
     * @returns {string} Represents the session identifier.
     */
    get sessionId() {
        return this.privSessionId;
    }
}

//# sourceMappingURL=SessionEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SourceLanguageConfig.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SourceLanguageConfig.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SourceLanguageConfig": () => (/* binding */ SourceLanguageConfig)
/* harmony export */ });
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Source Language configuration.
 * @class SourceLanguageConfig
 */
class SourceLanguageConfig {
    constructor(language, endpointId) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrUndefined(language, "language");
        this.privLanguage = language;
        this.privEndpointId = endpointId;
    }
    /**
     * @member SourceLanguageConfig.fromLanguage
     * @function
     * @public
     * @param {string} language language (eg. "en-US") value of config.
     * @param {string?} endpointId endpointId of model bound to given language of config.
     * @return {SourceLanguageConfig} Instance of SourceLanguageConfig
     * @summary Creates an instance of the SourceLanguageConfig with the given language and optional endpointId.
     * Added in version 1.13.0.
     */
    static fromLanguage(language, endpointId) {
        return new SourceLanguageConfig(language, endpointId);
    }
    get language() {
        return this.privLanguage;
    }
    get endpointId() {
        return this.privEndpointId;
    }
}

//# sourceMappingURL=SourceLanguageConfig.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeakerIdentificationModel.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeakerIdentificationModel.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeakerIdentificationModel": () => (/* binding */ SpeakerIdentificationModel)
/* harmony export */ });
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceProfileType.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


/**
 * Defines SpeakerIdentificationModel class for Speaker Recognition
 * Model contains a set of profiles against which to identify speaker(s)
 * @class SpeakerIdentificationModel
 */
class SpeakerIdentificationModel {
    constructor(profiles) {
        this.privVoiceProfiles = [];
        this.privProfileIds = [];
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrUndefined(profiles, "VoiceProfiles");
        if (profiles.length === 0) {
            throw new Error("Empty Voice Profiles array");
        }
        for (const profile of profiles) {
            if (profile.profileType !== _Exports__WEBPACK_IMPORTED_MODULE_1__.VoiceProfileType.TextIndependentIdentification) {
                throw new Error("Identification model can only be created from Identification profile: " + profile.profileId);
            }
            this.privVoiceProfiles.push(profile);
            this.privProfileIds.push(profile.profileId);
        }
    }
    static fromProfiles(profiles) {
        return new SpeakerIdentificationModel(profiles);
    }
    get voiceProfileIds() {
        return this.privProfileIds.join(",");
    }
    get profileIds() {
        return this.privProfileIds;
    }
    get scenario() {
        return "TextIndependentIdentification";
    }
}

//# sourceMappingURL=SpeakerIdentificationModel.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeakerRecognitionResult.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeakerRecognitionResult.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeakerRecognitionCancellationDetails": () => (/* binding */ SpeakerRecognitionCancellationDetails),
/* harmony export */   "SpeakerRecognitionResult": () => (/* binding */ SpeakerRecognitionResult),
/* harmony export */   "SpeakerRecognitionResultType": () => (/* binding */ SpeakerRecognitionResultType)
/* harmony export */ });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ResultReason.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationErrorCodes.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationDetailsBase.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationReason.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/* eslint-disable max-classes-per-file */


var SpeakerRecognitionResultType;
(function (SpeakerRecognitionResultType) {
    SpeakerRecognitionResultType[SpeakerRecognitionResultType["Verify"] = 0] = "Verify";
    SpeakerRecognitionResultType[SpeakerRecognitionResultType["Identify"] = 1] = "Identify";
})(SpeakerRecognitionResultType || (SpeakerRecognitionResultType = {}));
/**
 * Output format
 * @class SpeakerRecognitionResult
 */
class SpeakerRecognitionResult {
    constructor(response, resultReason = _Exports__WEBPACK_IMPORTED_MODULE_0__.ResultReason.RecognizedSpeaker, cancellationErrorCode = _Exports__WEBPACK_IMPORTED_MODULE_1__.CancellationErrorCode.NoError, errorDetails = "") {
        this.privProperties = new _Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyCollection();
        const resultType = response.scenario === "TextIndependentIdentification" ? SpeakerRecognitionResultType.Identify : SpeakerRecognitionResultType.Verify;
        this.privReason = resultReason;
        if (this.privReason !== _Exports__WEBPACK_IMPORTED_MODULE_0__.ResultReason.Canceled) {
            if (resultType === SpeakerRecognitionResultType.Identify) {
                this.privProfileId = response.identificationResult.identifiedProfile.profileId;
                this.privScore = response.identificationResult.identifiedProfile.score;
                this.privReason = _Exports__WEBPACK_IMPORTED_MODULE_0__.ResultReason.RecognizedSpeakers;
            }
            else {
                this.privScore = response.verificationResult.score;
                if (response.verificationResult.recognitionResult.toLowerCase() !== "accept") {
                    this.privReason = _Exports__WEBPACK_IMPORTED_MODULE_0__.ResultReason.NoMatch;
                }
                if (response.verificationResult.profileId !== undefined && response.verificationResult.profileId !== "") {
                    this.privProfileId = response.verificationResult.profileId;
                }
            }
        }
        else {
            this.privErrorDetails = errorDetails;
            this.privProperties.setProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_3__.CancellationErrorCodePropertyName, _Exports__WEBPACK_IMPORTED_MODULE_1__.CancellationErrorCode[cancellationErrorCode]);
        }
        this.privProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.SpeechServiceResponse_JsonResult, JSON.stringify(response));
    }
    get properties() {
        return this.privProperties;
    }
    get reason() {
        return this.privReason;
    }
    get profileId() {
        return this.privProfileId;
    }
    get errorDetails() {
        return this.privErrorDetails;
    }
    get score() {
        return this.privScore;
    }
}
/**
 * @class SpeakerRecognitionCancellationDetails
 */
class SpeakerRecognitionCancellationDetails extends _Exports__WEBPACK_IMPORTED_MODULE_5__.CancellationDetailsBase {
    constructor(reason, errorDetails, errorCode) {
        super(reason, errorDetails, errorCode);
    }
    /**
     * Creates an instance of SpeakerRecognitionCancellationDetails object for the canceled SpeakerRecognitionResult
     * @member SpeakerRecognitionCancellationDetails.fromResult
     * @function
     * @public
     * @param {SpeakerRecognitionResult} result - The result that was canceled.
     * @returns {SpeakerRecognitionCancellationDetails} The cancellation details object being created.
     */
    static fromResult(result) {
        const reason = _Exports__WEBPACK_IMPORTED_MODULE_6__.CancellationReason.Error;
        let errorCode = _Exports__WEBPACK_IMPORTED_MODULE_1__.CancellationErrorCode.NoError;
        if (!!result.properties) {
            errorCode = _Exports__WEBPACK_IMPORTED_MODULE_1__.CancellationErrorCode[result.properties.getProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_3__.CancellationErrorCodePropertyName, _Exports__WEBPACK_IMPORTED_MODULE_1__.CancellationErrorCode[_Exports__WEBPACK_IMPORTED_MODULE_1__.CancellationErrorCode.NoError])];
        }
        return new SpeakerRecognitionCancellationDetails(reason, result.errorDetails, errorCode);
    }
}

//# sourceMappingURL=SpeakerRecognitionResult.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeakerRecognizer.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeakerRecognizer.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeakerRecognizer": () => (/* binding */ SpeakerRecognizer)
/* harmony export */ });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeakerRecognitionConnectionFactory.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognizerConfig.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeakerServiceRecognizer.js");
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Recognizer.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



/**
 * Defines SpeakerRecognizer class for Speaker Recognition
 * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)
 * @class SpeakerRecognizer
 */
class SpeakerRecognizer extends _Exports__WEBPACK_IMPORTED_MODULE_0__.Recognizer {
    /**
     * Initializes an instance of the SpeakerRecognizer.
     * @constructor
     * @param {SpeechConfig} speechConfig - The set of configuration properties.
     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer
     */
    constructor(speechConfig, audioConfig) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrUndefined(speechConfig, "speechConfig");
        const configImpl = speechConfig;
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrUndefined(configImpl, "speechConfig");
        super(audioConfig, configImpl.properties, new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_2__.SpeakerRecognitionConnectionFactory());
        this.privAudioConfigImpl = audioConfig;
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNull(this.privAudioConfigImpl, "audioConfig");
        this.privDisposedSpeakerRecognizer = false;
        this.privProperties = configImpl.properties;
    }
    /**
     * Gets the authorization token used to communicate with the service.
     * @member SpeakerRecognizer.prototype.authorizationToken
     * @function
     * @public
     * @returns {string} Authorization token.
     */
    get authorizationToken() {
        return this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceAuthorization_Token);
    }
    /**
     * Gets/Sets the authorization token used to communicate with the service.
     * @member SpeakerRecognizer.prototype.authorizationToken
     * @function
     * @public
     * @param {string} token - Authorization token.
     */
    set authorizationToken(token) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(token, "token");
        this.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceAuthorization_Token, token);
    }
    /**
     * The collection of properties and their values defined for this SpeakerRecognizer.
     * @member SpeakerRecognizer.prototype.properties
     * @function
     * @public
     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeakerRecognizer.
     */
    get properties() {
        return this.privProperties;
    }
    /**
     * Get recognition result for model using given audio
     * @member SpeakerRecognizer.prototype.recognizeOnceAsync
     * @function
     * @public
     * @async
     * @param {SpeakerIdentificationModel | SpeakerVerificationModel} model Model containing Voice Profiles to be identified
     * @param cb - Callback invoked once result is returned.
     * @param err - Callback invoked in case of an error.
     */
    recognizeOnceAsync(model) {
        return __awaiter(this, void 0, void 0, function* () {
            _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);
            return this.recognizeSpeakerOnceAsyncImpl(model);
        });
    }
    /**
     * Included for compatibility
     * @member SpeakerRecognizer.prototype.close
     * @function
     * @public
     * @async
     */
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);
            yield this.dispose(true);
        });
    }
    recognizeSpeakerOnceAsyncImpl(model) {
        return __awaiter(this, void 0, void 0, function* () {
            _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);
            yield this.implRecognizerStop();
            const result = yield this.privReco.recognizeSpeaker(model);
            yield this.implRecognizerStop();
            return result;
        });
    }
    implRecognizerStop() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.privReco) {
                yield this.privReco.stopRecognizing();
            }
            return;
        });
    }
    createRecognizerConfig(speechConfig) {
        return new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.RecognizerConfig(speechConfig, this.privProperties);
    }
    createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {
        const audioImpl = audioConfig;
        return new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_5__.SpeakerServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);
    }
    dispose(disposing) {
        const _super = Object.create(null, {
            dispose: { get: () => super.dispose }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (this.privDisposedSpeakerRecognizer) {
                return;
            }
            if (disposing) {
                this.privDisposedSpeakerRecognizer = true;
                yield _super.dispose.call(this, disposing);
            }
        });
    }
}

//# sourceMappingURL=SpeakerRecognizer.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeakerVerificationModel.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeakerVerificationModel.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeakerVerificationModel": () => (/* binding */ SpeakerVerificationModel)
/* harmony export */ });
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceProfileType.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


/**
 * Defines SpeakerVerificationModel class for Speaker Recognition
 * Model contains a profile against which to verify a speaker
 * @class SpeakerVerificationModel
 */
class SpeakerVerificationModel {
    constructor(profile) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrUndefined(profile, "VoiceProfile");
        if (profile.profileType === _Exports__WEBPACK_IMPORTED_MODULE_1__.VoiceProfileType.TextIndependentIdentification) {
            throw new Error("Verification model cannot be created from Identification profile");
        }
        this.privVoiceProfile = profile;
    }
    static fromProfile(profile) {
        return new SpeakerVerificationModel(profile);
    }
    get voiceProfile() {
        return this.privVoiceProfile;
    }
    get profileIds() {
        return [this.voiceProfile.profileId];
    }
    get scenario() {
        if (this.voiceProfile.profileType === _Exports__WEBPACK_IMPORTED_MODULE_1__.VoiceProfileType.TextDependentVerification) {
            return "TextDependentVerification";
        }
        else {
            return "TextIndependentVerification";
        }
    }
}

//# sourceMappingURL=SpeakerVerificationModel.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechConfig.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechConfig.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeechConfig": () => (/* binding */ SpeechConfig),
/* harmony export */   "SpeechConfigImpl": () => (/* binding */ SpeechConfigImpl)
/* harmony export */ });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/OutputFormat.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ProfanityOption.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisOutputFormat.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/* eslint-disable max-classes-per-file */



/**
 * Speech configuration.
 * @class SpeechConfig
 */
class SpeechConfig {
    /**
     * Creates and initializes an instance.
     * @constructor
     */
    constructor() {
        return;
    }
    /**
     * Static instance of SpeechConfig returned by passing subscriptionKey and service region.
     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.
     * @member SpeechConfig.fromSubscription
     * @function
     * @public
     * @param {string} subscriptionKey - The subscription key.
     * @param {string} region - The region name (see the <a href="https://aka.ms/csspeech/region">region page</a>).
     * @returns {SpeechConfig} The speech factory
     */
    static fromSubscription(subscriptionKey, region) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(subscriptionKey, "subscriptionKey");
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(region, "region");
        const speechImpl = new SpeechConfigImpl();
        speechImpl.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_Region, region);
        speechImpl.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_IntentRegion, region);
        speechImpl.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_Key, subscriptionKey);
        return speechImpl;
    }
    /**
     * Creates an instance of the speech config with specified endpoint and subscription key.
     * This method is intended only for users who use a non-standard service endpoint or parameters.
     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.
     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.
     * For example, if language is defined in the uri as query parameter "language=de-DE", and also set by
     * SpeechConfig.speechRecognitionLanguage = "en-US", the language setting in uri takes precedence,
     * and the effective language is "de-DE". Only the parameters that are not specified in the
     * endpoint URL can be set by other APIs.
     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the
     * fromEndpoint method, and then set authorizationToken="token" on the created SpeechConfig instance to
     * use the authorization token.
     * @member SpeechConfig.fromEndpoint
     * @function
     * @public
     * @param {URL} endpoint - The service endpoint to connect to.
     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.
     * @returns {SpeechConfig} A speech factory instance.
     */
    static fromEndpoint(endpoint, subscriptionKey) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNull(endpoint, "endpoint");
        const speechImpl = new SpeechConfigImpl();
        speechImpl.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);
        if (undefined !== subscriptionKey) {
            speechImpl.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_Key, subscriptionKey);
        }
        return speechImpl;
    }
    /**
     * Creates an instance of the speech config with specified host and subscription key.
     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.
     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.
     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.
     * Note: To use an authorization token with fromHost, use fromHost(URL),
     * and then set the AuthorizationToken property on the created SpeechConfig instance.
     * Note: Added in version 1.9.0.
     * @member SpeechConfig.fromHost
     * @function
     * @public
     * @param {URL} host - The service endpoint to connect to. Format is "protocol://host:port" where ":port" is optional.
     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.
     * @returns {SpeechConfig} A speech factory instance.
     */
    static fromHost(hostName, subscriptionKey) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNull(hostName, "hostName");
        const speechImpl = new SpeechConfigImpl();
        speechImpl.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_Host, hostName.protocol + "//" + hostName.hostname + (hostName.port === "" ? "" : ":" + hostName.port));
        if (undefined !== subscriptionKey) {
            speechImpl.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_Key, subscriptionKey);
        }
        return speechImpl;
    }
    /**
     * Creates an instance of the speech factory with specified initial authorization token and region.
     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token
     * expires, the caller needs to refresh it by calling this setter with a new valid token.
     * Note: Please use a token derived from your LanguageUnderstanding subscription key in case you want
     * to use the Intent recognizer. As configuration values are copied when creating a new recognizer,
     * the new token value will not apply to recognizers that have already been created. For recognizers
     * that have been created before, you need to set authorization token of the corresponding recognizer
     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.
     * @member SpeechConfig.fromAuthorizationToken
     * @function
     * @public
     * @param {string} authorizationToken - The initial authorization token.
     * @param {string} region - The region name (see the <a href="https://aka.ms/csspeech/region">region page</a>).
     * @returns {SpeechConfig} A speech factory instance.
     */
    static fromAuthorizationToken(authorizationToken, region) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNull(authorizationToken, "authorizationToken");
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(region, "region");
        const speechImpl = new SpeechConfigImpl();
        speechImpl.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_Region, region);
        speechImpl.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_IntentRegion, region);
        speechImpl.authorizationToken = authorizationToken;
        return speechImpl;
    }
    /**
     * Closes the configuration.
     * @member SpeechConfig.prototype.close
     * @function
     * @public
     */
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    close() { }
}
/**
 * @public
 * @class SpeechConfigImpl
 */
class SpeechConfigImpl extends SpeechConfig {
    constructor() {
        super();
        this.privProperties = new _Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyCollection();
        this.speechRecognitionLanguage = "en-US"; // Should we have a default?
        this.outputFormat = _Exports__WEBPACK_IMPORTED_MODULE_3__.OutputFormat.Simple;
    }
    get properties() {
        return this.privProperties;
    }
    get endPoint() {
        return new URL(this.privProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_Endpoint));
    }
    get subscriptionKey() {
        return this.privProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_Key);
    }
    get region() {
        return this.privProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_Region);
    }
    get authorizationToken() {
        return this.privProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceAuthorization_Token);
    }
    set authorizationToken(value) {
        this.privProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceAuthorization_Token, value);
    }
    get speechRecognitionLanguage() {
        return this.privProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_RecoLanguage);
    }
    set speechRecognitionLanguage(value) {
        this.privProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_RecoLanguage, value);
    }
    get autoDetectSourceLanguages() {
        return this.privProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages);
    }
    set autoDetectSourceLanguages(value) {
        this.privProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, value);
    }
    get outputFormat() {
        return _Exports__WEBPACK_IMPORTED_MODULE_3__.OutputFormat[this.privProperties.getProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.OutputFormatPropertyName, undefined)];
    }
    set outputFormat(value) {
        this.privProperties.setProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.OutputFormatPropertyName, _Exports__WEBPACK_IMPORTED_MODULE_3__.OutputFormat[value]);
    }
    get endpointId() {
        return this.privProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_EndpointId);
    }
    set endpointId(value) {
        this.privProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_EndpointId, value);
    }
    setProperty(name, value) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNull(value, "value");
        this.privProperties.setProperty(name, value);
    }
    getProperty(name, def) {
        return this.privProperties.getProperty(name, def);
    }
    setProxy(proxyHostName, proxyPort, proxyUserName, proxyPassword) {
        this.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId[_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName);
        this.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId[_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_ProxyPort], proxyPort);
        this.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId[_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName);
        this.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId[_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword);
    }
    setServiceProperty(name, value) {
        const currentProperties = JSON.parse(this.privProperties.getProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.ServicePropertiesPropertyName, "{}"));
        currentProperties[name] = value;
        this.privProperties.setProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.ServicePropertiesPropertyName, JSON.stringify(currentProperties));
    }
    setProfanity(profanity) {
        this.privProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceResponse_ProfanityOption, _Exports__WEBPACK_IMPORTED_MODULE_5__.ProfanityOption[profanity]);
    }
    enableAudioLogging() {
        this.privProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_EnableAudioLogging, "true");
    }
    requestWordLevelTimestamps() {
        this.privProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, "true");
    }
    enableDictation() {
        this.privProperties.setProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.ForceDictationPropertyName, "true");
    }
    clone() {
        const ret = new SpeechConfigImpl();
        ret.privProperties = this.privProperties.clone();
        return ret;
    }
    get speechSynthesisLanguage() {
        return this.privProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_SynthLanguage);
    }
    set speechSynthesisLanguage(language) {
        this.privProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_SynthLanguage, language);
    }
    get speechSynthesisVoiceName() {
        return this.privProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_SynthVoice);
    }
    set speechSynthesisVoiceName(voice) {
        this.privProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_SynthVoice, voice);
    }
    get speechSynthesisOutputFormat() {
        return _Exports__WEBPACK_IMPORTED_MODULE_6__.SpeechSynthesisOutputFormat[this.privProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)];
    }
    set speechSynthesisOutputFormat(format) {
        this.privProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__.PropertyId.SpeechServiceConnection_SynthOutputFormat, _Exports__WEBPACK_IMPORTED_MODULE_6__.SpeechSynthesisOutputFormat[format]);
    }
}

//# sourceMappingURL=SpeechConfig.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionCanceledEventArgs.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionCanceledEventArgs.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeechRecognitionCanceledEventArgs": () => (/* binding */ SpeechRecognitionCanceledEventArgs)
/* harmony export */ });
/* harmony import */ var _CancellationEventArgsBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CancellationEventArgsBase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationEventArgsBase.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

class SpeechRecognitionCanceledEventArgs extends _CancellationEventArgsBase__WEBPACK_IMPORTED_MODULE_0__.CancellationEventArgsBase {
}

//# sourceMappingURL=SpeechRecognitionCanceledEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionEventArgs.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionEventArgs.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConversationTranscriptionEventArgs": () => (/* binding */ ConversationTranscriptionEventArgs),
/* harmony export */   "SpeechRecognitionEventArgs": () => (/* binding */ SpeechRecognitionEventArgs)
/* harmony export */ });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/RecognitionEventArgs.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/* eslint-disable max-classes-per-file */

/**
 * Defines contents of speech recognizing/recognized event.
 * @class SpeechRecognitionEventArgs
 */
class SpeechRecognitionEventArgs extends _Exports__WEBPACK_IMPORTED_MODULE_0__.RecognitionEventArgs {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {SpeechRecognitionResult} result - The speech recognition result.
     * @param {number} offset - The offset.
     * @param {string} sessionId - The session id.
     */
    constructor(result, offset, sessionId) {
        super(offset, sessionId);
        this.privResult = result;
    }
    /**
     * Specifies the recognition result.
     * @member SpeechRecognitionEventArgs.prototype.result
     * @function
     * @public
     * @returns {SpeechRecognitionResult} the recognition result.
     */
    get result() {
        return this.privResult;
    }
}
/**
 * Defines contents of conversation transcribed/transcribing event.
 * @class ConversationTranscriptionEventArgs
 */
class ConversationTranscriptionEventArgs extends SpeechRecognitionEventArgs {
}

//# sourceMappingURL=SpeechRecognitionEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionResult.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionResult.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeechRecognitionResult": () => (/* binding */ SpeechRecognitionResult)
/* harmony export */ });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/RecognitionResult.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Defines result of speech recognition.
 * @class SpeechRecognitionResult
 */
class SpeechRecognitionResult extends _Exports__WEBPACK_IMPORTED_MODULE_0__.RecognitionResult {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @public
     * @param {string} resultId - The result id.
     * @param {ResultReason} reason - The reason.
     * @param {string} text - The recognized text.
     * @param {number} duration - The duration.
     * @param {number} offset - The offset into the stream.
     * @param {string} language - Primary Language detected, if provided.
     * @param {string} languageDetectionConfidence - Primary Language confidence ("Unknown," "Low," "Medium," "High"...), if provided.
     * @param {string} speakerId - speaker id for conversation transcription, if provided.
     * @param {string} errorDetails - Error details, if provided.
     * @param {string} json - Additional Json, if provided.
     * @param {PropertyCollection} properties - Additional properties, if provided.
     */
    constructor(resultId, reason, text, duration, offset, language, languageDetectionConfidence, speakerId, errorDetails, json, properties) {
        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties);
        this.privSpeakerId = speakerId;
    }
    /**
     * speaker id from conversation transcription/id scenarios
     * @member SpeechRecognitionResult.prototype.speakerId
     * @function
     * @public
     * @returns {string} id of speaker in given result
     */
    get speakerId() {
        return this.privSpeakerId;
    }
}

//# sourceMappingURL=SpeechRecognitionResult.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognizer.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognizer.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeechRecognizer": () => (/* binding */ SpeechRecognizer)
/* harmony export */ });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechConnectionFactory.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognizerConfig.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechServiceRecognizer.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js");
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Recognizer.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/OutputFormat.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




/**
 * Performs speech recognition from microphone, file, or other audio input streams, and gets transcribed text as result.
 * @class SpeechRecognizer
 */
class SpeechRecognizer extends _Exports__WEBPACK_IMPORTED_MODULE_0__.Recognizer {
    /**
     * SpeechRecognizer constructor.
     * @constructor
     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer
     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer
     */
    constructor(speechConfig, audioConfig) {
        const speechConfigImpl = speechConfig;
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNull(speechConfigImpl, "speechConfig");
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(speechConfigImpl.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_RecoLanguage), _Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId[_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_RecoLanguage]);
        super(audioConfig, speechConfigImpl.properties, new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_3__.SpeechConnectionFactory());
        this.privDisposedRecognizer = false;
    }
    /**
     * SpeechRecognizer constructor.
     * @constructor
     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer
     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer
     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer
     */
    static FromConfig(speechConfig, autoDetectSourceLanguageConfig, audioConfig) {
        const speechConfigImpl = speechConfig;
        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);
        const recognizer = new SpeechRecognizer(speechConfig, audioConfig);
        return recognizer;
    }
    /**
     * Gets the endpoint id of a customized speech model that is used for speech recognition.
     * @member SpeechRecognizer.prototype.endpointId
     * @function
     * @public
     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.
     */
    get endpointId() {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfDisposed(this.privDisposedRecognizer);
        return this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_EndpointId, "00000000-0000-0000-0000-000000000000");
    }
    /**
     * Gets the authorization token used to communicate with the service.
     * @member SpeechRecognizer.prototype.authorizationToken
     * @function
     * @public
     * @returns {string} Authorization token.
     */
    get authorizationToken() {
        return this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceAuthorization_Token);
    }
    /**
     * Gets/Sets the authorization token used to communicate with the service.
     * @member SpeechRecognizer.prototype.authorizationToken
     * @function
     * @public
     * @param {string} token - Authorization token.
     */
    set authorizationToken(token) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(token, "token");
        this.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceAuthorization_Token, token);
    }
    /**
     * Gets the spoken language of recognition.
     * @member SpeechRecognizer.prototype.speechRecognitionLanguage
     * @function
     * @public
     * @returns {string} The spoken language of recognition.
     */
    get speechRecognitionLanguage() {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfDisposed(this.privDisposedRecognizer);
        return this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_RecoLanguage);
    }
    /**
     * Gets the output format of recognition.
     * @member SpeechRecognizer.prototype.outputFormat
     * @function
     * @public
     * @returns {OutputFormat} The output format of recognition.
     */
    get outputFormat() {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfDisposed(this.privDisposedRecognizer);
        if (this.properties.getProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.OutputFormatPropertyName, _Exports__WEBPACK_IMPORTED_MODULE_5__.OutputFormat[_Exports__WEBPACK_IMPORTED_MODULE_5__.OutputFormat.Simple]) === _Exports__WEBPACK_IMPORTED_MODULE_5__.OutputFormat[_Exports__WEBPACK_IMPORTED_MODULE_5__.OutputFormat.Simple]) {
            return _Exports__WEBPACK_IMPORTED_MODULE_5__.OutputFormat.Simple;
        }
        else {
            return _Exports__WEBPACK_IMPORTED_MODULE_5__.OutputFormat.Detailed;
        }
    }
    /**
     * The collection of properties and their values defined for this SpeechRecognizer.
     * @member SpeechRecognizer.prototype.properties
     * @function
     * @public
     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.
     */
    get properties() {
        return this.privProperties;
    }
    /**
     * Starts speech recognition, and stops after the first utterance is recognized.
     * The task returns the recognition text as result.
     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,
     * so it is suitable only for single shot recognition
     * like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.
     * @member SpeechRecognizer.prototype.recognizeOnceAsync
     * @function
     * @public
     * @param cb - Callback that received the SpeechRecognitionResult.
     * @param err - Callback invoked in case of an error.
     */
    recognizeOnceAsync(cb, err) {
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_6__.marshalPromiseToCallbacks)(this.recognizeOnceAsyncImpl(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_7__.RecognitionMode.Interactive), cb, err);
    }
    /**
     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.
     * User must subscribe to events to receive recognition results.
     * @member SpeechRecognizer.prototype.startContinuousRecognitionAsync
     * @function
     * @public
     * @param cb - Callback invoked once the recognition has started.
     * @param err - Callback invoked in case of an error.
     */
    startContinuousRecognitionAsync(cb, err) {
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_6__.marshalPromiseToCallbacks)(this.startContinuousRecognitionAsyncImpl(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_7__.RecognitionMode.Conversation), cb, err);
    }
    /**
     * Stops continuous speech recognition.
     * @member SpeechRecognizer.prototype.stopContinuousRecognitionAsync
     * @function
     * @public
     * @param cb - Callback invoked once the recognition has stopped.
     * @param err - Callback invoked in case of an error.
     */
    stopContinuousRecognitionAsync(cb, err) {
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_6__.marshalPromiseToCallbacks)(this.stopContinuousRecognitionAsyncImpl(), cb, err);
    }
    /**
     * Starts speech recognition with keyword spotting, until
     * stopKeywordRecognitionAsync() is called.
     * User must subscribe to events to receive recognition results.
     * Note: Key word spotting functionality is only available on the
     * Speech Devices SDK. This functionality is currently not included in the SDK itself.
     * @member SpeechRecognizer.prototype.startKeywordRecognitionAsync
     * @function
     * @public
     * @param {KeywordRecognitionModel} model The keyword recognition model that
     * specifies the keyword to be recognized.
     * @param cb - Callback invoked once the recognition has started.
     * @param err - Callback invoked in case of an error.
     */
    startKeywordRecognitionAsync(model, cb, err) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNull(model, "model");
        if (!!err) {
            err("Not yet implemented.");
        }
    }
    /**
     * Stops continuous speech recognition.
     * Note: Key word spotting functionality is only available on the
     * Speech Devices SDK. This functionality is currently not included in the SDK itself.
     * @member SpeechRecognizer.prototype.stopKeywordRecognitionAsync
     * @function
     * @public
     * @param cb - Callback invoked once the recognition has stopped.
     * @param err - Callback invoked in case of an error.
     */
    stopKeywordRecognitionAsync(cb) {
        if (!!cb) {
            cb();
        }
    }
    /**
     * closes all external resources held by an instance of this class.
     * @member SpeechRecognizer.prototype.close
     * @function
     * @public
     */
    close(cb, errorCb) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfDisposed(this.privDisposedRecognizer);
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_6__.marshalPromiseToCallbacks)(this.dispose(true), cb, errorCb);
    }
    /**
     * Disposes any resources held by the object.
     * @member SpeechRecognizer.prototype.dispose
     * @function
     * @public
     * @param {boolean} disposing - true if disposing the object.
     */
    dispose(disposing) {
        const _super = Object.create(null, {
            dispose: { get: () => super.dispose }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (this.privDisposedRecognizer) {
                return;
            }
            if (disposing) {
                this.privDisposedRecognizer = true;
                yield this.implRecognizerStop();
            }
            yield _super.dispose.call(this, disposing);
        });
    }
    createRecognizerConfig(speechConfig) {
        return new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_7__.RecognizerConfig(speechConfig, this.privProperties);
    }
    createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {
        const configImpl = audioConfig;
        return new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_8__.SpeechServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);
    }
}

//# sourceMappingURL=SpeechRecognizer.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisBookmarkEventArgs.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisBookmarkEventArgs.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeechSynthesisBookmarkEventArgs": () => (/* binding */ SpeechSynthesisBookmarkEventArgs)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Defines contents of speech synthesis bookmark event.
 * @class SpeechSynthesisBookmarkEventArgs
 * Added in version 1.16.0
 */
class SpeechSynthesisBookmarkEventArgs {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {number} audioOffset - The audio offset.
     * @param {string} text - The bookmark text.
     */
    constructor(audioOffset, text) {
        this.privAudioOffset = audioOffset;
        this.privText = text;
    }
    /**
     * Specifies the audio offset.
     * @member SpeechSynthesisBookmarkEventArgs.prototype.audioOffset
     * @function
     * @public
     * @returns {number} the audio offset.
     */
    get audioOffset() {
        return this.privAudioOffset;
    }
    /**
     * Specifies the bookmark.
     * @member SpeechSynthesisBookmarkEventArgs.prototype.text
     * @function
     * @public
     * @returns {string} the bookmark text.
     */
    get text() {
        return this.privText;
    }
}

//# sourceMappingURL=SpeechSynthesisBookmarkEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisBoundaryType.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisBoundaryType.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeechSynthesisBoundaryType": () => (/* binding */ SpeechSynthesisBoundaryType)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Defines the boundary type of speech synthesis boundary event.
 * @class SpeechSynthesisBoundaryType
 * Added in version 1.21.0
 */
var SpeechSynthesisBoundaryType;
(function (SpeechSynthesisBoundaryType) {
    /**
     * Indicates the boundary text is a word.
     * @member SpeechSynthesisBoundaryType.Word
     */
    SpeechSynthesisBoundaryType["Word"] = "WordBoundary";
    /**
     * Indicates the boundary text is a punctuation.
     * @member SpeechSynthesisBoundaryType.Punctuation
     */
    SpeechSynthesisBoundaryType["Punctuation"] = "PunctuationBoundary";
    /**
     * Indicates the boundary text is a sentence.
     * @member SpeechSynthesisBoundaryType.Sentence
     */
    SpeechSynthesisBoundaryType["Sentence"] = "SentenceBoundary";
})(SpeechSynthesisBoundaryType || (SpeechSynthesisBoundaryType = {}));

//# sourceMappingURL=SpeechSynthesisBoundaryType.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisEventArgs.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisEventArgs.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeechSynthesisEventArgs": () => (/* binding */ SpeechSynthesisEventArgs)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Defines contents of speech synthesis events.
 * @class SpeechSynthesisEventArgs
 * Added in version 1.11.0
 */
class SpeechSynthesisEventArgs {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {SpeechSynthesisResult} result - The speech synthesis result.
     */
    constructor(result) {
        this.privResult = result;
    }
    /**
     * Specifies the synthesis result.
     * @member SpeechSynthesisEventArgs.prototype.result
     * @function
     * @public
     * @returns {SpeechSynthesisResult} the synthesis result.
     */
    get result() {
        return this.privResult;
    }
}

//# sourceMappingURL=SpeechSynthesisEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisOutputFormat.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisOutputFormat.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeechSynthesisOutputFormat": () => (/* binding */ SpeechSynthesisOutputFormat)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Define speech synthesis audio output formats.
 * @enum SpeechSynthesisOutputFormat
 * Updated in version 1.17.0
 */
var SpeechSynthesisOutputFormat;
(function (SpeechSynthesisOutputFormat) {
    /**
     * raw-8khz-8bit-mono-mulaw
     * @member SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw,
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Raw8Khz8BitMonoMULaw"] = 0] = "Raw8Khz8BitMonoMULaw";
    /**
     * riff-16khz-16kbps-mono-siren
     * @note Unsupported by the service. Do not use this value.
     * @member SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Riff16Khz16KbpsMonoSiren"] = 1] = "Riff16Khz16KbpsMonoSiren";
    /**
     * audio-16khz-16kbps-mono-siren
     * @note Unsupported by the service. Do not use this value.
     * @member SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Audio16Khz16KbpsMonoSiren"] = 2] = "Audio16Khz16KbpsMonoSiren";
    /**
     * audio-16khz-32kbitrate-mono-mp3
     * @member SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Audio16Khz32KBitRateMonoMp3"] = 3] = "Audio16Khz32KBitRateMonoMp3";
    /**
     * audio-16khz-128kbitrate-mono-mp3
     * @member SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Audio16Khz128KBitRateMonoMp3"] = 4] = "Audio16Khz128KBitRateMonoMp3";
    /**
     * audio-16khz-64kbitrate-mono-mp3
     * @member SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Audio16Khz64KBitRateMonoMp3"] = 5] = "Audio16Khz64KBitRateMonoMp3";
    /**
     * audio-24khz-48kbitrate-mono-mp3
     * @member SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Audio24Khz48KBitRateMonoMp3"] = 6] = "Audio24Khz48KBitRateMonoMp3";
    /**
     * audio-24khz-96kbitrate-mono-mp3
     * @member SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Audio24Khz96KBitRateMonoMp3"] = 7] = "Audio24Khz96KBitRateMonoMp3";
    /**
     * audio-24khz-160kbitrate-mono-mp3
     * @member SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Audio24Khz160KBitRateMonoMp3"] = 8] = "Audio24Khz160KBitRateMonoMp3";
    /**
     * raw-16khz-16bit-mono-truesilk
     * @member SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Raw16Khz16BitMonoTrueSilk"] = 9] = "Raw16Khz16BitMonoTrueSilk";
    /**
     * riff-16khz-16bit-mono-pcm
     * @member SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Riff16Khz16BitMonoPcm"] = 10] = "Riff16Khz16BitMonoPcm";
    /**
     * riff-8khz-16bit-mono-pcm
     * @member SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Riff8Khz16BitMonoPcm"] = 11] = "Riff8Khz16BitMonoPcm";
    /**
     * riff-24khz-16bit-mono-pcm
     * @member SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Riff24Khz16BitMonoPcm"] = 12] = "Riff24Khz16BitMonoPcm";
    /**
     * riff-8khz-8bit-mono-mulaw
     * @member SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Riff8Khz8BitMonoMULaw"] = 13] = "Riff8Khz8BitMonoMULaw";
    /**
     * raw-16khz-16bit-mono-pcm
     * @member SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Raw16Khz16BitMonoPcm"] = 14] = "Raw16Khz16BitMonoPcm";
    /**
     * raw-24khz-16bit-mono-pcm
     * @member SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Raw24Khz16BitMonoPcm"] = 15] = "Raw24Khz16BitMonoPcm";
    /**
     * raw-8khz-16bit-mono-pcm
     * @member SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Raw8Khz16BitMonoPcm"] = 16] = "Raw8Khz16BitMonoPcm";
    /**
     * ogg-16khz-16bit-mono-opus
     * @member SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Ogg16Khz16BitMonoOpus"] = 17] = "Ogg16Khz16BitMonoOpus";
    /**
     * ogg-24khz-16bit-mono-opus
     * @member SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Ogg24Khz16BitMonoOpus"] = 18] = "Ogg24Khz16BitMonoOpus";
    /**
     * raw-48khz-16bit-mono-pcm
     * @member SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Raw48Khz16BitMonoPcm"] = 19] = "Raw48Khz16BitMonoPcm";
    /**
     * riff-48khz-16bit-mono-pcm
     * @member SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Riff48Khz16BitMonoPcm"] = 20] = "Riff48Khz16BitMonoPcm";
    /**
     * audio-48khz-96kbitrate-mono-mp3
     * @member SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Audio48Khz96KBitRateMonoMp3"] = 21] = "Audio48Khz96KBitRateMonoMp3";
    /**
     * audio-48khz-192kbitrate-mono-mp3
     * @member SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Audio48Khz192KBitRateMonoMp3"] = 22] = "Audio48Khz192KBitRateMonoMp3";
    /**
     * ogg-48khz-16bit-mono-opus
     * Added in version 1.16.0
     * @member SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Ogg48Khz16BitMonoOpus"] = 23] = "Ogg48Khz16BitMonoOpus";
    /**
     * webm-16khz-16bit-mono-opus
     * Added in version 1.16.0
     * @member SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Webm16Khz16BitMonoOpus"] = 24] = "Webm16Khz16BitMonoOpus";
    /**
     * webm-24khz-16bit-mono-opus
     * Added in version 1.16.0
     * @member SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Webm24Khz16BitMonoOpus"] = 25] = "Webm24Khz16BitMonoOpus";
    /**
     * raw-24khz-16bit-mono-truesilk
     * Added in version 1.17.0
     * @member SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Raw24Khz16BitMonoTrueSilk"] = 26] = "Raw24Khz16BitMonoTrueSilk";
    /**
     * raw-8khz-8bit-mono-alaw
     * Added in version 1.17.0
     * @member SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Raw8Khz8BitMonoALaw"] = 27] = "Raw8Khz8BitMonoALaw";
    /**
     * riff-8khz-8bit-mono-alaw
     * Added in version 1.17.0
     * @member SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Riff8Khz8BitMonoALaw"] = 28] = "Riff8Khz8BitMonoALaw";
    /**
     * webm-24khz-16bit-24kbps-mono-opus
     * Audio compressed by OPUS codec in a webm container, with bitrate of 24kbps, optimized for IoT scenario.
     * Added in version 1.19.0
     * @member SpeechSynthesisOutputFormat.Webm24Khz16Bit24KbpsMonoOpus
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Webm24Khz16Bit24KbpsMonoOpus"] = 29] = "Webm24Khz16Bit24KbpsMonoOpus";
    /**
     * audio-16khz-16bit-32kbps-mono-opus
     * Audio compressed by OPUS codec without container, with bitrate of 32kbps.
     * Added in version 1.20.0
     * @member SpeechSynthesisOutputFormat.Audio16Khz16Bit32KbpsMonoOpus
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Audio16Khz16Bit32KbpsMonoOpus"] = 30] = "Audio16Khz16Bit32KbpsMonoOpus";
    /**
     * audio-24khz-16bit-48kbps-mono-opus
     * Audio compressed by OPUS codec without container, with bitrate of 48kbps.
     * Added in version 1.20.0
     * @member SpeechSynthesisOutputFormat.Audio24Khz16Bit48KbpsMonoOpus
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Audio24Khz16Bit48KbpsMonoOpus"] = 31] = "Audio24Khz16Bit48KbpsMonoOpus";
    /**
     * audio-24khz-16bit-24kbps-mono-opus
     * Audio compressed by OPUS codec without container, with bitrate of 24kbps.
     * Added in version 1.20.0
     * @member SpeechSynthesisOutputFormat.Audio24Khz16Bit24KbpsMonoOpus
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Audio24Khz16Bit24KbpsMonoOpus"] = 32] = "Audio24Khz16Bit24KbpsMonoOpus";
    /**
     * raw-22050hz-16bit-mono-pcm
     * Raw PCM audio at 22050Hz sampling rate and 16-bit depth.
     * Added in version 1.22.0
     * @member SpeechSynthesisOutputFormat.Raw22050Hz16BitMonoPcm
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Raw22050Hz16BitMonoPcm"] = 33] = "Raw22050Hz16BitMonoPcm";
    /**
     * riff-22050hz-16bit-mono-pcm
     * PCM audio at 22050Hz sampling rate and 16-bit depth, with RIFF header.
     * Added in version 1.22.0
     * @member SpeechSynthesisOutputFormat.Riff22050Hz16BitMonoPcm
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Riff22050Hz16BitMonoPcm"] = 34] = "Riff22050Hz16BitMonoPcm";
    /**
     * raw-44100hz-16bit-mono-pcm
     * Raw PCM audio at 44100Hz sampling rate and 16-bit depth.
     * Added in version 1.22.0
     * @member SpeechSynthesisOutputFormat.Raw44100Hz16BitMonoPcm
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Raw44100Hz16BitMonoPcm"] = 35] = "Raw44100Hz16BitMonoPcm";
    /**
     * riff-44100hz-16bit-mono-pcm
     * PCM audio at 44100Hz sampling rate and 16-bit depth, with RIFF header.
     * Added in version 1.22.0
     * @member SpeechSynthesisOutputFormat.Riff44100Hz16BitMonoPcm
     */
    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat["Riff44100Hz16BitMonoPcm"] = 36] = "Riff44100Hz16BitMonoPcm";
})(SpeechSynthesisOutputFormat || (SpeechSynthesisOutputFormat = {}));

//# sourceMappingURL=SpeechSynthesisOutputFormat.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisResult.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisResult.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeechSynthesisResult": () => (/* binding */ SpeechSynthesisResult)
/* harmony export */ });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SynthesisResult.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Defines result of speech synthesis.
 * @class SpeechSynthesisResult
 * Added in version 1.11.0
 */
class SpeechSynthesisResult extends _Exports__WEBPACK_IMPORTED_MODULE_0__.SynthesisResult {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {string} resultId - The result id.
     * @param {ResultReason} reason - The reason.
     * @param {ArrayBuffer} audioData - The synthesized audio binary.
     * @param {string} errorDetails - Error details, if provided.
     * @param {PropertyCollection} properties - Additional properties, if provided.
     * @param {number} audioDuration - The audio duration.
     */
    constructor(resultId, reason, audioData, errorDetails, properties, audioDuration) {
        super(resultId, reason, errorDetails, properties);
        this.privAudioData = audioData;
        this.privAudioDuration = audioDuration;
    }
    /**
     * The synthesized audio data
     * @member SpeechSynthesisResult.prototype.audioData
     * @function
     * @public
     * @returns {ArrayBuffer} The synthesized audio data.
     */
    get audioData() {
        return this.privAudioData;
    }
    /**
     * The time duration of synthesized audio, in ticks (100 nanoseconds).
     * @member SpeechSynthesisResult.prototype.audioDuration
     * @function
     * @public
     * @returns {number} The time duration of synthesized audio.
     */
    get audioDuration() {
        return this.privAudioDuration;
    }
}

//# sourceMappingURL=SpeechSynthesisResult.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisVisemeEventArgs.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisVisemeEventArgs.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeechSynthesisVisemeEventArgs": () => (/* binding */ SpeechSynthesisVisemeEventArgs)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Defines contents of speech synthesis viseme event.
 * @class SpeechSynthesisVisemeEventArgs
 * Added in version 1.16.0
 */
class SpeechSynthesisVisemeEventArgs {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {number} audioOffset - The audio offset.
     * @param {number} visemeId - The viseme ID.
     * @param {string} animation - The animation, could be in svg or other format.
     */
    constructor(audioOffset, visemeId, animation) {
        this.privAudioOffset = audioOffset;
        this.privVisemeId = visemeId;
        this.privAnimation = animation;
    }
    /**
     * Specifies the audio offset.
     * @member SpeechSynthesisVisemeEventArgs.prototype.audioOffset
     * @function
     * @public
     * @returns {number} the audio offset.
     */
    get audioOffset() {
        return this.privAudioOffset;
    }
    /**
     * Specifies the viseme ID.
     * @member SpeechSynthesisVisemeEventArgs.prototype.visemeId
     * @function
     * @public
     * @returns {number} the viseme ID.
     */
    get visemeId() {
        return this.privVisemeId;
    }
    /**
     * Specifies the animation.
     * @member SpeechSynthesisVisemeEventArgs.prototype.animation
     * @function
     * @public
     * @returns {string} the animation, could be in svg or other format.
     */
    get animation() {
        return this.privAnimation;
    }
}

//# sourceMappingURL=SpeechSynthesisVisemeEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisWordBoundaryEventArgs.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisWordBoundaryEventArgs.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeechSynthesisWordBoundaryEventArgs": () => (/* binding */ SpeechSynthesisWordBoundaryEventArgs)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Defines contents of speech synthesis word boundary event.
 * @class SpeechSynthesisWordBoundaryEventArgs
 * Added in version 1.11.0
 */
class SpeechSynthesisWordBoundaryEventArgs {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {number} audioOffset - The audio offset.
     * @param {number} duration - The audio duration.
     * @param {string} text - The text.
     * @param {number} wordLength - The length of the word.
     * @param {number} textOffset - The text offset.
     * @param {SpeechSynthesisBoundaryType} boundaryType - The boundary type
     */
    constructor(audioOffset, duration, text, wordLength, textOffset, boundaryType) {
        this.privAudioOffset = audioOffset;
        this.privDuration = duration;
        this.privText = text;
        this.privWordLength = wordLength;
        this.privTextOffset = textOffset;
        this.privBoundaryType = boundaryType;
    }
    /**
     * Specifies the audio offset.
     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.audioOffset
     * @function
     * @public
     * @returns {number} the audio offset.
     */
    get audioOffset() {
        return this.privAudioOffset;
    }
    /**
     * Specifies the duration, in ticks (100 nanoseconds).
     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.duration
     * @function
     * @public
     * @returns {number} Duration in 100 nanosecond increments.
     */
    get duration() {
        return this.privDuration;
    }
    /**
     * Specifies the text of the word boundary event.
     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.text
     * @function
     * @public
     * @returns {string} the text.
     */
    get text() {
        return this.privText;
    }
    /**
     * Specifies the word length
     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.wordLength
     * @function
     * @public
     * @returns {number} the word length
     */
    get wordLength() {
        return this.privWordLength;
    }
    /**
     * Specifies the text offset.
     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.textOffset
     * @function
     * @public
     * @returns {number} the text offset.
     */
    get textOffset() {
        return this.privTextOffset;
    }
    /**
     * Specifies the boundary type.
     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.boundaryType
     * @function
     * @public
     * @returns {SpeechSynthesisBoundaryType} the boundary type.
     */
    get boundaryType() {
        return this.privBoundaryType;
    }
}

//# sourceMappingURL=SpeechSynthesisWordBoundaryEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesizer.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesizer.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeechSynthesizer": () => (/* binding */ SpeechSynthesizer),
/* harmony export */   "SynthesisRequest": () => (/* binding */ SynthesisRequest)
/* harmony export */ });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechSynthesisConnectionFactory.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesizerConfig.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisAdapterBase.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognizerConfig.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/CognitiveSubscriptionKeyAuthentication.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/CognitiveTokenAuthentication.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisRestAdapter.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Queue.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");
/* harmony import */ var _Audio_AudioFileWriter__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./Audio/AudioFileWriter */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioFileWriter.js");
/* harmony import */ var _Audio_AudioOutputFormat__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Audio/AudioOutputFormat */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioOutputFormat.js");
/* harmony import */ var _Audio_AudioOutputStream__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioOutputStream.js");
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioConfig.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisOutputFormat.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/PushAudioOutputStreamCallback.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SynthesisVoicesResult.js");
/* eslint-disable @typescript-eslint/no-empty-function */
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







/**
 * Defines the class SpeechSynthesizer for text to speech.
 * Updated in version 1.16.0
 * @class SpeechSynthesizer
 */
class SpeechSynthesizer {
    /**
     * SpeechSynthesizer constructor.
     * @constructor
     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer.
     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer.
     */
    constructor(speechConfig, audioConfig) {
        const speechConfigImpl = speechConfig;
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNull(speechConfigImpl, "speechConfig");
        if (audioConfig !== null) {
            if (audioConfig === undefined) {
                this.audioConfig = (typeof window === "undefined") ? undefined : _Exports__WEBPACK_IMPORTED_MODULE_1__.AudioConfig.fromDefaultSpeakerOutput();
            }
            else {
                this.audioConfig = audioConfig;
            }
        }
        this.privProperties = speechConfigImpl.properties.clone();
        this.privDisposed = false;
        this.privSynthesizing = false;
        this.privConnectionFactory = new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_2__.SpeechSynthesisConnectionFactory();
        this.synthesisRequestQueue = new _common_Exports__WEBPACK_IMPORTED_MODULE_3__.Queue();
        this.implCommonSynthesizeSetup();
    }
    /**
     * Gets the authorization token used to communicate with the service.
     * @member SpeechSynthesizer.prototype.authorizationToken
     * @function
     * @public
     * @returns {string} Authorization token.
     */
    get authorizationToken() {
        return this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.SpeechServiceAuthorization_Token);
    }
    /**
     * Gets/Sets the authorization token used to communicate with the service.
     * @member SpeechSynthesizer.prototype.authorizationToken
     * @function
     * @public
     * @param {string} token - Authorization token.
     */
    set authorizationToken(token) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(token, "token");
        this.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.SpeechServiceAuthorization_Token, token);
    }
    /**
     * The collection of properties and their values defined for this SpeechSynthesizer.
     * @member SpeechSynthesizer.prototype.properties
     * @function
     * @public
     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechSynthesizer.
     */
    get properties() {
        return this.privProperties;
    }
    /**
     * Indicates if auto detect source language is enabled
     * @member SpeechSynthesizer.prototype.properties
     * @function
     * @public
     * @returns {boolean} if auto detect source language is enabled
     */
    get autoDetectSourceLanguage() {
        return this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages) === _common_speech_Exports__WEBPACK_IMPORTED_MODULE_5__.AutoDetectSourceLanguagesOpenRangeOptionName;
    }
    /**
     * SpeechSynthesizer constructor.
     * @constructor
     * @param {SpeechConfig} speechConfig - an set of initial properties for this synthesizer
     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the synthesizer
     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer
     */
    static FromConfig(speechConfig, autoDetectSourceLanguageConfig, audioConfig) {
        const speechConfigImpl = speechConfig;
        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);
        return new SpeechSynthesizer(speechConfig, audioConfig);
    }
    buildSsml(text) {
        const languageToDefaultVoice = {
            ["af-ZA"]: "af-ZA-AdriNeural",
            ["am-ET"]: "am-ET-AmehaNeural",
            ["ar-AE"]: "ar-AE-FatimaNeural",
            ["ar-BH"]: "ar-BH-AliNeural",
            ["ar-DZ"]: "ar-DZ-AminaNeural",
            ["ar-EG"]: "ar-EG-SalmaNeural",
            ["ar-IQ"]: "ar-IQ-BasselNeural",
            ["ar-JO"]: "ar-JO-SanaNeural",
            ["ar-KW"]: "ar-KW-FahedNeural",
            ["ar-LY"]: "ar-LY-ImanNeural",
            ["ar-MA"]: "ar-MA-JamalNeural",
            ["ar-QA"]: "ar-QA-AmalNeural",
            ["ar-SA"]: "ar-SA-HamedNeural",
            ["ar-SY"]: "ar-SY-AmanyNeural",
            ["ar-TN"]: "ar-TN-HediNeural",
            ["ar-YE"]: "ar-YE-MaryamNeural",
            ["bg-BG"]: "bg-BG-BorislavNeural",
            ["bn-BD"]: "bn-BD-NabanitaNeural",
            ["bn-IN"]: "bn-IN-BashkarNeural",
            ["ca-ES"]: "ca-ES-JoanaNeural",
            ["cs-CZ"]: "cs-CZ-AntoninNeural",
            ["cy-GB"]: "cy-GB-AledNeural",
            ["da-DK"]: "da-DK-ChristelNeural",
            ["de-AT"]: "de-AT-IngridNeural",
            ["de-CH"]: "de-CH-JanNeural",
            ["de-DE"]: "de-DE-KatjaNeural",
            ["el-GR"]: "el-GR-AthinaNeural",
            ["en-AU"]: "en-AU-NatashaNeural",
            ["en-CA"]: "en-CA-ClaraNeural",
            ["en-GB"]: "en-GB-LibbyNeural",
            ["en-HK"]: "en-HK-SamNeural",
            ["en-IE"]: "en-IE-ConnorNeural",
            ["en-IN"]: "en-IN-NeerjaNeural",
            ["en-KE"]: "en-KE-AsiliaNeural",
            ["en-NG"]: "en-NG-AbeoNeural",
            ["en-NZ"]: "en-NZ-MitchellNeural",
            ["en-PH"]: "en-PH-JamesNeural",
            ["en-SG"]: "en-SG-LunaNeural",
            ["en-TZ"]: "en-TZ-ElimuNeural",
            ["en-US"]: "en-US-JennyNeural",
            ["en-ZA"]: "en-ZA-LeahNeural",
            ["es-AR"]: "es-AR-ElenaNeural",
            ["es-BO"]: "es-BO-MarceloNeural",
            ["es-CL"]: "es-CL-CatalinaNeural",
            ["es-CO"]: "es-CO-GonzaloNeural",
            ["es-CR"]: "es-CR-JuanNeural",
            ["es-CU"]: "es-CU-BelkysNeural",
            ["es-DO"]: "es-DO-EmilioNeural",
            ["es-EC"]: "es-EC-AndreaNeural",
            ["es-ES"]: "es-ES-AlvaroNeural",
            ["es-GQ"]: "es-GQ-JavierNeural",
            ["es-GT"]: "es-GT-AndresNeural",
            ["es-HN"]: "es-HN-CarlosNeural",
            ["es-MX"]: "es-MX-DaliaNeural",
            ["es-NI"]: "es-NI-FedericoNeural",
            ["es-PA"]: "es-PA-MargaritaNeural",
            ["es-PE"]: "es-PE-AlexNeural",
            ["es-PR"]: "es-PR-KarinaNeural",
            ["es-PY"]: "es-PY-MarioNeural",
            ["es-SV"]: "es-SV-LorenaNeural",
            ["es-US"]: "es-US-AlonsoNeural",
            ["es-UY"]: "es-UY-MateoNeural",
            ["es-VE"]: "es-VE-PaolaNeural",
            ["et-EE"]: "et-EE-AnuNeural",
            ["fa-IR"]: "fa-IR-DilaraNeural",
            ["fi-FI"]: "fi-FI-SelmaNeural",
            ["fil-PH"]: "fil-PH-AngeloNeural",
            ["fr-BE"]: "fr-BE-CharlineNeural",
            ["fr-CA"]: "fr-CA-SylvieNeural",
            ["fr-CH"]: "fr-CH-ArianeNeural",
            ["fr-FR"]: "fr-FR-DeniseNeural",
            ["ga-IE"]: "ga-IE-ColmNeural",
            ["gl-ES"]: "gl-ES-RoiNeural",
            ["gu-IN"]: "gu-IN-DhwaniNeural",
            ["he-IL"]: "he-IL-AvriNeural",
            ["hi-IN"]: "hi-IN-MadhurNeural",
            ["hr-HR"]: "hr-HR-GabrijelaNeural",
            ["hu-HU"]: "hu-HU-NoemiNeural",
            ["id-ID"]: "id-ID-ArdiNeural",
            ["is-IS"]: "is-IS-GudrunNeural",
            ["it-IT"]: "it-IT-IsabellaNeural",
            ["ja-JP"]: "ja-JP-NanamiNeural",
            ["jv-ID"]: "jv-ID-DimasNeural",
            ["kk-KZ"]: "kk-KZ-AigulNeural",
            ["km-KH"]: "km-KH-PisethNeural",
            ["kn-IN"]: "kn-IN-GaganNeural",
            ["ko-KR"]: "ko-KR-SunHiNeural",
            ["lo-LA"]: "lo-LA-ChanthavongNeural",
            ["lt-LT"]: "lt-LT-LeonasNeural",
            ["lv-LV"]: "lv-LV-EveritaNeural",
            ["mk-MK"]: "mk-MK-AleksandarNeural",
            ["ml-IN"]: "ml-IN-MidhunNeural",
            ["mr-IN"]: "mr-IN-AarohiNeural",
            ["ms-MY"]: "ms-MY-OsmanNeural",
            ["mt-MT"]: "mt-MT-GraceNeural",
            ["my-MM"]: "my-MM-NilarNeural",
            ["nb-NO"]: "nb-NO-PernilleNeural",
            ["nl-BE"]: "nl-BE-ArnaudNeural",
            ["nl-NL"]: "nl-NL-ColetteNeural",
            ["pl-PL"]: "pl-PL-AgnieszkaNeural",
            ["ps-AF"]: "ps-AF-GulNawazNeural",
            ["pt-BR"]: "pt-BR-FranciscaNeural",
            ["pt-PT"]: "pt-PT-DuarteNeural",
            ["ro-RO"]: "ro-RO-AlinaNeural",
            ["ru-RU"]: "ru-RU-SvetlanaNeural",
            ["si-LK"]: "si-LK-SameeraNeural",
            ["sk-SK"]: "sk-SK-LukasNeural",
            ["sl-SI"]: "sl-SI-PetraNeural",
            ["so-SO"]: "so-SO-MuuseNeural",
            ["sr-RS"]: "sr-RS-NicholasNeural",
            ["su-ID"]: "su-ID-JajangNeural",
            ["sv-SE"]: "sv-SE-SofieNeural",
            ["sw-KE"]: "sw-KE-RafikiNeural",
            ["sw-TZ"]: "sw-TZ-DaudiNeural",
            ["ta-IN"]: "ta-IN-PallaviNeural",
            ["ta-LK"]: "ta-LK-KumarNeural",
            ["ta-SG"]: "ta-SG-AnbuNeural",
            ["te-IN"]: "te-IN-MohanNeural",
            ["th-TH"]: "th-TH-PremwadeeNeural",
            ["tr-TR"]: "tr-TR-AhmetNeural",
            ["uk-UA"]: "uk-UA-OstapNeural",
            ["ur-IN"]: "ur-IN-GulNeural",
            ["ur-PK"]: "ur-PK-AsadNeural",
            ["uz-UZ"]: "uz-UZ-MadinaNeural",
            ["vi-VN"]: "vi-VN-HoaiMyNeural",
            ["zh-CN"]: "zh-CN-XiaoxiaoNeural",
            ["zh-HK"]: "zh-HK-HiuMaanNeural",
            ["zh-TW"]: "zh-TW-HsiaoChenNeural",
            ["zu-ZA"]: "zu-ZA-ThandoNeural",
        };
        let language = this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.SpeechServiceConnection_SynthLanguage, "en-US");
        let voice = this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.SpeechServiceConnection_SynthVoice, "");
        let ssml = SpeechSynthesizer.XMLEncode(text);
        if (this.autoDetectSourceLanguage) {
            language = "en-US";
        }
        else {
            voice = voice || languageToDefaultVoice[language];
        }
        if (voice) {
            ssml = `<voice name='${voice}'>${ssml}</voice>`;
        }
        ssml = `<speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xmlns:mstts='http://www.w3.org/2001/mstts' xmlns:emo='http://www.w3.org/2009/10/emotionml' xml:lang='${language}'>${ssml}</speak>`;
        return ssml;
    }
    /**
     * Executes speech synthesis on plain text.
     * The task returns the synthesis result.
     * @member SpeechSynthesizer.prototype.speakTextAsync
     * @function
     * @public
     * @param text - Text to be synthesized.
     * @param cb - Callback that received the SpeechSynthesisResult.
     * @param err - Callback invoked in case of an error.
     * @param stream - AudioOutputStream to receive the synthesized audio.
     */
    speakTextAsync(text, cb, err, stream) {
        this.speakImpl(text, false, cb, err, stream);
    }
    /**
     * Executes speech synthesis on SSML.
     * The task returns the synthesis result.
     * @member SpeechSynthesizer.prototype.speakSsmlAsync
     * @function
     * @public
     * @param ssml - SSML to be synthesized.
     * @param cb - Callback that received the SpeechSynthesisResult.
     * @param err - Callback invoked in case of an error.
     * @param stream - AudioOutputStream to receive the synthesized audio.
     */
    speakSsmlAsync(ssml, cb, err, stream) {
        this.speakImpl(ssml, true, cb, err, stream);
    }
    /**
     * Get list of synthesis voices available.
     * The task returns the synthesis voice result.
     * @member SpeechSynthesizer.prototype.getVoicesAsync
     * @function
     * @async
     * @public
     * @param locale - Locale of voices in BCP-47 format; if left empty, get all available voices.
     * @return {Promise<SynthesisVoicesResult>} - Promise of a SynthesisVoicesResult.
     */
    getVoicesAsync(locale = "") {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getVoices(locale);
        });
    }
    /**
     * Dispose of associated resources.
     * @member SpeechSynthesizer.prototype.close
     * @function
     * @public
     */
    close(cb, err) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfDisposed(this.privDisposed);
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_6__.marshalPromiseToCallbacks)(this.dispose(true), cb, err);
    }
    /**
     * @Internal
     * Do not use externally, object returned will change without warning or notice.
     */
    get internalData() {
        return this.privAdapter;
    }
    /**
     * This method performs cleanup of resources.
     * The Boolean parameter disposing indicates whether the method is called
     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).
     * Derived classes should override this method to dispose resource if needed.
     * @member SpeechSynthesizer.prototype.dispose
     * @function
     * @public
     * @param {boolean} disposing - Flag to request disposal.
     */
    dispose(disposing) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.privDisposed) {
                return;
            }
            if (disposing) {
                if (this.privAdapter) {
                    yield this.privAdapter.dispose();
                }
            }
            this.privDisposed = true;
        });
    }
    //
    // ################################################################################################################
    // IMPLEMENTATION.
    // Move to independent class
    // ################################################################################################################
    //
    createSynthesizerConfig(speechConfig) {
        return new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_7__.SynthesizerConfig(speechConfig, this.privProperties);
    }
    // Creates the synthesis adapter
    createSynthesisAdapter(authentication, connectionFactory, audioConfig, synthesizerConfig) {
        return new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_8__.SynthesisAdapterBase(authentication, connectionFactory, synthesizerConfig, this, this.audioConfig);
    }
    implCommonSynthesizeSetup() {
        let osPlatform = (typeof window !== "undefined") ? "Browser" : "Node";
        let osName = "unknown";
        let osVersion = "unknown";
        if (typeof navigator !== "undefined") {
            osPlatform = osPlatform + "/" + navigator.platform;
            osName = navigator.userAgent;
            osVersion = navigator.appVersion;
        }
        const synthesizerConfig = this.createSynthesizerConfig(new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_9__.SpeechServiceConfig(new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_9__.Context(new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_9__.OS(osPlatform, osName, osVersion))));
        const subscriptionKey = this.privProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.SpeechServiceConnection_Key, undefined);
        const authentication = (subscriptionKey && subscriptionKey !== "") ?
            new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_10__.CognitiveSubscriptionKeyAuthentication(subscriptionKey) :
            new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_11__.CognitiveTokenAuthentication(() => {
                const authorizationToken = this.privProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.SpeechServiceAuthorization_Token, undefined);
                return Promise.resolve(authorizationToken);
            }, () => {
                const authorizationToken = this.privProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.SpeechServiceAuthorization_Token, undefined);
                return Promise.resolve(authorizationToken);
            });
        this.privAdapter = this.createSynthesisAdapter(authentication, this.privConnectionFactory, this.audioConfig, synthesizerConfig);
        this.privAdapter.audioOutputFormat = _Audio_AudioOutputFormat__WEBPACK_IMPORTED_MODULE_12__.AudioOutputFormatImpl.fromSpeechSynthesisOutputFormat(_Exports__WEBPACK_IMPORTED_MODULE_13__.SpeechSynthesisOutputFormat[this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_4__.PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)]);
        this.privRestAdapter = new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_14__.SynthesisRestAdapter(synthesizerConfig, authentication);
    }
    speakImpl(text, IsSsml, cb, err, dataStream) {
        try {
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfDisposed(this.privDisposed);
            const requestId = (0,_common_Exports__WEBPACK_IMPORTED_MODULE_15__.createNoDashGuid)();
            let audioDestination;
            if (dataStream instanceof _Exports__WEBPACK_IMPORTED_MODULE_16__.PushAudioOutputStreamCallback) {
                audioDestination = new _Audio_AudioOutputStream__WEBPACK_IMPORTED_MODULE_17__.PushAudioOutputStreamImpl(dataStream);
            }
            else if (dataStream instanceof _Audio_AudioOutputStream__WEBPACK_IMPORTED_MODULE_17__.PullAudioOutputStream) {
                audioDestination = dataStream;
            }
            else if (dataStream !== undefined) {
                audioDestination = new _Audio_AudioFileWriter__WEBPACK_IMPORTED_MODULE_18__.AudioFileWriter(dataStream);
            }
            else {
                audioDestination = undefined;
            }
            this.synthesisRequestQueue.enqueue(new SynthesisRequest(requestId, text, IsSsml, (e) => {
                this.privSynthesizing = false;
                if (!!cb) {
                    try {
                        cb(e);
                    }
                    catch (e) {
                        if (!!err) {
                            err(e);
                        }
                    }
                }
                cb = undefined;
                /* eslint-disable no-empty */
                this.adapterSpeak().catch(() => { });
            }, (e) => {
                if (!!err) {
                    err(e);
                }
            }, audioDestination));
            /* eslint-disable no-empty-function */
            this.adapterSpeak().catch(() => { });
        }
        catch (error) {
            if (!!err) {
                if (error instanceof Error) {
                    const typedError = error;
                    err(typedError.name + ": " + typedError.message);
                }
                else {
                    err(error);
                }
            }
            // Destroy the synthesizer.
            /* eslint-disable no-empty */
            this.dispose(true).catch(() => { });
        }
    }
    getVoices(locale) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestId = (0,_common_Exports__WEBPACK_IMPORTED_MODULE_15__.createNoDashGuid)();
            const response = yield this.privRestAdapter.getVoicesList(requestId);
            if (response.ok && Array.isArray(response.json)) {
                let json = response.json;
                if (!!locale && locale.length > 0) {
                    json = json.filter((item) => !!item.Locale && item.Locale.toLowerCase() === locale.toLowerCase());
                }
                return new _Exports__WEBPACK_IMPORTED_MODULE_19__.SynthesisVoicesResult(requestId, json, undefined);
            }
            else {
                return new _Exports__WEBPACK_IMPORTED_MODULE_19__.SynthesisVoicesResult(requestId, undefined, `Error: ${response.status}: ${response.statusText}`);
            }
        });
    }
    adapterSpeak() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.privDisposed && !this.privSynthesizing) {
                this.privSynthesizing = true;
                const request = yield this.synthesisRequestQueue.dequeue();
                return this.privAdapter.Speak(request.text, request.isSSML, request.requestId, request.cb, request.err, request.dataStream);
            }
        });
    }
    static XMLEncode(text) {
        return text.replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&apos;");
    }
}
class SynthesisRequest {
    constructor(requestId, text, isSSML, cb, err, dataStream) {
        this.requestId = requestId;
        this.text = text;
        this.isSSML = isSSML;
        this.cb = cb;
        this.err = err;
        this.dataStream = dataStream;
    }
}

//# sourceMappingURL=SpeechSynthesizer.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechTranslationConfig.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechTranslationConfig.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeechTranslationConfig": () => (/* binding */ SpeechTranslationConfig),
/* harmony export */   "SpeechTranslationConfigImpl": () => (/* binding */ SpeechTranslationConfigImpl)
/* harmony export */ });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechConfig.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/OutputFormat.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ProfanityOption.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisOutputFormat.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/* eslint-disable max-classes-per-file */



/**
 * Speech translation configuration.
 * @class SpeechTranslationConfig
 */
class SpeechTranslationConfig extends _Exports__WEBPACK_IMPORTED_MODULE_0__.SpeechConfig {
    /**
     * Creates an instance of recognizer config.
     */
    constructor() {
        super();
    }
    /**
     * Static instance of SpeechTranslationConfig returned by passing a subscription key and service region.
     * @member SpeechTranslationConfig.fromSubscription
     * @function
     * @public
     * @param {string} subscriptionKey - The subscription key.
     * @param {string} region - The region name (see the <a href="https://aka.ms/csspeech/region">region page</a>).
     * @returns {SpeechTranslationConfig} The speech translation config.
     */
    static fromSubscription(subscriptionKey, region) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(subscriptionKey, "subscriptionKey");
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(region, "region");
        const ret = new SpeechTranslationConfigImpl();
        ret.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_Key, subscriptionKey);
        ret.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_Region, region);
        return ret;
    }
    /**
     * Static instance of SpeechTranslationConfig returned by passing authorization token and service region.
     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token
     * expires, the caller needs to refresh it by setting the property authorizationToken with a new
     * valid token. Otherwise, all the recognizers created by this SpeechTranslationConfig instance
     * will encounter errors during recognition.
     * As configuration values are copied when creating a new recognizer, the new token value will not apply
     * to recognizers that have already been created.
     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer
     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.
     * @member SpeechTranslationConfig.fromAuthorizationToken
     * @function
     * @public
     * @param {string} authorizationToken - The authorization token.
     * @param {string} region - The region name (see the <a href="https://aka.ms/csspeech/region">region page</a>).
     * @returns {SpeechTranslationConfig} The speech translation config.
     */
    static fromAuthorizationToken(authorizationToken, region) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(authorizationToken, "authorizationToken");
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(region, "region");
        const ret = new SpeechTranslationConfigImpl();
        ret.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceAuthorization_Token, authorizationToken);
        ret.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_Region, region);
        return ret;
    }
    /**
     * Creates an instance of the speech config with specified host and subscription key.
     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.
     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.
     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.
     * Note: To use an authorization token with fromHost, use fromHost(URL),
     * and then set the AuthorizationToken property on the created SpeechConfig instance.
     * Note: Added in version 1.9.0.
     * @member SpeechConfig.fromHost
     * @function
     * @public
     * @param {URL} host - The service endpoint to connect to. Format is "protocol://host:port" where ":port" is optional.
     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.
     * @returns {SpeechConfig} A speech factory instance.
     */
    static fromHost(hostName, subscriptionKey) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNull(hostName, "hostName");
        const speechImpl = new SpeechTranslationConfigImpl();
        speechImpl.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_Host, hostName.protocol + "//" + hostName.hostname + (hostName.port === "" ? "" : ":" + hostName.port));
        if (undefined !== subscriptionKey) {
            speechImpl.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_Key, subscriptionKey);
        }
        return speechImpl;
    }
    /**
     * Creates an instance of the speech translation config with specified endpoint and subscription key.
     * This method is intended only for users who use a non-standard service endpoint or paramters.
     * Note: The query properties specified in the endpoint URL are not changed, even if they are
     * set by any other APIs. For example, if language is defined in the uri as query parameter
     * "language=de-DE", and also set by the speechRecognitionLanguage property, the language
     * setting in uri takes precedence, and the effective language is "de-DE".
     * Only the properties that are not specified in the endpoint URL can be set by other APIs.
     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the
     * fromEndpoint method, and then set authorizationToken="token" on the created SpeechConfig instance to
     * use the authorization token.
     * @member SpeechTranslationConfig.fromEndpoint
     * @function
     * @public
     * @param {URL} endpoint - The service endpoint to connect to.
     * @param {string} subscriptionKey - The subscription key.
     * @returns {SpeechTranslationConfig} A speech config instance.
     */
    static fromEndpoint(endpoint, subscriptionKey) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNull(endpoint, "endpoint");
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNull(subscriptionKey, "subscriptionKey");
        const ret = new SpeechTranslationConfigImpl();
        ret.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);
        ret.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_Key, subscriptionKey);
        return ret;
    }
}
/**
 * @private
 * @class SpeechTranslationConfigImpl
 */
class SpeechTranslationConfigImpl extends SpeechTranslationConfig {
    constructor() {
        super();
        this.privSpeechProperties = new _Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyCollection();
        this.outputFormat = _Exports__WEBPACK_IMPORTED_MODULE_4__.OutputFormat.Simple;
    }
    /**
     * Gets/Sets the authorization token.
     * If this is set, subscription key is ignored.
     * User needs to make sure the provided authorization token is valid and not expired.
     * @member SpeechTranslationConfigImpl.prototype.authorizationToken
     * @function
     * @public
     * @param {string} value - The authorization token.
     */
    set authorizationToken(value) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(value, "value");
        this.privSpeechProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceAuthorization_Token, value);
    }
    /**
     * Sets the speech recognition language.
     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage
     * @function
     * @public
     * @param {string} value - The authorization token.
     */
    set speechRecognitionLanguage(value) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(value, "value");
        this.privSpeechProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_RecoLanguage, value);
    }
    /**
     * Gets the speech recognition language.
     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage
     * @function
     * @public
     * @return {string} The speechRecognitionLanguage.
     */
    get speechRecognitionLanguage() {
        return this.privSpeechProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId[_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_RecoLanguage]);
    }
    /**
     * @member SpeechTranslationConfigImpl.prototype.subscriptionKey
     * @function
     * @public
     */
    get subscriptionKey() {
        return this.privSpeechProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId[_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_Key]);
    }
    /**
     * Gets the output format
     * @member SpeechTranslationConfigImpl.prototype.outputFormat
     * @function
     * @public
     */
    get outputFormat() {
        // eslint-disable-next-line
        return _Exports__WEBPACK_IMPORTED_MODULE_4__.OutputFormat[this.privSpeechProperties.getProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_5__.OutputFormatPropertyName, undefined)];
    }
    /**
     * Gets/Sets the output format
     * @member SpeechTranslationConfigImpl.prototype.outputFormat
     * @function
     * @public
     */
    set outputFormat(value) {
        this.privSpeechProperties.setProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_5__.OutputFormatPropertyName, _Exports__WEBPACK_IMPORTED_MODULE_4__.OutputFormat[value]);
    }
    /**
     * Gets the endpoint id.
     * @member SpeechTranslationConfigImpl.prototype.endpointId
     * @function
     * @public
     */
    get endpointId() {
        return this.privSpeechProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_EndpointId);
    }
    /**
     * Gets/Sets the endpoint id.
     * @member SpeechTranslationConfigImpl.prototype.endpointId
     * @function
     * @public
     */
    set endpointId(value) {
        this.privSpeechProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_EndpointId, value);
    }
    /**
     * Add a (text) target language to translate into.
     * @member SpeechTranslationConfigImpl.prototype.addTargetLanguage
     * @function
     * @public
     * @param {string} value - The language such as de-DE
     */
    addTargetLanguage(value) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(value, "value");
        const languages = this.targetLanguages;
        languages.push(value);
        this.privSpeechProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(","));
    }
    /**
     * Gets the (text) target language to translate into.
     * @member SpeechTranslationConfigImpl.prototype.targetLanguages
     * @function
     * @public
     * @param {string} value - The language such as de-DE
     */
    get targetLanguages() {
        if (this.privSpeechProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {
            return this.privSpeechProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_TranslationToLanguages).split(",");
        }
        else {
            return [];
        }
    }
    /**
     * Gets the voice name.
     * @member SpeechTranslationConfigImpl.prototype.voiceName
     * @function
     * @public
     */
    get voiceName() {
        return this.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId[_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_TranslationVoice]);
    }
    /**
     * Gets/Sets the voice of the translated language, enable voice synthesis output.
     * @member SpeechTranslationConfigImpl.prototype.voiceName
     * @function
     * @public
     * @param {string} value - The name of the voice.
     */
    set voiceName(value) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(value, "value");
        this.privSpeechProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_TranslationVoice, value);
    }
    /**
     * Provides the region.
     * @member SpeechTranslationConfigImpl.prototype.region
     * @function
     * @public
     * @returns {string} The region.
     */
    get region() {
        return this.privSpeechProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_Region);
    }
    setProxy(proxyHostName, proxyPort, proxyUserName, proxyPassword) {
        this.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId[_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName);
        this.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId[_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_ProxyPort], proxyPort);
        this.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId[_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName);
        this.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId[_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword);
    }
    /**
     * Gets an arbitrary property value.
     * @member SpeechTranslationConfigImpl.prototype.getProperty
     * @function
     * @public
     * @param {string} name - The name of the property.
     * @param {string} def - The default value of the property in case it is not set.
     * @returns {string} The value of the property.
     */
    getProperty(name, def) {
        return this.privSpeechProperties.getProperty(name, def);
    }
    /**
     * Gets/Sets an arbitrary property value.
     * @member SpeechTranslationConfigImpl.prototype.setProperty
     * @function
     * @public
     * @param {string | PropertyId} name - The name of the property to set.
     * @param {string} value - The value of the property.
     */
    setProperty(name, value) {
        this.privSpeechProperties.setProperty(name, value);
    }
    /**
     * Provides access to custom properties.
     * @member SpeechTranslationConfigImpl.prototype.properties
     * @function
     * @public
     * @returns {PropertyCollection} The properties.
     */
    get properties() {
        return this.privSpeechProperties;
    }
    /**
     * Dispose of associated resources.
     * @member SpeechTranslationConfigImpl.prototype.close
     * @function
     * @public
     */
    close() {
        return;
    }
    setServiceProperty(name, value) {
        const currentProperties = JSON.parse(this.privSpeechProperties.getProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_5__.ServicePropertiesPropertyName, "{}"));
        currentProperties[name] = value;
        this.privSpeechProperties.setProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_5__.ServicePropertiesPropertyName, JSON.stringify(currentProperties));
    }
    setProfanity(profanity) {
        this.privSpeechProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceResponse_ProfanityOption, _Exports__WEBPACK_IMPORTED_MODULE_6__.ProfanityOption[profanity]);
    }
    enableAudioLogging() {
        this.privSpeechProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_EnableAudioLogging, "true");
    }
    requestWordLevelTimestamps() {
        this.privSpeechProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, "true");
    }
    enableDictation() {
        this.privSpeechProperties.setProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_5__.ForceDictationPropertyName, "true");
    }
    get speechSynthesisLanguage() {
        return this.privSpeechProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_SynthLanguage);
    }
    set speechSynthesisLanguage(language) {
        this.privSpeechProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_SynthLanguage, language);
    }
    get speechSynthesisVoiceName() {
        return this.privSpeechProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_SynthVoice);
    }
    set speechSynthesisVoiceName(voice) {
        this.privSpeechProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_SynthVoice, voice);
    }
    get speechSynthesisOutputFormat() {
        // eslint-disable-next-line
        return _Exports__WEBPACK_IMPORTED_MODULE_7__.SpeechSynthesisOutputFormat[this.privSpeechProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)];
    }
    set speechSynthesisOutputFormat(format) {
        this.privSpeechProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_SynthOutputFormat, _Exports__WEBPACK_IMPORTED_MODULE_7__.SpeechSynthesisOutputFormat[format]);
    }
}

//# sourceMappingURL=SpeechTranslationConfig.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SynthesisResult.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SynthesisResult.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SynthesisResult": () => (/* binding */ SynthesisResult)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Base class for synthesis results
 * @class SynthesisResult
 * Added in version 1.20.0
 */
class SynthesisResult {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {string} resultId - The result id.
     * @param {ResultReason} reason - The reason.
     * @param {string} errorDetails - Error details, if provided.
     * @param {PropertyCollection} properties - Additional properties, if provided.
     */
    constructor(resultId, reason, errorDetails, properties) {
        this.privResultId = resultId;
        this.privReason = reason;
        this.privErrorDetails = errorDetails;
        this.privProperties = properties;
    }
    /**
     * Specifies the result identifier.
     * @member SynthesisResult.prototype.resultId
     * @function
     * @public
     * @returns {string} Specifies the result identifier.
     */
    get resultId() {
        return this.privResultId;
    }
    /**
     * Specifies status of the result.
     * @member SynthesisResult.prototype.reason
     * @function
     * @public
     * @returns {ResultReason} Specifies status of the result.
     */
    get reason() {
        return this.privReason;
    }
    /**
     * In case of an unsuccessful synthesis, provides details of the occurred error.
     * @member SynthesisResult.prototype.errorDetails
     * @function
     * @public
     * @returns {string} a brief description of an error.
     */
    get errorDetails() {
        return this.privErrorDetails;
    }
    /**
     * The set of properties exposed in the result.
     * @member SynthesisResult.prototype.properties
     * @function
     * @public
     * @returns {PropertyCollection} The set of properties exposed in the result.
     */
    get properties() {
        return this.privProperties;
    }
}

//# sourceMappingURL=SynthesisResult.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SynthesisVoicesResult.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SynthesisVoicesResult.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SynthesisVoicesResult": () => (/* binding */ SynthesisVoicesResult)
/* harmony export */ });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SynthesisResult.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ResultReason.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceInfo.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Defines result of speech synthesis.
 * @class SynthesisVoicesResult
 * Added in version 1.20.0
 */
class SynthesisVoicesResult extends _Exports__WEBPACK_IMPORTED_MODULE_0__.SynthesisResult {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param requestId - result id for request.
     * @param json - json payload from endpoint.
     */
    constructor(requestId, json, errorDetails) {
        if (Array.isArray(json)) {
            super(requestId, _Exports__WEBPACK_IMPORTED_MODULE_1__.ResultReason.VoicesListRetrieved, undefined, new _Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyCollection());
            this.privVoices = [];
            for (const item of json) {
                this.privVoices.push(new _Exports__WEBPACK_IMPORTED_MODULE_3__.VoiceInfo(item));
            }
        }
        else {
            super(requestId, _Exports__WEBPACK_IMPORTED_MODULE_1__.ResultReason.Canceled, errorDetails ? errorDetails : "Error information unavailable", new _Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyCollection());
        }
    }
    /**
     * The list of voices
     * @member SynthesisVoicesResult.prototype.voices
     * @function
     * @public
     * @returns {VoiceInfo[]} List of synthesized voices.
     */
    get voices() {
        return this.privVoices;
    }
}

//# sourceMappingURL=SynthesisVoicesResult.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/Conversation.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/Conversation.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Conversation": () => (/* binding */ Conversation),
/* harmony export */   "ConversationImpl": () => (/* binding */ ConversationImpl)
/* harmony export */ });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationConnectionConfig.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationTranslatorInterfaces.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationManager.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationTranslatorRecognizer.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js");
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationParticipantsChangedEventArgs.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ParticipantChangedReason.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationTranslationEventArgs.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ProfanityOption.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/IParticipant.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
// Multi-device Conversation is a Preview feature.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/* eslint-disable max-classes-per-file */




class Conversation {
    constructor() {
        return;
    }
    /**
     * Create a conversation
     * @param speechConfig
     * @param cb
     * @param err
     */
    static createConversationAsync(speechConfig, arg2, arg3, arg4) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrUndefined(speechConfig, _common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__.ConversationConnectionConfig.restErrors.invalidArgs.replace("{arg}", "config"));
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrUndefined(speechConfig.region, _common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__.ConversationConnectionConfig.restErrors.invalidArgs.replace("{arg}", "SpeechServiceConnection_Region"));
        if (!speechConfig.subscriptionKey && !speechConfig.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId[_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceAuthorization_Token])) {
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrUndefined(speechConfig.subscriptionKey, _common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__.ConversationConnectionConfig.restErrors.invalidArgs.replace("{arg}", "SpeechServiceConnection_Key"));
        }
        let conversationImpl;
        let cb;
        let err;
        if (typeof arg2 === "string") {
            conversationImpl = new ConversationImpl(speechConfig, arg2);
            // eslint-disable-next-line @typescript-eslint/no-empty-function
            (0,_common_Exports__WEBPACK_IMPORTED_MODULE_3__.marshalPromiseToCallbacks)((() => __awaiter(this, void 0, void 0, function* () { }))(), arg3, arg4);
        }
        else {
            conversationImpl = new ConversationImpl(speechConfig);
            cb = arg2;
            err = arg3;
            conversationImpl.createConversationAsync((() => {
                if (!!cb) {
                    cb();
                }
            }), (error) => {
                if (!!err) {
                    err(error);
                }
            });
        }
        return conversationImpl;
    }
}
class ConversationImpl extends Conversation {
    /**
     * Create a conversation impl
     * @param speechConfig
     * @param {string} id - optional conversationId
     */
    constructor(speechConfig, id) {
        super();
        this.privErrors = _common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__.ConversationConnectionConfig.restErrors;
        /** websocket callbacks */
        /* eslint-disable @typescript-eslint/typedef */
        this.onConnected = (e) => {
            var _a;
            this.privIsConnected = true;
            try {
                if (!!((_a = this.privConversationTranslator) === null || _a === void 0 ? void 0 : _a.sessionStarted)) {
                    this.privConversationTranslator.sessionStarted(this.privConversationTranslator, e);
                }
            }
            catch (e) {
                //
            }
        };
        this.onDisconnected = (e) => {
            var _a;
            try {
                if (!!((_a = this.privConversationTranslator) === null || _a === void 0 ? void 0 : _a.sessionStopped)) {
                    this.privConversationTranslator.sessionStopped(this.privConversationTranslator, e);
                }
            }
            catch (e) {
                //
            }
            finally {
                void this.close(false);
            }
        };
        this.onCanceled = (r, e) => {
            var _a;
            try {
                if (!!((_a = this.privConversationTranslator) === null || _a === void 0 ? void 0 : _a.canceled)) {
                    this.privConversationTranslator.canceled(this.privConversationTranslator, e);
                }
            }
            catch (e) {
                //
            }
        };
        this.onParticipantUpdateCommandReceived = (r, e) => {
            try {
                const updatedParticipant = this.privParticipants.getParticipant(e.id);
                if (updatedParticipant !== undefined) {
                    switch (e.key) {
                        case _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.ConversationTranslatorCommandTypes.changeNickname:
                            updatedParticipant.displayName = e.value;
                            break;
                        case _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.ConversationTranslatorCommandTypes.setUseTTS:
                            updatedParticipant.isUsingTts = e.value;
                            break;
                        case _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.ConversationTranslatorCommandTypes.setProfanityFiltering:
                            updatedParticipant.profanity = e.value;
                            break;
                        case _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.ConversationTranslatorCommandTypes.setMute:
                            updatedParticipant.isMuted = e.value;
                            break;
                        case _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.ConversationTranslatorCommandTypes.setTranslateToLanguages:
                            updatedParticipant.translateToLanguages = e.value;
                            break;
                    }
                    this.privParticipants.addOrUpdateParticipant(updatedParticipant);
                    if (!!this.privConversationTranslator) {
                        this.privConversationTranslator.participantsChanged(this.privConversationTranslator, new _Exports__WEBPACK_IMPORTED_MODULE_5__.ConversationParticipantsChangedEventArgs(_Exports__WEBPACK_IMPORTED_MODULE_6__.ParticipantChangedReason.Updated, [this.toParticipant(updatedParticipant)], e.sessionId));
                    }
                }
            }
            catch (e) {
                //
            }
        };
        this.onLockRoomCommandReceived = () => {
            // TODO
        };
        this.onMuteAllCommandReceived = (r, e) => {
            try {
                this.privParticipants.participants.forEach((p) => p.isMuted = (p.isHost ? false : e.isMuted));
                if (!!this.privConversationTranslator) {
                    this.privConversationTranslator.participantsChanged(this.privConversationTranslator, new _Exports__WEBPACK_IMPORTED_MODULE_5__.ConversationParticipantsChangedEventArgs(_Exports__WEBPACK_IMPORTED_MODULE_6__.ParticipantChangedReason.Updated, this.toParticipants(false), e.sessionId));
                }
            }
            catch (e) {
                //
            }
        };
        this.onParticipantJoinCommandReceived = (r, e) => {
            try {
                const newParticipant = this.privParticipants.addOrUpdateParticipant(e.participant);
                if (newParticipant !== undefined) {
                    if (!!this.privConversationTranslator) {
                        this.privConversationTranslator.participantsChanged(this.privConversationTranslator, new _Exports__WEBPACK_IMPORTED_MODULE_5__.ConversationParticipantsChangedEventArgs(_Exports__WEBPACK_IMPORTED_MODULE_6__.ParticipantChangedReason.JoinedConversation, [this.toParticipant(newParticipant)], e.sessionId));
                    }
                }
            }
            catch (e) {
                //
            }
        };
        this.onParticipantLeaveCommandReceived = (r, e) => {
            try {
                const ejectedParticipant = this.privParticipants.getParticipant(e.participant.id);
                if (ejectedParticipant !== undefined) {
                    // remove the participant from the internal participants list
                    this.privParticipants.deleteParticipant(e.participant.id);
                    if (!!this.privConversationTranslator) {
                        // notify subscribers that the participant has left the conversation
                        this.privConversationTranslator.participantsChanged(this.privConversationTranslator, new _Exports__WEBPACK_IMPORTED_MODULE_5__.ConversationParticipantsChangedEventArgs(_Exports__WEBPACK_IMPORTED_MODULE_6__.ParticipantChangedReason.LeftConversation, [this.toParticipant(ejectedParticipant)], e.sessionId));
                    }
                }
            }
            catch (e) {
                //
            }
        };
        this.onTranslationReceived = (r, e) => {
            try {
                switch (e.command) {
                    case _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.ConversationTranslatorMessageTypes.final:
                        if (!!this.privConversationTranslator) {
                            this.privConversationTranslator.transcribed(this.privConversationTranslator, new _Exports__WEBPACK_IMPORTED_MODULE_7__.ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));
                        }
                        break;
                    case _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.ConversationTranslatorMessageTypes.partial:
                        if (!!this.privConversationTranslator) {
                            this.privConversationTranslator.transcribing(this.privConversationTranslator, new _Exports__WEBPACK_IMPORTED_MODULE_7__.ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));
                        }
                        break;
                    case _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.ConversationTranslatorMessageTypes.instantMessage:
                        if (!!this.privConversationTranslator) {
                            this.privConversationTranslator.textMessageReceived(this.privConversationTranslator, new _Exports__WEBPACK_IMPORTED_MODULE_7__.ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));
                        }
                        break;
                }
            }
            catch (e) {
                //
            }
        };
        this.onParticipantsListReceived = (r, e) => {
            var _a;
            try {
                // check if the session token needs to be updated
                if (e.sessionToken !== undefined && e.sessionToken !== null) {
                    this.privRoom.token = e.sessionToken;
                }
                // save the participants
                this.privParticipants.participants = [...e.participants];
                // enable the conversation
                if (this.privParticipants.me !== undefined) {
                    this.privIsReady = true;
                }
                if (!!this.privConversationTranslator) {
                    this.privConversationTranslator.participantsChanged(this.privConversationTranslator, new _Exports__WEBPACK_IMPORTED_MODULE_5__.ConversationParticipantsChangedEventArgs(_Exports__WEBPACK_IMPORTED_MODULE_6__.ParticipantChangedReason.JoinedConversation, this.toParticipants(true), e.sessionId));
                }
                // if this is the host, update the nickname if needed
                if (this.me.isHost) {
                    const nickname = (_a = this.privConversationTranslator) === null || _a === void 0 ? void 0 : _a.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.ConversationTranslator_Name);
                    if (nickname !== undefined && nickname.length > 0 && nickname !== this.me.displayName) {
                        // issue a change nickname request
                        this.changeNicknameAsync(nickname);
                    }
                }
            }
            catch (e) {
                //
            }
        };
        this.onConversationExpiration = (r, e) => {
            try {
                if (!!this.privConversationTranslator) {
                    this.privConversationTranslator.conversationExpiration(this.privConversationTranslator, e);
                }
            }
            catch (e) {
                //
            }
        };
        this.privIsConnected = false;
        this.privIsDisposed = false;
        this.privConversationId = "";
        this.privProperties = new _Exports__WEBPACK_IMPORTED_MODULE_8__.PropertyCollection();
        this.privManager = new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_9__.ConversationManager();
        // check the speech language
        const language = speechConfig.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId[_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_RecoLanguage]);
        if (!language) {
            speechConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId[_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_RecoLanguage], _common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__.ConversationConnectionConfig.defaultLanguageCode);
        }
        this.privLanguage = speechConfig.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId[_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_RecoLanguage]);
        if (!id) {
            // check the target language(s)
            if (speechConfig.targetLanguages.length === 0) {
                speechConfig.addTargetLanguage(this.privLanguage);
            }
            // check the profanity setting: speech and conversationTranslator should be in sync
            const profanity = speechConfig.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId[_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceResponse_ProfanityOption]);
            if (!profanity) {
                speechConfig.setProfanity(_Exports__WEBPACK_IMPORTED_MODULE_10__.ProfanityOption.Masked);
            }
            // check the nickname: it should pass this regex: ^\w+([\s-][\w\(\)]+)*$"
            // TODO: specify the regex required. Nicknames must be unique or get the duplicate nickname error
            // TODO: check what the max length is and if a truncation is required or if the service handles it without an error
            let hostNickname = speechConfig.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId[_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.ConversationTranslator_Name]);
            if (hostNickname === undefined || hostNickname === null) {
                hostNickname = "Host";
            }
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrTooLong(hostNickname, "nickname", 50);
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrTooShort(hostNickname, "nickname", 2);
            speechConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId[_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.ConversationTranslator_Name], hostNickname);
        }
        else {
            this.privConversationId = id;
        }
        // save the speech config for future usage
        this.privConfig = speechConfig;
        // save the config properties
        const configImpl = speechConfig;
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNull(configImpl, "speechConfig");
        this.privProperties = configImpl.properties.clone();
        this.privIsConnected = false;
        this.privParticipants = new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.InternalParticipants();
        this.privIsReady = false;
        this.privTextMessageMaxLength = 1000;
    }
    // get the internal data about a conversation
    get room() {
        return this.privRoom;
    }
    // get the wrapper for connecting to the websockets
    get connection() {
        return this.privConversationRecognizer; // this.privConnection;
    }
    // get the config
    get config() {
        return this.privConfig;
    }
    // get the conversation Id
    get conversationId() {
        return this.privRoom ? this.privRoom.roomId : this.privConversationId;
    }
    // get the properties
    get properties() {
        return this.privProperties;
    }
    // get the speech language
    get speechRecognitionLanguage() {
        return this.privLanguage;
    }
    get isMutedByHost() {
        var _a, _b;
        return ((_a = this.privParticipants.me) === null || _a === void 0 ? void 0 : _a.isHost) ? false : (_b = this.privParticipants.me) === null || _b === void 0 ? void 0 : _b.isMuted;
    }
    get isConnected() {
        return this.privIsConnected && this.privIsReady;
    }
    get participants() {
        return this.toParticipants(true);
    }
    get me() {
        return this.toParticipant(this.privParticipants.me);
    }
    get host() {
        return this.toParticipant(this.privParticipants.host);
    }
    get transcriberRecognizer() {
        return this.privTranscriberRecognizer;
    }
    get conversationInfo() {
        const convId = this.conversationId;
        const p = this.participants.map((part) => ({
            id: part.id,
            preferredLanguage: part.preferredLanguage,
            voice: part.voice
        }));
        const props = {};
        for (const key of _common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__.ConversationConnectionConfig.transcriptionEventKeys) {
            const val = this.properties.getProperty(key, "");
            if (val !== "") {
                props[key] = val;
            }
        }
        const info = { id: convId, participants: p, conversationProperties: props };
        return info;
    }
    get canSend() {
        var _a;
        return this.privIsConnected && !((_a = this.privParticipants.me) === null || _a === void 0 ? void 0 : _a.isMuted);
    }
    get canSendAsHost() {
        var _a;
        return this.privIsConnected && ((_a = this.privParticipants.me) === null || _a === void 0 ? void 0 : _a.isHost);
    }
    // get / set the speech auth token
    // eslint-disable-next-line @typescript-eslint/member-ordering
    get authorizationToken() {
        return this.privToken;
    }
    set authorizationToken(value) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(value, "authorizationToken");
        this.privToken = value;
    }
    set conversationTranslator(conversationTranslator) {
        this.privConversationTranslator = conversationTranslator;
    }
    /**
     * Create a new conversation as Host
     * @param cb
     * @param err
     */
    createConversationAsync(cb, err) {
        try {
            if (!!this.privConversationRecognizer) {
                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);
            }
            this.privManager.createOrJoin(this.privProperties, undefined, ((room) => {
                if (!room) {
                    this.handleError(new Error(this.privErrors.permissionDeniedConnect), err);
                }
                this.privRoom = room;
                this.handleCallback(cb, err);
            }), ((error) => {
                this.handleError(error, err);
            }));
        }
        catch (error) {
            this.handleError(error, err);
        }
    }
    /**
     * Starts a new conversation as host.
     * @param cb
     * @param err
     */
    startConversationAsync(cb, err) {
        try {
            // check if there is already a recognizer
            if (!!this.privConversationRecognizer) {
                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);
            }
            // check if there is conversation data available
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedConnect);
            // connect to the conversation websocket
            this.privParticipants.meId = this.privRoom.participantId;
            this.privConversationRecognizer = _common_speech_Exports__WEBPACK_IMPORTED_MODULE_11__.ConversationRecognizerFactory.fromConfig(this, this.privConfig);
            // Because ConversationTranslator manually sets up and manages the connection, Conversation
            // has to forward serviceRecognizer connection events that usually get passed automatically
            this.privConversationRecognizer.connected = this.onConnected;
            this.privConversationRecognizer.disconnected = this.onDisconnected;
            this.privConversationRecognizer.canceled = this.onCanceled;
            this.privConversationRecognizer.participantUpdateCommandReceived = this.onParticipantUpdateCommandReceived;
            this.privConversationRecognizer.lockRoomCommandReceived = this.onLockRoomCommandReceived;
            this.privConversationRecognizer.muteAllCommandReceived = this.onMuteAllCommandReceived;
            this.privConversationRecognizer.participantJoinCommandReceived = this.onParticipantJoinCommandReceived;
            this.privConversationRecognizer.participantLeaveCommandReceived = this.onParticipantLeaveCommandReceived;
            this.privConversationRecognizer.translationReceived = this.onTranslationReceived;
            this.privConversationRecognizer.participantsListReceived = this.onParticipantsListReceived;
            this.privConversationRecognizer.conversationExpiration = this.onConversationExpiration;
            this.privConversationRecognizer.connect(this.privRoom.token, (() => {
                this.handleCallback(cb, err);
            }), ((error) => {
                this.handleError(error, err);
            }));
        }
        catch (error) {
            this.handleError(error, err);
        }
    }
    /**
     * Join a conversation as a participant.
     * @param { IParticipant } participant - participant to add
     * @param cb
     * @param err
     */
    addParticipantAsync(participant, cb, err) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrUndefined(participant, "Participant");
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_3__.marshalPromiseToCallbacks)(this.addParticipantImplAsync(participant), cb, err);
    }
    /**
     * Join a conversation as a participant.
     * @param conversation
     * @param nickname
     * @param lang
     * @param cb
     * @param err
     */
    joinConversationAsync(conversationId, nickname, lang, cb, err) {
        try {
            // TODO
            // if (!!this.privConversationRecognizer) {
            //     throw new Error(this.privErrors.permissionDeniedStart);
            // }
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(conversationId, this.privErrors.invalidArgs.replace("{arg}", "conversationId"));
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace("{arg}", "nickname"));
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(lang, this.privErrors.invalidArgs.replace("{arg}", "language"));
            // join the conversation
            this.privManager.createOrJoin(this.privProperties, conversationId, ((room) => {
                _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrUndefined(room, this.privErrors.permissionDeniedConnect);
                this.privRoom = room;
                this.privConfig.authorizationToken = room.cognitiveSpeechAuthToken;
                // join callback
                if (!!cb) {
                    cb(room.cognitiveSpeechAuthToken);
                }
            }), ((error) => {
                this.handleError(error, err);
            }));
        }
        catch (error) {
            this.handleError(error, err);
        }
    }
    /**
     * Deletes a conversation
     * @param cb
     * @param err
     */
    deleteConversationAsync(cb, err) {
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_3__.marshalPromiseToCallbacks)(this.deleteConversationImplAsync(), cb, err);
    }
    deleteConversationImplAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrUndefined(this.privProperties, this.privErrors.permissionDeniedConnect);
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(this.privRoom.token, this.privErrors.permissionDeniedConnect);
            yield this.privManager.leave(this.privProperties, this.privRoom.token);
            this.dispose();
        });
    }
    /**
     * Issues a request to close the client websockets
     * @param cb
     * @param err
     */
    endConversationAsync(cb, err) {
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_3__.marshalPromiseToCallbacks)(this.endConversationImplAsync(), cb, err);
    }
    endConversationImplAsync() {
        return this.close(true);
    }
    /**
     * Issues a request to lock the conversation
     * @param cb
     * @param err
     */
    lockConversationAsync(cb, err) {
        try {
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfDisposed(this.privIsDisposed);
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);
            if (!this.canSendAsHost) {
                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace("{command}", "lock")), err);
            }
            if (!!this.privConversationRecognizer) {
                this.privConversationRecognizer.sendRequest(this.getLockCommand(true), (() => {
                    this.handleCallback(cb, err);
                }), ((error) => {
                    this.handleError(error, err);
                }));
            }
        }
        catch (error) {
            this.handleError(error, err);
        }
    }
    /**
     * Issues a request to mute the conversation
     * @param cb
     * @param err
     */
    muteAllParticipantsAsync(cb, err) {
        try {
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfDisposed(this.privIsDisposed);
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrUndefined(this.privConversationRecognizer, this.privErrors.permissionDeniedSend);
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);
            // check the user's permissions
            if (!this.canSendAsHost) {
                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace("{command}", "mute")), err);
            }
            if (!!this.privConversationRecognizer) {
                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(true), (() => {
                    this.handleCallback(cb, err);
                }), ((error) => {
                    this.handleError(error, err);
                }));
            }
        }
        catch (error) {
            this.handleError(error, err);
        }
    }
    /**
     * Issues a request to mute a participant in the conversation
     * @param userId
     * @param cb
     * @param err
     */
    muteParticipantAsync(userId, cb, err) {
        try {
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfDisposed(this.privIsDisposed);
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace("{arg}", "userId"));
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);
            // check the connection is open (host + participant can perform the mute command)
            if (!this.canSend) {
                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);
            }
            // if not host, check the participant is not muting another participant
            if (!this.me.isHost && this.me.id !== userId) {
                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace("{command}", "mute")), err);
            }
            // check the user exists
            const exists = this.privParticipants.getParticipantIndex(userId);
            if (exists === -1) {
                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);
            }
            if (!!this.privConversationRecognizer) {
                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, true), (() => {
                    this.handleCallback(cb, err);
                }), ((error) => {
                    this.handleError(error, err);
                }));
            }
        }
        catch (error) {
            this.handleError(error, err);
        }
    }
    /**
     * Issues a request to remove a participant from the conversation
     * @param userId
     * @param cb
     * @param err
     */
    removeParticipantAsync(userId, cb, err) {
        try {
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfDisposed(this.privIsDisposed);
            if (!!this.privTranscriberRecognizer && userId.hasOwnProperty("id")) {
                // Assume this is a transcription participant
                (0,_common_Exports__WEBPACK_IMPORTED_MODULE_3__.marshalPromiseToCallbacks)(this.removeParticipantImplAsync(userId), cb, err);
            }
            else {
                _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());
                _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);
                if (!this.canSendAsHost) {
                    this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace("{command}", "remove")), err);
                }
                let participantId = "";
                if (typeof userId === "string") {
                    participantId = userId;
                }
                else if (userId.hasOwnProperty("id")) {
                    const participant = userId;
                    participantId = participant.id;
                }
                else if (userId.hasOwnProperty("userId")) {
                    const user = userId;
                    participantId = user.userId;
                }
                _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(participantId, this.privErrors.invalidArgs.replace("{arg}", "userId"));
                // check the participant exists
                const index = this.participants.findIndex((p) => p.id === participantId);
                if (index === -1) {
                    this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);
                }
                if (!!this.privConversationRecognizer) {
                    this.privConversationRecognizer.sendRequest(this.getEjectCommand(participantId), (() => {
                        this.handleCallback(cb, err);
                    }), ((error) => {
                        this.handleError(error, err);
                    }));
                }
            }
        }
        catch (error) {
            this.handleError(error, err);
        }
    }
    /**
     * Issues a request to unlock the conversation
     * @param cb
     * @param err
     */
    unlockConversationAsync(cb, err) {
        try {
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfDisposed(this.privIsDisposed);
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);
            if (!this.canSendAsHost) {
                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace("{command}", "unlock")), err);
            }
            if (!!this.privConversationRecognizer) {
                this.privConversationRecognizer.sendRequest(this.getLockCommand(false), (() => {
                    this.handleCallback(cb, err);
                }), ((error) => {
                    this.handleError(error, err);
                }));
            }
        }
        catch (error) {
            this.handleError(error, err);
        }
    }
    /**
     * Issues a request to unmute all participants in the conversation
     * @param cb
     * @param err
     */
    unmuteAllParticipantsAsync(cb, err) {
        try {
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfDisposed(this.privIsDisposed);
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);
            if (!this.canSendAsHost) {
                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace("{command}", "unmute all")), err);
            }
            if (!!this.privConversationRecognizer) {
                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(false), (() => {
                    this.handleCallback(cb, err);
                }), ((error) => {
                    this.handleError(error, err);
                }));
            }
        }
        catch (error) {
            this.handleError(error, err);
        }
    }
    /**
     * Issues a request to unmute a participant in the conversation
     * @param userId
     * @param cb
     * @param err
     */
    unmuteParticipantAsync(userId, cb, err) {
        try {
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfDisposed(this.privIsDisposed);
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace("{arg}", "userId"));
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);
            // check the connection is open (host + participant can perform the mute command)
            if (!this.canSend) {
                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);
            }
            // if not host, check the participant is not muting another participant
            if (!this.me.isHost && this.me.id !== userId) {
                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace("{command}", "mute")), err);
            }
            // check the user exists
            const exists = this.privParticipants.getParticipantIndex(userId);
            if (exists === -1) {
                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);
            }
            if (!!this.privConversationRecognizer) {
                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, false), (() => {
                    this.handleCallback(cb, err);
                }), ((error) => {
                    this.handleError(error, err);
                }));
            }
        }
        catch (error) {
            this.handleError(error, err);
        }
    }
    /**
     * Send a text message
     * @param message
     * @param cb
     * @param err
     */
    sendTextMessageAsync(message, cb, err) {
        try {
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfDisposed(this.privIsDisposed);
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace("{arg}", "message"));
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);
            if (!this.canSend) {
                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);
            }
            // TODO: is a max length check required?
            if (message.length > this.privTextMessageMaxLength) {
                this.handleError(new Error(this.privErrors.invalidArgs.replace("{arg}", "message length")), err);
            }
            if (!!this.privConversationRecognizer) {
                this.privConversationRecognizer.sendRequest(this.getMessageCommand(message), (() => {
                    this.handleCallback(cb, err);
                }), ((error) => {
                    this.handleError(error, err);
                }));
            }
        }
        catch (error) {
            this.handleError(error, err);
        }
    }
    /**
     * Set translated to languages
     * @param {string[]} languages - languages to translate to
     * @param cb
     * @param err
     */
    setTranslatedLanguagesAsync(languages, cb, err) {
        try {
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfDisposed(this.privIsDisposed);
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfArrayEmptyOrWhitespace(languages, this.privErrors.invalidArgs.replace("{arg}", "languages"));
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);
            if (!this.canSend) {
                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);
            }
            if (!!this.privConversationRecognizer) {
                this.privConversationRecognizer.sendRequest(this.getSetTranslateToLanguagesCommand(languages), (() => {
                    this.handleCallback(cb, err);
                }), ((error) => {
                    this.handleError(error, err);
                }));
            }
        }
        catch (error) {
            this.handleError(error, err);
        }
    }
    /**
     * Change nickname
     * @param {string} nickname - new nickname for the room
     * @param cb
     * @param err
     */
    changeNicknameAsync(nickname, cb, err) {
        try {
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfDisposed(this.privIsDisposed);
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace("{arg}", "nickname"));
            _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);
            if (!this.canSend) {
                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);
            }
            if (!!this.privConversationRecognizer) {
                this.privConversationRecognizer.sendRequest(this.getChangeNicknameCommand(nickname), (() => {
                    this.handleCallback(cb, err);
                }), ((error) => {
                    this.handleError(error, err);
                }));
            }
        }
        catch (error) {
            this.handleError(error, err);
        }
    }
    isDisposed() {
        return this.privIsDisposed;
    }
    dispose() {
        if (this.isDisposed) {
            return;
        }
        this.privIsDisposed = true;
        if (!!this.config) {
            this.config.close();
        }
        this.privConfig = undefined;
        this.privLanguage = undefined;
        this.privProperties = undefined;
        this.privRoom = undefined;
        this.privToken = undefined;
        this.privManager = undefined;
        this.privIsConnected = false;
        this.privIsReady = false;
        this.privParticipants = undefined;
    }
    connectTranscriberRecognizer(recognizer) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!!this.privTranscriberRecognizer) {
                yield this.privTranscriberRecognizer.close();
            }
            yield recognizer.enforceAudioGating();
            this.privTranscriberRecognizer = recognizer;
            this.privTranscriberRecognizer.conversation = this;
        });
    }
    getKeepAlive() {
        const nickname = (!!this.me) ? this.me.displayName : "default_nickname";
        return JSON.stringify({
            id: "0",
            nickname,
            participantId: this.privRoom.participantId,
            roomId: this.privRoom.roomId,
            type: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.ConversationTranslatorMessageTypes.keepAlive
        });
    }
    /* eslint-enable @typescript-eslint/typedef */
    addParticipantImplAsync(participant) {
        const newParticipant = this.privParticipants.addOrUpdateParticipant(participant);
        if (newParticipant !== undefined) {
            if (!!this.privTranscriberRecognizer) {
                const conversationInfo = this.conversationInfo;
                conversationInfo.participants = [participant];
                return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, "join");
            }
        }
    }
    removeParticipantImplAsync(participant) {
        this.privParticipants.deleteParticipant(participant.id);
        const conversationInfo = this.conversationInfo;
        conversationInfo.participants = [participant];
        return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, "leave");
    }
    close(dispose) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.privIsConnected = false;
                yield ((_a = this.privConversationRecognizer) === null || _a === void 0 ? void 0 : _a.close());
                this.privConversationRecognizer = undefined;
                if (!!this.privConversationTranslator) {
                    this.privConversationTranslator.dispose();
                }
            }
            catch (e) {
                // ignore error
                throw e;
            }
            if (dispose) {
                this.dispose();
            }
        });
    }
    /** Helpers */
    handleCallback(cb, err) {
        if (!!cb) {
            try {
                cb();
            }
            catch (e) {
                if (!!err) {
                    err(e);
                }
            }
            cb = undefined;
        }
    }
    handleError(error, err) {
        if (!!err) {
            if (error instanceof Error) {
                const typedError = error;
                err(typedError.name + ": " + typedError.message);
            }
            else {
                err(error);
            }
        }
    }
    /** Participant Helpers */
    toParticipants(includeHost) {
        const participants = this.privParticipants.participants.map((p) => (this.toParticipant(p)));
        if (!includeHost) {
            return participants.filter((p) => p.isHost === false);
        }
        else {
            return participants;
        }
    }
    toParticipant(p) {
        return new _Exports__WEBPACK_IMPORTED_MODULE_12__.Participant(p.id, p.avatar, p.displayName, p.isHost, p.isMuted, p.isUsingTts, p.preferredLanguage, p.voice);
    }
    getMuteAllCommand(isMuted) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, "conversationId");
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, "participantId");
        return JSON.stringify({
            command: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.ConversationTranslatorCommandTypes.setMuteAll,
            participantId: this.privRoom.participantId,
            roomid: this.privRoom.roomId,
            type: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.ConversationTranslatorMessageTypes.participantCommand,
            value: isMuted
        });
    }
    getMuteCommand(participantId, isMuted) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, "conversationId");
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(participantId, "participantId");
        return JSON.stringify({
            command: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.ConversationTranslatorCommandTypes.setMute,
            // eslint-disable-next-line object-shorthand
            participantId: participantId,
            roomid: this.privRoom.roomId,
            type: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.ConversationTranslatorMessageTypes.participantCommand,
            value: isMuted
        });
    }
    getLockCommand(isLocked) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, "conversationId");
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, "participantId");
        return JSON.stringify({
            command: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.ConversationTranslatorCommandTypes.setLockState,
            participantId: this.privRoom.participantId,
            roomid: this.privRoom.roomId,
            type: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.ConversationTranslatorMessageTypes.participantCommand,
            value: isLocked
        });
    }
    getEjectCommand(participantId) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, "conversationId");
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(participantId, "participantId");
        return JSON.stringify({
            command: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.ConversationTranslatorCommandTypes.ejectParticipant,
            // eslint-disable-next-line object-shorthand
            participantId: participantId,
            roomid: this.privRoom.roomId,
            type: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.ConversationTranslatorMessageTypes.participantCommand,
        });
    }
    getSetTranslateToLanguagesCommand(languages) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, "conversationId");
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, "participantId");
        return JSON.stringify({
            command: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.ConversationTranslatorCommandTypes.setTranslateToLanguages,
            participantId: this.privRoom.participantId,
            roomid: this.privRoom.roomId,
            type: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.ConversationTranslatorMessageTypes.participantCommand,
            value: languages
        });
    }
    getChangeNicknameCommand(nickname) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, "conversationId");
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(nickname, "nickname");
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, "participantId");
        return JSON.stringify({
            command: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.ConversationTranslatorCommandTypes.changeNickname,
            nickname,
            participantId: this.privRoom.participantId,
            roomid: this.privRoom.roomId,
            type: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.ConversationTranslatorMessageTypes.participantCommand,
            value: nickname
        });
    }
    getMessageCommand(message) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, "conversationId");
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, "participantId");
        _Contracts__WEBPACK_IMPORTED_MODULE_0__.Contracts.throwIfNullOrWhitespace(message, "message");
        return JSON.stringify({
            participantId: this.privRoom.participantId,
            roomId: this.privRoom.roomId,
            text: message,
            type: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.ConversationTranslatorMessageTypes.instantMessage
        });
    }
}

//# sourceMappingURL=Conversation.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationCommon.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationCommon.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConversationCommon": () => (/* binding */ ConversationCommon)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
class ConversationCommon {
    constructor(audioConfig) {
        this.privAudioConfig = audioConfig;
    }
    handleCallback(cb, err) {
        if (!!cb) {
            try {
                cb();
            }
            catch (e) {
                if (!!err) {
                    err(e);
                }
            }
            cb = undefined;
        }
    }
    handleError(error, err) {
        if (!!err) {
            if (error instanceof Error) {
                const typedError = error;
                err(typedError.name + ": " + typedError.message);
            }
            else {
                err(error);
            }
        }
    }
}

//# sourceMappingURL=ConversationCommon.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationExpirationEventArgs.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationExpirationEventArgs.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConversationExpirationEventArgs": () => (/* binding */ ConversationExpirationEventArgs)
/* harmony export */ });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SessionEventArgs.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
// Multi-device Conversation is a Preview feature.

class ConversationExpirationEventArgs extends _Exports__WEBPACK_IMPORTED_MODULE_0__.SessionEventArgs {
    constructor(expirationTime, sessionId) {
        super(sessionId);
        this.privExpirationTime = expirationTime;
    }
    /** How much longer until the conversation expires (in minutes). */
    get expirationTime() {
        return this.privExpirationTime;
    }
}

//# sourceMappingURL=ConversationExpirationEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationParticipantsChangedEventArgs.js":
/*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationParticipantsChangedEventArgs.js ***!
  \**********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConversationParticipantsChangedEventArgs": () => (/* binding */ ConversationParticipantsChangedEventArgs)
/* harmony export */ });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SessionEventArgs.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
// Multi-device Conversation is a Preview feature.

class ConversationParticipantsChangedEventArgs extends _Exports__WEBPACK_IMPORTED_MODULE_0__.SessionEventArgs {
    constructor(reason, participants, sessionId) {
        super(sessionId);
        this.privReason = reason;
        this.privParticipant = participants;
    }
    get reason() {
        return this.privReason;
    }
    get participants() {
        return this.privParticipant;
    }
}

//# sourceMappingURL=ConversationParticipantsChangedEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationTranscriber.js":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationTranscriber.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConversationTranscriber": () => (/* binding */ ConversationTranscriber)
/* harmony export */ });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/TranscriberRecognizer.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js");
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Connection.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class ConversationTranscriber {
    /**
     * ConversationTranscriber constructor.
     * @constructor
     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer
     */
    constructor(audioConfig) {
        this.privAudioConfig = audioConfig;
        this.privProperties = new _Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyCollection();
        this.privRecognizer = undefined;
        this.privDisposedRecognizer = false;
    }
    /**
     * Gets the spoken language of recognition.
     * @member ConversationTranscriber.prototype.speechRecognitionLanguage
     * @function
     * @public
     * @returns {string} The spoken language of recognition.
     */
    get speechRecognitionLanguage() {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfDisposed(this.privDisposedRecognizer);
        return this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceConnection_RecoLanguage);
    }
    /**
     * The collection of properties and their values defined for this ConversationTranscriber.
     * @member ConversationTranscriber.prototype.properties
     * @function
     * @public
     * @returns {PropertyCollection} The collection of properties and their values defined for this ConversationTranscriber.
     */
    get properties() {
        return this.privProperties;
    }
    /**
     * @Internal
     * Internal data member to support fromRecognizer* pattern methods on other classes.
     * Do not use externally, object returned will change without warning or notice.
     */
    get internalData() {
        return this.privRecognizer.internalData;
    }
    /**
     * @Deprecated
     * @Obsolete
     * Please use the Connection.fromRecognizer pattern to obtain a connection object
     */
    get connection() {
        return _Exports__WEBPACK_IMPORTED_MODULE_3__.Connection.fromRecognizer(this.privRecognizer);
    }
    /**
     * Gets the authorization token used to communicate with the service.
     * @member ConversationTranscriber.prototype.authorizationToken
     * @function
     * @public
     * @returns {string} Authorization token.
     */
    get authorizationToken() {
        return this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceAuthorization_Token);
    }
    /**
     * Gets/Sets the authorization token used to communicate with the service.
     * @member ConversationTranscriber.prototype.authorizationToken
     * @function
     * @public
     * @param {string} token - Authorization token.
     */
    set authorizationToken(token) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(token, "token");
        this.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__.PropertyId.SpeechServiceAuthorization_Token, token);
    }
    /**
     * @param {Conversation} conversation - conversation to be recognized
     */
    joinConversationAsync(conversation, cb, err) {
        const conversationImpl = conversation;
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrUndefined(conversationImpl, "Conversation");
        // ref the conversation object
        // create recognizer and subscribe to recognizer events
        this.privRecognizer = new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.TranscriberRecognizer(conversation.config, this.privAudioConfig);
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrUndefined(this.privRecognizer, "Recognizer");
        this.privRecognizer.connectCallbacks(this);
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_5__.marshalPromiseToCallbacks)(conversationImpl.connectTranscriberRecognizer(this.privRecognizer), cb, err);
    }
    /**
     * Starts conversation transcription, until stopTranscribingAsync() is called.
     * User must subscribe to events to receive transcription results.
     * @member ConversationTranscriber.prototype.startTranscribingAsync
     * @function
     * @public
     * @param cb - Callback invoked once the transcription has started.
     * @param err - Callback invoked in case of an error.
     */
    startTranscribingAsync(cb, err) {
        this.privRecognizer.startContinuousRecognitionAsync(cb, err);
    }
    /**
     * Starts conversation transcription, until stopTranscribingAsync() is called.
     * User must subscribe to events to receive transcription results.
     * @member ConversationTranscriber.prototype.stopTranscribingAsync
     * @function
     * @public
     * @param cb - Callback invoked once the transcription has started.
     * @param err - Callback invoked in case of an error.
     */
    stopTranscribingAsync(cb, err) {
        this.privRecognizer.stopContinuousRecognitionAsync(cb, err);
    }
    /**
     * Leave the current conversation. After this is called, you will no longer receive any events.
     */
    leaveConversationAsync(cb, err) {
        this.privRecognizer.disconnectCallbacks();
        // eslint-disable-next-line
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_5__.marshalPromiseToCallbacks)((() => __awaiter(this, void 0, void 0, function* () { return; }))(), cb, err);
    }
    /**
     * closes all external resources held by an instance of this class.
     * @member ConversationTranscriber.prototype.close
     * @function
     * @public
     */
    close(cb, errorCb) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfDisposed(this.privDisposedRecognizer);
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_5__.marshalPromiseToCallbacks)(this.dispose(true), cb, errorCb);
    }
    /**
     * Disposes any resources held by the object.
     * @member ConversationTranscriber.prototype.dispose
     * @function
     * @public
     * @param {boolean} disposing - true if disposing the object.
     */
    dispose(disposing) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.privDisposedRecognizer) {
                return;
            }
            if (!!this.privRecognizer) {
                yield this.privRecognizer.close();
                this.privRecognizer = undefined;
            }
            if (disposing) {
                this.privDisposedRecognizer = true;
            }
        });
    }
}

//# sourceMappingURL=ConversationTranscriber.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationTranslationCanceledEventArgs.js":
/*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationTranslationCanceledEventArgs.js ***!
  \**********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConversationTranslationCanceledEventArgs": () => (/* binding */ ConversationTranslationCanceledEventArgs)
/* harmony export */ });
/* harmony import */ var _CancellationEventArgsBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../CancellationEventArgsBase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationEventArgsBase.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
// Multi-device Conversation is a Preview feature.

class ConversationTranslationCanceledEventArgs extends _CancellationEventArgsBase__WEBPACK_IMPORTED_MODULE_0__.CancellationEventArgsBase {
}

//# sourceMappingURL=ConversationTranslationCanceledEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationTranslationEventArgs.js":
/*!**************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationTranslationEventArgs.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConversationTranslationEventArgs": () => (/* binding */ ConversationTranslationEventArgs)
/* harmony export */ });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/RecognitionEventArgs.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
// Multi-device Conversation is a Preview feature.

class ConversationTranslationEventArgs extends _Exports__WEBPACK_IMPORTED_MODULE_0__.RecognitionEventArgs {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {ConversationTranslationResult} result - The translation recognition result.
     * @param {number} offset - The offset.
     * @param {string} sessionId - The session id.
     */
    constructor(result, offset, sessionId) {
        super(offset, sessionId);
        this.privResult = result;
    }
    /**
     * Specifies the recognition result.
     * @returns {ConversationTranslationResult} the recognition result.
     */
    get result() {
        return this.privResult;
    }
}

//# sourceMappingURL=ConversationTranslationEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationTranslationResult.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationTranslationResult.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConversationTranslationResult": () => (/* binding */ ConversationTranslationResult)
/* harmony export */ });
/* harmony import */ var _TranslationRecognitionResult__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../TranslationRecognitionResult */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationRecognitionResult.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
// Multi-device Conversation is a Preview feature.

class ConversationTranslationResult extends _TranslationRecognitionResult__WEBPACK_IMPORTED_MODULE_0__.TranslationRecognitionResult {
    constructor(participantId, translations, originalLanguage, resultId, reason, text, duration, offset, errorDetails, json, properties) {
        super(translations, resultId, reason, text, duration, offset, undefined, undefined, errorDetails, json, properties);
        this.privId = participantId;
        this.privOrigLang = originalLanguage;
    }
    /**
     * The unique identifier for the participant this result is for.
     */
    get participantId() {
        return this.privId;
    }
    /**
     * The original language this result was in.
     */
    get originalLang() {
        return this.privOrigLang;
    }
}

//# sourceMappingURL=ConversationTranslationResult.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationTranslator.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationTranslator.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConversationTranslator": () => (/* binding */ ConversationTranslator),
/* harmony export */   "SpeechState": () => (/* binding */ SpeechState)
/* harmony export */ });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationConnectionConfig.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _common_speech_Transcription_ConversationTranslatorConnectionFactory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common.speech/Transcription/ConversationTranslatorConnectionFactory */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/ConversationTranslatorConnectionFactory.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js");
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationRecognizer.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationReason.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationErrorCodes.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechTranslationConfig.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ProfanityOption.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ServicePropertyChannel.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioConfig.js");
/* harmony import */ var _Conversation__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./Conversation */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/Conversation.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationTranslationCanceledEventArgs.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ConversationCommon.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
// Multi-device Conversation is a Preview feature.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/* eslint-disable max-classes-per-file */







var SpeechState;
(function (SpeechState) {
    SpeechState[SpeechState["Inactive"] = 0] = "Inactive";
    SpeechState[SpeechState["Connecting"] = 1] = "Connecting";
    SpeechState[SpeechState["Connected"] = 2] = "Connected";
})(SpeechState || (SpeechState = {}));
// child class of TranslationRecognizer meant only for use with ConversationTranslator
class ConversationTranslationRecognizer extends _Exports__WEBPACK_IMPORTED_MODULE_0__.TranslationRecognizer {
    constructor(speechConfig, audioConfig, translator, convGetter) {
        super(speechConfig, audioConfig, new _common_speech_Transcription_ConversationTranslatorConnectionFactory__WEBPACK_IMPORTED_MODULE_1__.ConversationTranslatorConnectionFactory(convGetter));
        this.privSpeechState = SpeechState.Inactive;
        if (!!translator) {
            this.privTranslator = translator;
            this.sessionStarted = () => {
                this.privSpeechState = SpeechState.Connected;
            };
            this.sessionStopped = () => {
                this.privSpeechState = SpeechState.Inactive;
            };
            this.recognizing = (tr, e) => {
                if (!!this.privTranslator.recognizing) {
                    this.privTranslator.recognizing(this.privTranslator, e);
                }
            };
            // eslint-disable-next-line @typescript-eslint/no-misused-promises
            this.recognized = (tr, e) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                // if there is an error connecting to the conversation service from the speech service the error will be returned in the ErrorDetails field.
                if ((_a = e.result) === null || _a === void 0 ? void 0 : _a.errorDetails) {
                    yield this.cancelSpeech();
                    // TODO: format the error message contained in 'errorDetails'
                    this.fireCancelEvent(e.result.errorDetails);
                }
                else {
                    if (!!this.privTranslator.recognized) {
                        this.privTranslator.recognized(this.privTranslator, e);
                    }
                }
                return;
            });
            // eslint-disable-next-line @typescript-eslint/no-misused-promises
            this.canceled = () => __awaiter(this, void 0, void 0, function* () {
                if (this.privSpeechState !== SpeechState.Inactive) {
                    try {
                        yield this.cancelSpeech();
                    }
                    catch (error) {
                        this.privSpeechState = SpeechState.Inactive;
                    }
                }
            });
        }
    }
    get state() {
        return this.privSpeechState;
    }
    set state(newState) {
        this.privSpeechState = newState;
    }
    onConnection() {
        this.privSpeechState = SpeechState.Connected;
    }
    onDisconnection() {
        return __awaiter(this, void 0, void 0, function* () {
            this.privSpeechState = SpeechState.Inactive;
            yield this.cancelSpeech();
        });
    }
    /**
     * Fire a cancel event
     * @param error
     */
    fireCancelEvent(error) {
        try {
            if (!!this.privTranslator.canceled) {
                const cancelEvent = new _Exports__WEBPACK_IMPORTED_MODULE_2__.ConversationTranslationCanceledEventArgs(_Exports__WEBPACK_IMPORTED_MODULE_3__.CancellationReason.Error, error, _Exports__WEBPACK_IMPORTED_MODULE_4__.CancellationErrorCode.RuntimeError);
                this.privTranslator.canceled(this.privTranslator, cancelEvent);
            }
        }
        catch (e) {
            //
        }
    }
    cancelSpeech() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.stopContinuousRecognitionAsync();
                yield ((_a = this.privReco) === null || _a === void 0 ? void 0 : _a.disconnect());
                this.privSpeechState = SpeechState.Inactive;
            }
            catch (e) {
                // ignore the error
            }
        });
    }
}
/**
 * Join, leave or connect to a conversation.
 */
class ConversationTranslator extends _Exports__WEBPACK_IMPORTED_MODULE_5__.ConversationCommon {
    constructor(audioConfig) {
        super(audioConfig);
        this.privErrors = _common_speech_Exports__WEBPACK_IMPORTED_MODULE_6__.ConversationConnectionConfig.restErrors;
        this.privIsDisposed = false;
        this.privIsSpeaking = false;
        this.privPlaceholderKey = "abcdefghijklmnopqrstuvwxyz012345";
        this.privPlaceholderRegion = "westus";
        this.privProperties = new _Exports__WEBPACK_IMPORTED_MODULE_7__.PropertyCollection();
    }
    get properties() {
        return this.privProperties;
    }
    get speechRecognitionLanguage() {
        return this.privSpeechRecognitionLanguage;
    }
    get participants() {
        var _a;
        return (_a = this.privConversation) === null || _a === void 0 ? void 0 : _a.participants;
    }
    get canSpeak() {
        // is there a Conversation websocket available and has the Recognizer been set up
        if (!this.privConversation.isConnected || !this.privCTRecognizer) {
            return false;
        }
        // is the user already speaking
        if (this.privIsSpeaking || this.privCTRecognizer.state === SpeechState.Connected || this.privCTRecognizer.state === SpeechState.Connecting) {
            return false;
        }
        // is the user muted
        if (this.privConversation.isMutedByHost) {
            return false;
        }
        return true;
    }
    setServiceProperty(name, value) {
        const currentProperties = JSON.parse(this.privProperties.getProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_8__.ServicePropertiesPropertyName, "{}"));
        currentProperties[name] = value;
        this.privProperties.setProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_8__.ServicePropertiesPropertyName, JSON.stringify(currentProperties));
    }
    joinConversationAsync(conversation, nickname, param1, param2, param3) {
        try {
            if (typeof conversation === "string") {
                _Contracts__WEBPACK_IMPORTED_MODULE_9__.Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace("{arg}", "conversation id"));
                _Contracts__WEBPACK_IMPORTED_MODULE_9__.Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace("{arg}", "nickname"));
                if (!!this.privConversation) {
                    this.handleError(new Error(this.privErrors.permissionDeniedStart), param3);
                }
                let lang = param1;
                if (lang === undefined || lang === null || lang === "") {
                    lang = _common_speech_Exports__WEBPACK_IMPORTED_MODULE_6__.ConversationConnectionConfig.defaultLanguageCode;
                }
                // create a placeholder config
                this.privSpeechTranslationConfig = _Exports__WEBPACK_IMPORTED_MODULE_10__.SpeechTranslationConfig.fromSubscription(this.privPlaceholderKey, this.privPlaceholderRegion);
                this.privSpeechTranslationConfig.setProfanity(_Exports__WEBPACK_IMPORTED_MODULE_11__.ProfanityOption.Masked);
                this.privSpeechTranslationConfig.addTargetLanguage(lang);
                this.privSpeechTranslationConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_12__.PropertyId[_Exports__WEBPACK_IMPORTED_MODULE_12__.PropertyId.SpeechServiceConnection_RecoLanguage], lang);
                this.privSpeechTranslationConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_12__.PropertyId[_Exports__WEBPACK_IMPORTED_MODULE_12__.PropertyId.ConversationTranslator_Name], nickname);
                const propertyIdsToCopy = [
                    _Exports__WEBPACK_IMPORTED_MODULE_12__.PropertyId.SpeechServiceConnection_Host,
                    _Exports__WEBPACK_IMPORTED_MODULE_12__.PropertyId.ConversationTranslator_Host,
                    _Exports__WEBPACK_IMPORTED_MODULE_12__.PropertyId.SpeechServiceConnection_Endpoint,
                    _Exports__WEBPACK_IMPORTED_MODULE_12__.PropertyId.SpeechServiceConnection_ProxyHostName,
                    _Exports__WEBPACK_IMPORTED_MODULE_12__.PropertyId.SpeechServiceConnection_ProxyPassword,
                    _Exports__WEBPACK_IMPORTED_MODULE_12__.PropertyId.SpeechServiceConnection_ProxyPort,
                    _Exports__WEBPACK_IMPORTED_MODULE_12__.PropertyId.SpeechServiceConnection_ProxyUserName,
                    "ConversationTranslator_MultiChannelAudio",
                    "ConversationTranslator_Region"
                ];
                for (const prop of propertyIdsToCopy) {
                    const value = this.privProperties.getProperty(prop);
                    if (value) {
                        const key = typeof prop === "string" ? prop : _Exports__WEBPACK_IMPORTED_MODULE_12__.PropertyId[prop];
                        this.privSpeechTranslationConfig.setProperty(key, value);
                    }
                }
                const currentProperties = JSON.parse(this.privProperties.getProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_8__.ServicePropertiesPropertyName, "{}"));
                for (const prop of Object.keys(currentProperties)) {
                    this.privSpeechTranslationConfig.setServiceProperty(prop, currentProperties[prop], _Exports__WEBPACK_IMPORTED_MODULE_13__.ServicePropertyChannel.UriQueryParameter);
                }
                // join the conversation
                this.privConversation = new _Conversation__WEBPACK_IMPORTED_MODULE_14__.ConversationImpl(this.privSpeechTranslationConfig);
                this.privConversation.conversationTranslator = this;
                this.privConversation.joinConversationAsync(conversation, nickname, lang, ((result) => {
                    if (!result) {
                        this.handleError(new Error(this.privErrors.permissionDeniedConnect), param3);
                    }
                    this.privSpeechTranslationConfig.authorizationToken = result;
                    this.privConversation.room.isHost = false;
                    // connect to the ws
                    this.privConversation.startConversationAsync((() => {
                        this.handleCallback(param2, param3);
                    }), ((error) => {
                        this.handleError(error, param3);
                    }));
                }), ((error) => {
                    this.handleError(error, param3);
                }));
            }
            else if (typeof conversation === "object") {
                _Contracts__WEBPACK_IMPORTED_MODULE_9__.Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace("{arg}", "conversation id"));
                _Contracts__WEBPACK_IMPORTED_MODULE_9__.Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace("{arg}", "nickname"));
                // save the nickname
                this.privProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_12__.PropertyId.ConversationTranslator_Name, nickname);
                // ref the conversation object
                this.privConversation = conversation;
                // ref the conversation translator object
                this.privConversation.conversationTranslator = this;
                this.privConversation.room.isHost = true;
                _Contracts__WEBPACK_IMPORTED_MODULE_9__.Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedConnect);
                _Contracts__WEBPACK_IMPORTED_MODULE_9__.Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);
                this.privSpeechTranslationConfig = conversation.config;
                this.handleCallback(param1, param2);
            }
            else {
                this.handleError(new Error(this.privErrors.invalidArgs.replace("{arg}", "invalid conversation type")), param2);
            }
        }
        catch (error) {
            this.handleError(error, typeof param1 === "string" ? param3 : param2);
        }
    }
    /**
     * Leave the conversation
     * @param cb
     * @param err
     */
    leaveConversationAsync(cb, err) {
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_15__.marshalPromiseToCallbacks)((() => __awaiter(this, void 0, void 0, function* () {
            // stop the speech websocket
            yield this.cancelSpeech();
            // stop the websocket
            yield this.privConversation.endConversationImplAsync();
            // https delete request
            yield this.privConversation.deleteConversationImplAsync();
            this.dispose();
        }))(), cb, err);
    }
    /**
     * Send a text message
     * @param message
     * @param cb
     * @param err
     */
    sendTextMessageAsync(message, cb, err) {
        try {
            _Contracts__WEBPACK_IMPORTED_MODULE_9__.Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);
            _Contracts__WEBPACK_IMPORTED_MODULE_9__.Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace("{arg}", message));
            this.privConversation.sendTextMessageAsync(message, cb, err);
        }
        catch (error) {
            this.handleError(error, err);
        }
    }
    /**
     * Start speaking
     * @param cb
     * @param err
     */
    startTranscribingAsync(cb, err) {
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_15__.marshalPromiseToCallbacks)((() => __awaiter(this, void 0, void 0, function* () {
            try {
                _Contracts__WEBPACK_IMPORTED_MODULE_9__.Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);
                _Contracts__WEBPACK_IMPORTED_MODULE_9__.Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);
                if (this.privCTRecognizer === undefined) {
                    yield this.connectTranslatorRecognizer();
                }
                _Contracts__WEBPACK_IMPORTED_MODULE_9__.Contracts.throwIfNullOrUndefined(this.privCTRecognizer, this.privErrors.permissionDeniedSend);
                if (!this.canSpeak) {
                    this.handleError(new Error(this.privErrors.permissionDeniedSend), err);
                }
                yield this.startContinuousRecognition();
                this.privIsSpeaking = true;
            }
            catch (error) {
                this.privIsSpeaking = false;
                yield this.cancelSpeech();
                throw error;
            }
        }))(), cb, err);
    }
    /**
     * Stop speaking
     * @param cb
     * @param err
     */
    stopTranscribingAsync(cb, err) {
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_15__.marshalPromiseToCallbacks)((() => __awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.privIsSpeaking) {
                    // stop speech
                    yield this.cancelSpeech();
                    return;
                }
                // stop the recognition but leave the websocket open
                this.privIsSpeaking = false;
                yield new Promise((resolve, reject) => {
                    this.privCTRecognizer.stopContinuousRecognitionAsync(resolve, reject);
                });
            }
            catch (error) {
                yield this.cancelSpeech();
            }
        }))(), cb, err);
    }
    isDisposed() {
        return this.privIsDisposed;
    }
    dispose(reason, success, err) {
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_15__.marshalPromiseToCallbacks)((() => __awaiter(this, void 0, void 0, function* () {
            if (this.isDisposed && !this.privIsSpeaking) {
                return;
            }
            yield this.cancelSpeech();
            this.privIsDisposed = true;
            this.privSpeechTranslationConfig.close();
            this.privSpeechRecognitionLanguage = undefined;
            this.privProperties = undefined;
            this.privAudioConfig = undefined;
            this.privSpeechTranslationConfig = undefined;
            this.privConversation.dispose();
            this.privConversation = undefined;
        }))(), success, err);
    }
    /**
     * Cancel the speech websocket
     */
    cancelSpeech() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.privIsSpeaking = false;
                yield ((_a = this.privCTRecognizer) === null || _a === void 0 ? void 0 : _a.onDisconnection());
                this.privCTRecognizer = undefined;
            }
            catch (e) {
                // ignore the error
            }
        });
    }
    /**
     * Connect to the speech translation recognizer.
     * Currently there is no language validation performed before sending the SpeechLanguage code to the service.
     * If it's an invalid language the raw error will be: 'Error during WebSocket handshake: Unexpected response code: 400'
     * e.g. pass in 'fr' instead of 'fr-FR', or a text-only language 'cy'
     */
    connectTranslatorRecognizer() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (this.privAudioConfig === undefined) {
                    this.privAudioConfig = _Exports__WEBPACK_IMPORTED_MODULE_16__.AudioConfig.fromDefaultMicrophoneInput();
                }
                // clear the temp subscription key if it's a participant joining
                if (this.privSpeechTranslationConfig.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_12__.PropertyId[_Exports__WEBPACK_IMPORTED_MODULE_12__.PropertyId.SpeechServiceConnection_Key])
                    === this.privPlaceholderKey) {
                    this.privSpeechTranslationConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_12__.PropertyId[_Exports__WEBPACK_IMPORTED_MODULE_12__.PropertyId.SpeechServiceConnection_Key], "");
                }
                const convGetter = () => this.privConversation;
                this.privCTRecognizer = new ConversationTranslationRecognizer(this.privSpeechTranslationConfig, this.privAudioConfig, this, convGetter);
            }
            catch (error) {
                yield this.cancelSpeech();
                throw error;
            }
        });
    }
    /**
     * Handle the start speaking request
     */
    startContinuousRecognition() {
        return new Promise((resolve, reject) => {
            this.privCTRecognizer.startContinuousRecognitionAsync(resolve, reject);
        });
    }
}

//# sourceMappingURL=ConversationTranslator.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/IParticipant.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/IParticipant.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Participant": () => (/* binding */ Participant),
/* harmony export */   "User": () => (/* binding */ User)
/* harmony export */ });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
// Multi-device Conversation is a Preview feature.
/* eslint-disable max-classes-per-file */

class User {
    constructor(userId) {
        this.privUserId = userId;
    }
    get userId() {
        return this.privUserId;
    }
}
class Participant {
    constructor(id, avatar, displayName, isHost, isMuted, isUsingTts, preferredLanguage, voice) {
        this.privId = id;
        this.privAvatar = avatar;
        this.privDisplayName = displayName;
        this.privIsHost = isHost;
        this.privIsMuted = isMuted;
        this.privIsUsingTts = isUsingTts;
        this.privPreferredLanguage = preferredLanguage;
        this.privVoice = voice;
        this.privProperties = new _Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyCollection();
    }
    get avatar() {
        return this.privAvatar;
    }
    get displayName() {
        return this.privDisplayName;
    }
    get id() {
        return this.privId;
    }
    get preferredLanguage() {
        return this.privPreferredLanguage;
    }
    get isHost() {
        return this.privIsHost;
    }
    get isMuted() {
        return this.privIsMuted;
    }
    get isUsingTts() {
        return this.privIsUsingTts;
    }
    get voice() {
        return this.privVoice;
    }
    get properties() {
        return this.privProperties;
    }
    static From(id, language, voice) {
        return new Participant(id, "", id, false, false, false, language, voice);
    }
}

//# sourceMappingURL=IParticipant.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ParticipantChangedReason.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Transcription/ParticipantChangedReason.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ParticipantChangedReason": () => (/* binding */ ParticipantChangedReason)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
// Multi-device Conversation is a Preview feature.
var ParticipantChangedReason;
(function (ParticipantChangedReason) {
    /** Participant has joined the conversation. */
    ParticipantChangedReason[ParticipantChangedReason["JoinedConversation"] = 0] = "JoinedConversation";
    /** Participant has left the conversation. This could be voluntary, or involuntary
     * (e.g. they are experiencing networking issues).
     */
    ParticipantChangedReason[ParticipantChangedReason["LeftConversation"] = 1] = "LeftConversation";
    /** The participants' state has changed (e.g. they became muted, changed their nickname). */
    ParticipantChangedReason[ParticipantChangedReason["Updated"] = 2] = "Updated";
})(ParticipantChangedReason || (ParticipantChangedReason = {}));

//# sourceMappingURL=ParticipantChangedReason.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationRecognitionCanceledEventArgs.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationRecognitionCanceledEventArgs.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TranslationRecognitionCanceledEventArgs": () => (/* binding */ TranslationRecognitionCanceledEventArgs)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Define payload of speech recognition canceled result events.
 * @class TranslationRecognitionCanceledEventArgs
 */
class TranslationRecognitionCanceledEventArgs {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {string} sessionid - The session id.
     * @param {CancellationReason} cancellationReason - The cancellation reason.
     * @param {string} errorDetails - Error details, if provided.
     * @param {TranslationRecognitionResult} result - The result.
     */
    constructor(sessionid, cancellationReason, errorDetails, errorCode, result) {
        this.privCancelReason = cancellationReason;
        this.privErrorDetails = errorDetails;
        this.privResult = result;
        this.privSessionId = sessionid;
        this.privErrorCode = errorCode;
    }
    /**
     * Specifies the recognition result.
     * @member TranslationRecognitionCanceledEventArgs.prototype.result
     * @function
     * @public
     * @returns {TranslationRecognitionResult} the recognition result.
     */
    get result() {
        return this.privResult;
    }
    /**
     * Specifies the session identifier.
     * @member TranslationRecognitionCanceledEventArgs.prototype.sessionId
     * @function
     * @public
     * @returns {string} the session identifier.
     */
    get sessionId() {
        return this.privSessionId;
    }
    /**
     * The reason the recognition was canceled.
     * @member TranslationRecognitionCanceledEventArgs.prototype.reason
     * @function
     * @public
     * @returns {CancellationReason} Specifies the reason canceled.
     */
    get reason() {
        return this.privCancelReason;
    }
    /**
     * The error code in case of an unsuccessful recognition.
     * Added in version 1.1.0.
     * @return An error code that represents the error reason.
     */
    get errorCode() {
        return this.privErrorCode;
    }
    /**
     * In case of an unsuccessful recognition, provides details of the occurred error.
     * @member TranslationRecognitionCanceledEventArgs.prototype.errorDetails
     * @function
     * @public
     * @returns {string} A String that represents the error details.
     */
    get errorDetails() {
        return this.privErrorDetails;
    }
}

//# sourceMappingURL=TranslationRecognitionCanceledEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationRecognitionEventArgs.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationRecognitionEventArgs.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TranslationRecognitionEventArgs": () => (/* binding */ TranslationRecognitionEventArgs)
/* harmony export */ });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/RecognitionEventArgs.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Translation text result event arguments.
 * @class TranslationRecognitionEventArgs
 */
class TranslationRecognitionEventArgs extends _Exports__WEBPACK_IMPORTED_MODULE_0__.RecognitionEventArgs {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {TranslationRecognitionResult} result - The translation recognition result.
     * @param {number} offset - The offset.
     * @param {string} sessionId - The session id.
     */
    constructor(result, offset, sessionId) {
        super(offset, sessionId);
        this.privResult = result;
    }
    /**
     * Specifies the recognition result.
     * @member TranslationRecognitionEventArgs.prototype.result
     * @function
     * @public
     * @returns {TranslationRecognitionResult} the recognition result.
     */
    get result() {
        return this.privResult;
    }
}

//# sourceMappingURL=TranslationRecognitionEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationRecognitionResult.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationRecognitionResult.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TranslationRecognitionResult": () => (/* binding */ TranslationRecognitionResult)
/* harmony export */ });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionResult.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Translation text result.
 * @class TranslationRecognitionResult
 */
class TranslationRecognitionResult extends _Exports__WEBPACK_IMPORTED_MODULE_0__.SpeechRecognitionResult {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {Translations} translations - The translations.
     * @param {string} resultId - The result id.
     * @param {ResultReason} reason - The reason.
     * @param {string} text - The recognized text.
     * @param {number} duration - The duration.
     * @param {number} offset - The offset into the stream.
     * @param {string} language - Primary Language detected, if provided.
     * @param {string} languageDetectionConfidence - Primary Language confidence ("Unknown," "Low," "Medium," "High"...), if provided.
     * @param {string} errorDetails - Error details, if provided.
     * @param {string} json - Additional Json, if provided.
     * @param {PropertyCollection} properties - Additional properties, if provided.
     */
    constructor(translations, resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties) {
        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, undefined, errorDetails, json, properties);
        this.privTranslations = translations;
    }
    static fromSpeechRecognitionResult(result) {
        return new TranslationRecognitionResult(undefined, result.resultId, result.reason, result.text, result.duration, result.offset, result.language, result.languageDetectionConfidence, result.errorDetails, result.json, result.properties);
    }
    /**
     * Presents the translation results. Each item in the dictionary represents
     * a translation result in one of target languages, where the key is the name
     * of the target language, in BCP-47 format, and the value is the translation
     * text in the specified language.
     * @member TranslationRecognitionResult.prototype.translations
     * @function
     * @public
     * @returns {Translations} the current translation map that holds all translations requested.
     */
    get translations() {
        return this.privTranslations;
    }
}

//# sourceMappingURL=TranslationRecognitionResult.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationRecognizer.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationRecognizer.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TranslationRecognizer": () => (/* binding */ TranslationRecognizer)
/* harmony export */ });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranslationConnectionFactory.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognizerConfig.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranslationServiceRecognizer.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js");
/* harmony import */ var _Connection__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Connection */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Connection.js");
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Recognizer.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





/**
 * Translation recognizer
 * @class TranslationRecognizer
 */
class TranslationRecognizer extends _Exports__WEBPACK_IMPORTED_MODULE_0__.Recognizer {
    /**
     * Initializes an instance of the TranslationRecognizer.
     * @constructor
     * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.
     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer
     * @param {IConnectionFactory} connectionFactory - An optional connection factory to use to generate the endpoint URIs, headers to set, etc...
     */
    constructor(speechConfig, audioConfig, connectionFactory) {
        const configImpl = speechConfig;
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNull(configImpl, "speechConfig");
        super(audioConfig, configImpl.properties, connectionFactory || new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_2__.TranslationConnectionFactory());
        this.privDisposedTranslationRecognizer = false;
        if (this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {
            _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_TranslationVoice), _Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId[_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_TranslationVoice]);
        }
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_TranslationToLanguages), _Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId[_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_TranslationToLanguages]);
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_RecoLanguage), _Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId[_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_RecoLanguage]);
    }
    /**
     * TranslationRecognizer constructor.
     * @constructor
     * @param {SpeechTranslationConfig} speechTranslationConfig - an set of initial properties for this recognizer
     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer
     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer
     */
    static FromConfig(speechTranslationConfig, autoDetectSourceLanguageConfig, audioConfig) {
        const speechTranslationConfigImpl = speechTranslationConfig;
        autoDetectSourceLanguageConfig.properties.mergeTo(speechTranslationConfigImpl.properties);
        return new TranslationRecognizer(speechTranslationConfig, audioConfig);
    }
    /**
     * Gets the language name that was set when the recognizer was created.
     * @member TranslationRecognizer.prototype.speechRecognitionLanguage
     * @function
     * @public
     * @returns {string} Gets the language name that was set when the recognizer was created.
     */
    get speechRecognitionLanguage() {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);
        return this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_RecoLanguage);
    }
    /**
     * Gets target languages for translation that were set when the recognizer was created.
     * The language is specified in BCP-47 format. The translation will provide translated text for each of language.
     * @member TranslationRecognizer.prototype.targetLanguages
     * @function
     * @public
     * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.
     */
    get targetLanguages() {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);
        return this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_TranslationToLanguages).split(",");
    }
    /**
     * Gets the name of output voice.
     * @member TranslationRecognizer.prototype.voiceName
     * @function
     * @public
     * @returns {string} the name of output voice.
     */
    get voiceName() {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);
        return this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_TranslationVoice, undefined);
    }
    /**
     * The collection of properties and their values defined for this TranslationRecognizer.
     * @member TranslationRecognizer.prototype.properties
     * @function
     * @public
     * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.
     */
    get properties() {
        return this.privProperties;
    }
    /**
     * Gets the authorization token used to communicate with the service.
     * @member TranslationRecognizer.prototype.authorizationToken
     * @function
     * @public
     * @returns {string} Authorization token.
     */
    get authorizationToken() {
        return this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceAuthorization_Token);
    }
    /**
     * Gets/Sets the authorization token used to communicate with the service.
     * @member TranslationRecognizer.prototype.authorizationToken
     * @function
     * @public
     * @param {string} value - Authorization token.
     */
    set authorizationToken(value) {
        this.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceAuthorization_Token, value);
    }
    /**
     * Starts recognition and translation, and stops after the first utterance is recognized.
     * The task returns the translation text as result.
     * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitable only
     * for single shot recognition like command or query. For long-running recognition,
     * use startContinuousRecognitionAsync() instead.
     * @member TranslationRecognizer.prototype.recognizeOnceAsync
     * @function
     * @public
     * @param cb - Callback that received the result when the translation has completed.
     * @param err - Callback invoked in case of an error.
     */
    recognizeOnceAsync(cb, err) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_4__.marshalPromiseToCallbacks)(this.recognizeOnceAsyncImpl(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_5__.RecognitionMode.Conversation), cb, err);
    }
    /**
     * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.
     * User must subscribe to events to receive translation results.
     * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync
     * @function
     * @public
     * @param cb - Callback that received the translation has started.
     * @param err - Callback invoked in case of an error.
     */
    startContinuousRecognitionAsync(cb, err) {
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_4__.marshalPromiseToCallbacks)(this.startContinuousRecognitionAsyncImpl(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_5__.RecognitionMode.Conversation), cb, err);
    }
    /**
     * Stops continuous recognition and translation.
     * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync
     * @function
     * @public
     * @param cb - Callback that received the translation has stopped.
     * @param err - Callback invoked in case of an error.
     */
    stopContinuousRecognitionAsync(cb, err) {
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_4__.marshalPromiseToCallbacks)(this.stopContinuousRecognitionAsyncImpl(), cb, err);
    }
    /**
     * dynamically remove a language from list of target language
     * (can be used while recognition is ongoing)
     * @member TranslationRecognizer.prototype.removeTargetLanguage
     * @function
     * @param lang - language to be removed
     * @public
     */
    removeTargetLanguage(lang) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrUndefined(lang, "language to be removed");
        if (this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {
            const languages = this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_TranslationToLanguages).split(",");
            const index = languages.indexOf(lang);
            if (index > -1) {
                languages.splice(index, 1);
                this.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(","));
                this.updateLanguages(languages);
            }
        }
    }
    /**
     * dynamically add a language to list of target language
     * (can be used while recognition is ongoing)
     * @member TranslationRecognizer.prototype.addTargetLanguage
     * @function
     * @param lang - language to be added
     * @public
     */
    addTargetLanguage(lang) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrUndefined(lang, "language to be added");
        let languages = [];
        if (this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {
            languages = this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_TranslationToLanguages).split(",");
            if (!languages.includes(lang)) {
                languages.push(lang);
                this.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(","));
            }
        }
        else {
            this.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__.PropertyId.SpeechServiceConnection_TranslationToLanguages, lang);
            languages = [lang];
        }
        this.updateLanguages(languages);
    }
    /**
     * closes all external resources held by an instance of this class.
     * @member TranslationRecognizer.prototype.close
     * @function
     * @public
     */
    close(cb, errorCb) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);
        (0,_common_Exports__WEBPACK_IMPORTED_MODULE_4__.marshalPromiseToCallbacks)(this.dispose(true), cb, errorCb);
    }
    /**
     * handles ConnectionEstablishedEvent for conversation translation scenarios.
     * @member TranslationRecognizer.prototype.onConnection
     * @function
     * @public
     */
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    onConnection() { }
    /**
     * handles disconnection events for conversation translation scenarios.
     * @member TranslationRecognizer.prototype.onDisconnection
     * @function
     * @public
     */
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    onDisconnection() {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    dispose(disposing) {
        const _super = Object.create(null, {
            dispose: { get: () => super.dispose }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (this.privDisposedTranslationRecognizer) {
                return;
            }
            this.privDisposedTranslationRecognizer = true;
            if (disposing) {
                yield this.implRecognizerStop();
                yield _super.dispose.call(this, disposing);
            }
        });
    }
    createRecognizerConfig(speechConfig) {
        return new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_5__.RecognizerConfig(speechConfig, this.privProperties);
    }
    createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {
        const configImpl = audioConfig;
        return new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_6__.TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);
    }
    updateLanguages(languages) {
        const conn = _Connection__WEBPACK_IMPORTED_MODULE_7__.Connection.fromRecognizer(this);
        if (!!conn) {
            conn.setMessageProperty("speech.context", "translationcontext", { to: languages });
            conn.sendMessageAsync("event", JSON.stringify({
                id: "translation",
                name: "updateLanguage",
                to: languages
            }));
        }
    }
}

//# sourceMappingURL=TranslationRecognizer.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationSynthesisEventArgs.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationSynthesisEventArgs.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TranslationSynthesisEventArgs": () => (/* binding */ TranslationSynthesisEventArgs)
/* harmony export */ });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SessionEventArgs.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Translation Synthesis event arguments
 * @class TranslationSynthesisEventArgs
 */
class TranslationSynthesisEventArgs extends _Exports__WEBPACK_IMPORTED_MODULE_0__.SessionEventArgs {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {TranslationSynthesisResult} result - The translation synthesis result.
     * @param {string} sessionId - The session id.
     */
    constructor(result, sessionId) {
        super(sessionId);
        this.privResult = result;
    }
    /**
     * Specifies the translation synthesis result.
     * @member TranslationSynthesisEventArgs.prototype.result
     * @function
     * @public
     * @returns {TranslationSynthesisResult} Specifies the translation synthesis result.
     */
    get result() {
        return this.privResult;
    }
}

//# sourceMappingURL=TranslationSynthesisEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationSynthesisResult.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationSynthesisResult.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TranslationSynthesisResult": () => (/* binding */ TranslationSynthesisResult)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Defines translation synthesis result, i.e. the voice output of the translated
 * text in the target language.
 * @class TranslationSynthesisResult
 */
class TranslationSynthesisResult {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {ResultReason} reason - The synthesis reason.
     * @param {ArrayBuffer} audio - The audio data.
     */
    constructor(reason, audio) {
        this.privReason = reason;
        this.privAudio = audio;
    }
    /**
     * Translated text in the target language.
     * @member TranslationSynthesisResult.prototype.audio
     * @function
     * @public
     * @returns {ArrayBuffer} Translated audio in the target language.
     */
    get audio() {
        return this.privAudio;
    }
    /**
     * The synthesis status.
     * @member TranslationSynthesisResult.prototype.reason
     * @function
     * @public
     * @returns {ResultReason} The synthesis status.
     */
    get reason() {
        return this.privReason;
    }
}

//# sourceMappingURL=TranslationSynthesisResult.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Translations.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Translations.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Translations": () => (/* binding */ Translations)
/* harmony export */ });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Represents collection of parameters and their values.
 * @class Translations
 */
class Translations {
    constructor() {
        // Use an PropertyCollection internally, just wrapping it to hide the | enum syntax it has.
        this.privMap = new _Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyCollection();
    }
    /**
     * Get the languages in the object in a String array.
     * @member Translations.prototype.languages
     * @function
     * @public
     * @returns {string[]} languages in translations object.
     */
    get languages() {
        return this.privMap.keys;
    }
    /**
     * Returns the parameter value in type String. The parameter must have the same type as String.
     * Currently only String, int and bool are allowed.
     * If the name is not available, the specified defaultValue is returned.
     * @member Translations.prototype.get
     * @function
     * @public
     * @param {string} key - The parameter name.
     * @param {string} def - The default value which is returned if the parameter is not available in the collection.
     * @returns {string} value of the parameter.
     */
    get(key, def) {
        return this.privMap.getProperty(key, def);
    }
    /**
     * Sets the String value of the parameter specified by name.
     * @member Translations.prototype.set
     * @function
     * @public
     * @param {string} key - The parameter name.
     * @param {string} value - The value of the parameter.
     */
    set(key, value) {
        this.privMap.setProperty(key, value);
    }
}

//# sourceMappingURL=Translations.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TurnStatusReceivedEventArgs.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TurnStatusReceivedEventArgs.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TurnStatusReceivedEventArgs": () => (/* binding */ TurnStatusReceivedEventArgs)
/* harmony export */ });
/* harmony import */ var _common_speech_ServiceMessages_TurnStatusPayload__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.speech/ServiceMessages/TurnStatusPayload */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/TurnStatusPayload.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Defines contents of received message/events.
 * @class TurnStatusReceivedEventArgs
 */
class TurnStatusReceivedEventArgs {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {string} turnStatus - The JSON-encoded turn status message.
     */
    constructor(turnStatus) {
        this.privTurnStatus = _common_speech_ServiceMessages_TurnStatusPayload__WEBPACK_IMPORTED_MODULE_0__.TurnStatusResponsePayload.fromJSON(turnStatus);
    }
    /**
     * Gets the interaction identifier associated with this turn status event.
     * @member TurnStatusReceivedEventArgs.prototype.interactionId
     * @function
     * @public
     * @returns {any} the received interaction id.
     */
    get interactionId() {
        return this.privTurnStatus.interactionId;
    }
    /**
     * Gets the conversation identifier associated with this turn status event.
     * @member TurnStatusReceivedEventArgs.prototype.conversationId
     * @function
     * @public
     * @returns {any} the received conversation id.
     */
    get conversationId() {
        return this.privTurnStatus.conversationId;
    }
    /**
     * Gets the received turn status code.
     * @member TurnStatusReceivedEventArgs.prototype.statusCode
     * @function
     * @public
     * @returns {number} the received turn status.
     */
    get statusCode() {
        return this.privTurnStatus.statusCode; // eslint-disable-line @typescript-eslint/no-unsafe-return
    }
}

//# sourceMappingURL=TurnStatusReceivedEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceInfo.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceInfo.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SynthesisVoiceGender": () => (/* binding */ SynthesisVoiceGender),
/* harmony export */   "SynthesisVoiceType": () => (/* binding */ SynthesisVoiceType),
/* harmony export */   "VoiceInfo": () => (/* binding */ VoiceInfo)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Defines the gender of synthesis voices.
 * Added in version 1.20.0.
 */
var SynthesisVoiceGender;
(function (SynthesisVoiceGender) {
    /** Gender unknown */
    SynthesisVoiceGender[SynthesisVoiceGender["Unknown"] = 0] = "Unknown";
    /** Female voice */
    SynthesisVoiceGender[SynthesisVoiceGender["Female"] = 1] = "Female";
    /** Male voice */
    SynthesisVoiceGender[SynthesisVoiceGender["Male"] = 2] = "Male";
})(SynthesisVoiceGender || (SynthesisVoiceGender = {}));
var SynthesisVoiceType;
(function (SynthesisVoiceType) {
    SynthesisVoiceType[SynthesisVoiceType["OnlineNeural"] = 1] = "OnlineNeural";
    SynthesisVoiceType[SynthesisVoiceType["OnlineStandard"] = 2] = "OnlineStandard";
    SynthesisVoiceType[SynthesisVoiceType["OfflineNeural"] = 3] = "OfflineNeural";
    SynthesisVoiceType[SynthesisVoiceType["OfflineStandard"] = 4] = "OfflineStandard";
})(SynthesisVoiceType || (SynthesisVoiceType = {}));
/**
 * Information about Speech Synthesis voice
 * Added in version 1.20.0.
 * @class VoiceInfo
 */
class VoiceInfo {
    constructor(json) {
        this.privStyleList = [];
        this.privVoicePath = "";
        if (!!json) {
            this.privName = json.Name;
            this.privLocale = json.Locale;
            this.privShortName = json.ShortName;
            this.privLocaleName = json.LocaleName;
            this.privLocalName = json.LocalName;
            this.privVoiceType = json.VoiceType.endsWith("Standard") ? SynthesisVoiceType.OnlineStandard : SynthesisVoiceType.OnlineNeural;
            this.privGender = json.Gender === "Male" ? SynthesisVoiceGender.Male : json.Gender === "Female" ? SynthesisVoiceGender.Female : SynthesisVoiceGender.Unknown;
            if (!!json.StyleList && Array.isArray(json.StyleList)) {
                for (const style of json.StyleList) {
                    this.privStyleList.push(style);
                }
            }
        }
    }
    get name() {
        return this.privName;
    }
    get locale() {
        return this.privLocale;
    }
    get shortName() {
        return this.privShortName;
    }
    get localName() {
        return this.privLocalName;
    }
    get localeName() {
        return this.privLocaleName;
    }
    get gender() {
        return this.privGender;
    }
    get voiceType() {
        return this.privVoiceType;
    }
    get styleList() {
        return this.privStyleList;
    }
    get voicePath() {
        return this.privVoicePath;
    }
}

//# sourceMappingURL=VoiceInfo.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceProfile.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceProfile.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VoiceProfile": () => (/* binding */ VoiceProfile)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Defines Voice Profile class for Speaker Recognition
 * @class VoiceProfile
 */
class VoiceProfile {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {string} profileId - profileId of this Voice Profile.
     * @param {VoiceProfileType} profileType - profileType of this Voice Profile.
     */
    constructor(profileId, profileType) {
        this.privId = profileId;
        this.privProfileType = profileType;
    }
    /**
     * profileId of this Voice Profile instance
     * @member VoiceProfile.prototype.profileId
     * @function
     * @public
     * @returns {string} profileId of this Voice Profile instance.
     */
    get profileId() {
        return this.privId;
    }
    /**
     * profileType of this Voice Profile instance
     * @member VoiceProfile.prototype.profileType
     * @function
     * @public
     * @returns {VoiceProfileType} profile type of this Voice Profile instance.
     */
    get profileType() {
        return this.privProfileType;
    }
}

//# sourceMappingURL=VoiceProfile.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceProfileClient.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceProfileClient.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VoiceProfileClient": () => (/* binding */ VoiceProfileClient)
/* harmony export */ });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeakerRecognitionConnectionFactory.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/VoiceServiceRecognizer.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognizerConfig.js");
/* harmony import */ var _Audio_AudioConfig__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Audio/AudioConfig */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioConfig.js");
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Recognizer.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioInputStream.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceProfile.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceProfileResult.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ResultReason.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




/**
 * Defines VoiceProfileClient class for Speaker Recognition
 * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)
 * @class VoiceProfileClient
 */
class VoiceProfileClient extends _Exports__WEBPACK_IMPORTED_MODULE_0__.Recognizer {
    /**
     * VoiceProfileClient constructor.
     * @constructor
     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)
     */
    constructor(speechConfig) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrUndefined(speechConfig, "speechConfig");
        const speechConfigImpl = speechConfig;
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNull(speechConfigImpl, "speechConfig");
        super(_Audio_AudioConfig__WEBPACK_IMPORTED_MODULE_2__.AudioConfig.fromStreamInput(_Exports__WEBPACK_IMPORTED_MODULE_3__.AudioInputStream.createPushStream()), speechConfigImpl.properties, new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_4__.VoiceProfileConnectionFactory());
        this.privProperties = speechConfigImpl.properties.clone();
        this.privVoiceAdapter = this.privReco;
        this.privDisposedVoiceAdapter = false;
    }
    /**
     * The collection of properties and their values defined for this VoiceProfileClient.
     * @member VoiceProfileClient.prototype.properties
     * @function
     * @public
     * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.
     */
    get properties() {
        return this.privProperties;
    }
    /**
     * Gets the authorization token used to communicate with the service.
     * @member VoiceProfileClient.prototype.authorizationToken
     * @function
     * @public
     * @returns {string} Authorization token.
     */
    get authorizationToken() {
        return this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_5__.PropertyId.SpeechServiceAuthorization_Token);
    }
    /**
     * Gets/Sets the authorization token used to communicate with the service.
     * @member VoiceProfileClient.prototype.authorizationToken
     * @function
     * @public
     * @param {string} token - Authorization token.
     */
    set authorizationToken(token) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrWhitespace(token, "token");
        this.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_5__.PropertyId.SpeechServiceAuthorization_Token, token);
    }
    /**
     * Create a speaker recognition voice profile
     * @member VoiceProfileClient.prototype.createProfileAsync
     * @function
     * @public
     * @async
     * @param {VoiceProfileType} profileType Type of Voice Profile to be created
     * @param {string} lang Language string (locale) for Voice Profile
     * @return {Promise<VoiceProfile>} - Promise of a VoiceProfile.
     */
    createProfileAsync(profileType, lang) {
        return __awaiter(this, void 0, void 0, function* () {
            const profileIds = yield this.privVoiceAdapter.createProfile(profileType, lang);
            return new _Exports__WEBPACK_IMPORTED_MODULE_6__.VoiceProfile(profileIds[0], profileType);
        });
    }
    /**
     * Get current information of a voice profile
     * @member VoiceProfileClient.prototype.retrieveEnrollmentResultAsync
     * @function
     * @public
     * @async
     * @param {VoiceProfile} profile Voice Profile to retrieve info for
     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.
     */
    retrieveEnrollmentResultAsync(profile) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.privVoiceAdapter.retrieveEnrollmentResult(profile);
        });
    }
    /**
     * Get all voice profiles on account with given voice profile type
     * @member VoiceProfileClient.prototype.getAllProfilesAsync
     * @function
     * @public
     * @async
     * @param {VoiceProfileType} profileType profile type (identification/verification) for which to list profiles
     * @return {Promise<VoiceProfileEnrollmentResult[]>} - Promise of an array of VoiceProfileEnrollmentResults.
     */
    getAllProfilesAsync(profileType) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.privVoiceAdapter.getAllProfiles(profileType);
            /*
            const result: { json: { value: EnrollmentResultJSON[] } } = await this.privAdapter.getProfiles(profileType);
            if (profileType === VoiceProfileType.TextIndependentIdentification) {
                return VoiceProfileEnrollmentResult.FromIdentificationProfileList(result.json);
            }
            return VoiceProfileEnrollmentResult.FromVerificationProfileList(result.json);
            */
        });
    }
    /**
     * Get valid authorization phrases for voice profile enrollment
     * @member VoiceProfileClient.prototype.getActivationPhrasesAsync
     * @function
     * @public
     * @async
     * @param {VoiceProfileType} profileType Profile Type to get activation phrases for
     * @param {string} lang Language string (locale) for Voice Profile
     */
    getActivationPhrasesAsync(profileType, lang) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.privVoiceAdapter.getActivationPhrases(profileType, lang);
        });
    }
    /**
     * Create a speaker recognition voice profile
     * @member VoiceProfileClient.prototype.enrollProfileAsync
     * @function
     * @public
     * @async
     * @param {VoiceProfile} profile Voice Profile to create enrollment for
     * @param {AudioConfig} audioConfig source info from which to create enrollment
     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.
     */
    enrollProfileAsync(profile, audioConfig) {
        return __awaiter(this, void 0, void 0, function* () {
            const configImpl = audioConfig;
            _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrUndefined(configImpl, "audioConfig");
            this.audioConfig = audioConfig;
            this.privVoiceAdapter.SpeakerAudioSource = configImpl;
            return this.privVoiceAdapter.enrollProfile(profile);
        });
    }
    /**
     * Delete a speaker recognition voice profile
     * @member VoiceProfileClient.prototype.deleteProfileAsync
     * @function
     * @public
     * @async
     * @param {VoiceProfile} profile Voice Profile to be deleted
     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.
     */
    deleteProfileAsync(profile) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.privVoiceAdapter.deleteProfile(profile);
        });
    }
    /**
     * Remove all enrollments for a speaker recognition voice profile
     * @member VoiceProfileClient.prototype.resetProfileAsync
     * @function
     * @public
     * @async
     * @param {VoiceProfile} profile Voice Profile to be reset
     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.
     */
    resetProfileAsync(profile) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.privVoiceAdapter.resetProfile(profile);
        });
    }
    /**
     * Clean up object and close underlying connection
     * @member VoiceProfileClient.prototype.close
     * @function
     * @async
     * @public
     */
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.dispose(true);
        });
    }
    createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {
        const audioImpl = audioConfig;
        return new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_7__.VoiceServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);
    }
    dispose(disposing) {
        const _super = Object.create(null, {
            dispose: { get: () => super.dispose }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (this.privDisposedVoiceAdapter) {
                return;
            }
            this.privDisposedVoiceAdapter = true;
            if (disposing) {
                yield _super.dispose.call(this, disposing);
            }
        });
    }
    createRecognizerConfig(speechConfig) {
        return new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_8__.RecognizerConfig(speechConfig, this.properties);
    }
    getResult(result, successReason) {
        const response = new _Exports__WEBPACK_IMPORTED_MODULE_9__.VoiceProfileResult(result.ok ? successReason : _Exports__WEBPACK_IMPORTED_MODULE_10__.ResultReason.Canceled, result.statusText);
        return (response);
    }
}

//# sourceMappingURL=VoiceProfileClient.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceProfileEnrollmentResult.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceProfileEnrollmentResult.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VoiceProfileEnrollmentCancellationDetails": () => (/* binding */ VoiceProfileEnrollmentCancellationDetails),
/* harmony export */   "VoiceProfileEnrollmentResult": () => (/* binding */ VoiceProfileEnrollmentResult)
/* harmony export */ });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ResultReason.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationErrorCodes.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationDetailsBase.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationReason.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/* eslint-disable max-classes-per-file */


/**
 * Output format
 * @class VoiceProfileEnrollmentResult
 */
class VoiceProfileEnrollmentResult {
    constructor(reason, json, statusText) {
        this.privReason = reason;
        this.privProperties = new _Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyCollection();
        if (this.privReason !== _Exports__WEBPACK_IMPORTED_MODULE_1__.ResultReason.Canceled) {
            if (!!json) {
                this.privDetails = JSON.parse(json);
                if (this.privDetails.enrollmentStatus.toLowerCase() === "enrolling") {
                    this.privReason = _Exports__WEBPACK_IMPORTED_MODULE_1__.ResultReason.EnrollingVoiceProfile;
                }
            }
        }
        else {
            this.privErrorDetails = statusText;
            this.privProperties.setProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_2__.CancellationErrorCodePropertyName, _Exports__WEBPACK_IMPORTED_MODULE_3__.CancellationErrorCode[_Exports__WEBPACK_IMPORTED_MODULE_3__.CancellationErrorCode.ServiceError]);
        }
    }
    get reason() {
        return this.privReason;
    }
    get enrollmentsCount() {
        return this.privDetails.enrollmentsCount;
    }
    get enrollmentsLength() {
        return this.privDetails.enrollmentsLength;
    }
    get properties() {
        return this.privProperties;
    }
    get enrollmentResultDetails() {
        return this.privDetails;
    }
    get errorDetails() {
        return this.privErrorDetails;
    }
    static FromIdentificationProfileList(json) {
        const results = [];
        for (const item of json.value) {
            const reason = item.enrollmentStatus.toLowerCase() === "enrolling" ?
                _Exports__WEBPACK_IMPORTED_MODULE_1__.ResultReason.EnrollingVoiceProfile : item.enrollmentStatus.toLowerCase() === "enrolled" ?
                _Exports__WEBPACK_IMPORTED_MODULE_1__.ResultReason.EnrolledVoiceProfile : _Exports__WEBPACK_IMPORTED_MODULE_1__.ResultReason.Canceled;
            const result = new VoiceProfileEnrollmentResult(reason, null, null);
            result.privDetails = this.getIdentificationDetails(item);
            results.push(result);
        }
        return results;
    }
    static FromVerificationProfileList(json) {
        const results = [];
        for (const item of json.value) {
            const reason = item.enrollmentStatus.toLowerCase() === "enrolling" ?
                _Exports__WEBPACK_IMPORTED_MODULE_1__.ResultReason.EnrollingVoiceProfile : item.enrollmentStatus.toLowerCase() === "enrolled" ?
                _Exports__WEBPACK_IMPORTED_MODULE_1__.ResultReason.EnrolledVoiceProfile : _Exports__WEBPACK_IMPORTED_MODULE_1__.ResultReason.Canceled;
            const result = new VoiceProfileEnrollmentResult(reason, null, null);
            result.privDetails = this.getVerificationDetails(item);
            results.push(result);
        }
        return results;
    }
    static getIdentificationDetails(json) {
        return {
            audioLength: json.audioLength ? parseFloat(json.audioLength) : 0,
            audioSpeechLength: json.audioSpeechLength ? parseFloat(json.audioSpeechLength) : 0,
            enrollmentStatus: json.enrollmentStatus,
            enrollmentsCount: json.enrollmentsCount || 0,
            enrollmentsLength: json.enrollmentsLength ? parseFloat(json.enrollmentsLength) : 0,
            enrollmentsSpeechLength: json.enrollmentsSpeechLength ? parseFloat(json.enrollmentsSpeechLength) : 0,
            profileId: json.profileId || json.identificationProfileId,
            remainingEnrollmentsSpeechLength: json.remainingEnrollmentsSpeechLength ? parseFloat(json.remainingEnrollmentsSpeechLength) : 0
        };
    }
    static getVerificationDetails(json) {
        return {
            audioLength: json.audioLength ? parseFloat(json.audioLength) : 0,
            audioSpeechLength: json.audioSpeechLength ? parseFloat(json.audioSpeechLength) : 0,
            enrollmentStatus: json.enrollmentStatus,
            enrollmentsCount: json.enrollmentsCount,
            enrollmentsLength: json.enrollmentsLength ? parseFloat(json.enrollmentsLength) : 0,
            enrollmentsSpeechLength: json.enrollmentsSpeechLength ? parseFloat(json.enrollmentsSpeechLength) : 0,
            profileId: json.profileId || json.verificationProfileId,
            remainingEnrollmentsCount: json.remainingEnrollments || json.remainingEnrollmentsCount,
            remainingEnrollmentsSpeechLength: json.remainingEnrollmentsSpeechLength ? parseFloat(json.remainingEnrollmentsSpeechLength) : 0
        };
    }
}
/**
 * @class VoiceProfileEnrollmentCancellationDetails
 */
class VoiceProfileEnrollmentCancellationDetails extends _Exports__WEBPACK_IMPORTED_MODULE_4__.CancellationDetailsBase {
    constructor(reason, errorDetails, errorCode) {
        super(reason, errorDetails, errorCode);
    }
    /**
     * Creates an instance of VoiceProfileEnrollmentCancellationDetails object for the canceled VoiceProfileEnrollmentResult.
     * @member VoiceProfileEnrollmentCancellationDetails.fromResult
     * @function
     * @public
     * @param {VoiceProfileEnrollmentResult} result - The result that was canceled.
     * @returns {VoiceProfileEnrollmentCancellationDetails} The cancellation details object being created.
     */
    static fromResult(result) {
        const reason = _Exports__WEBPACK_IMPORTED_MODULE_5__.CancellationReason.Error;
        let errorCode = _Exports__WEBPACK_IMPORTED_MODULE_3__.CancellationErrorCode.NoError;
        if (!!result.properties) {
            errorCode = _Exports__WEBPACK_IMPORTED_MODULE_3__.CancellationErrorCode[result.properties.getProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_2__.CancellationErrorCodePropertyName, _Exports__WEBPACK_IMPORTED_MODULE_3__.CancellationErrorCode[_Exports__WEBPACK_IMPORTED_MODULE_3__.CancellationErrorCode.NoError])]; //eslint-disable-line
        }
        return new VoiceProfileEnrollmentCancellationDetails(reason, result.errorDetails, errorCode);
    }
}

//# sourceMappingURL=VoiceProfileEnrollmentResult.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceProfilePhraseResult.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceProfilePhraseResult.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VoiceProfilePhraseResult": () => (/* binding */ VoiceProfilePhraseResult)
/* harmony export */ });
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceProfileResult.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


/**
 * Output format
 * @class VoiceProfilePhraseResult
 */
class VoiceProfilePhraseResult extends _Exports__WEBPACK_IMPORTED_MODULE_0__.VoiceProfileResult {
    constructor(reason, statusText, type, phraseArray) {
        super(reason, statusText);
        this.privPhrases = [];
        _Contracts__WEBPACK_IMPORTED_MODULE_1__.Contracts.throwIfNullOrUndefined(phraseArray, "phrase array");
        this.privType = type;
        if (!!phraseArray && !!phraseArray[0]) {
            this.privPhrases = phraseArray;
        }
    }
    get phrases() {
        return this.privPhrases;
    }
    get type() {
        return this.privType;
    }
}

//# sourceMappingURL=VoiceProfilePhraseResult.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceProfileResult.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceProfileResult.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VoiceProfileCancellationDetails": () => (/* binding */ VoiceProfileCancellationDetails),
/* harmony export */   "VoiceProfileResult": () => (/* binding */ VoiceProfileResult)
/* harmony export */ });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ResultReason.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationErrorCodes.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationDetailsBase.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationReason.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/* eslint-disable max-classes-per-file */



/**
 * Output format
 * @class VoiceProfileResult
 */
class VoiceProfileResult {
    constructor(reason, statusText) {
        this.privReason = reason;
        this.privProperties = new _Exports__WEBPACK_IMPORTED_MODULE_0__.PropertyCollection();
        if (reason === _Exports__WEBPACK_IMPORTED_MODULE_1__.ResultReason.Canceled) {
            _Contracts__WEBPACK_IMPORTED_MODULE_2__.Contracts.throwIfNullOrUndefined(statusText, "statusText");
            this.privErrorDetails = statusText;
            this.privProperties.setProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_3__.CancellationErrorCodePropertyName, _Exports__WEBPACK_IMPORTED_MODULE_4__.CancellationErrorCode[_Exports__WEBPACK_IMPORTED_MODULE_4__.CancellationErrorCode.ServiceError]);
        }
    }
    get reason() {
        return this.privReason;
    }
    get properties() {
        return this.privProperties;
    }
    get errorDetails() {
        return this.privErrorDetails;
    }
}
/**
 * @class VoiceProfileCancellationDetails
 */
class VoiceProfileCancellationDetails extends _Exports__WEBPACK_IMPORTED_MODULE_5__.CancellationDetailsBase {
    constructor(reason, errorDetails, errorCode) {
        super(reason, errorDetails, errorCode);
    }
    /**
     * Creates an instance of VoiceProfileCancellationDetails object for the canceled VoiceProfileResult.
     * @member VoiceProfileCancellationDetails.fromResult
     * @function
     * @public
     * @param {VoiceProfileResult} result - The result that was canceled.
     * @returns {VoiceProfileCancellationDetails} The cancellation details object being created.
     */
    static fromResult(result) {
        const reason = _Exports__WEBPACK_IMPORTED_MODULE_6__.CancellationReason.Error;
        let errorCode = _Exports__WEBPACK_IMPORTED_MODULE_4__.CancellationErrorCode.NoError;
        if (!!result.properties) {
            errorCode = _Exports__WEBPACK_IMPORTED_MODULE_4__.CancellationErrorCode[result.properties.getProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_3__.CancellationErrorCodePropertyName, _Exports__WEBPACK_IMPORTED_MODULE_4__.CancellationErrorCode[_Exports__WEBPACK_IMPORTED_MODULE_4__.CancellationErrorCode.NoError])]; //eslint-disable-line
        }
        return new VoiceProfileCancellationDetails(reason, result.errorDetails, errorCode);
    }
}

//# sourceMappingURL=VoiceProfileResult.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceProfileType.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceProfileType.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VoiceProfileType": () => (/* binding */ VoiceProfileType)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Output format
 * @class VoiceProfileType
 */
var VoiceProfileType;
(function (VoiceProfileType) {
    /**
     * Text independent speaker identification
     * @member VoiceProfileType.TextIndependentIdentification
     */
    VoiceProfileType[VoiceProfileType["TextIndependentIdentification"] = 0] = "TextIndependentIdentification";
    /**
     * Text dependent speaker verification
     * @member VoiceProfileType.TextDependentVerification
     */
    VoiceProfileType[VoiceProfileType["TextDependentVerification"] = 1] = "TextDependentVerification";
    /**
     * Text independent speaker verification
     * @member VoiceProfileType.TextIndependentVerification
     */
    VoiceProfileType[VoiceProfileType["TextIndependentVerification"] = 2] = "TextIndependentVerification";
})(VoiceProfileType || (VoiceProfileType = {}));

//# sourceMappingURL=VoiceProfileType.js.map


/***/ }),

/***/ "./src/Options/models.ts":
/*!*******************************!*\
  !*** ./src/Options/models.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.models = void 0;
exports.models = [
    {
        'name': 'gpt-3.5-turbo',
        'id': 'openai/gpt-3.5-turbo'
    },
    {
        'name': 'gpt-3.5-turbo-16k',
        'id': 'openai/gpt-3.5-turbo-16k'
    },
    {
        'name': 'gpt-4',
        'id': 'openai/gpt-4'
    },
    {
        'name': 'gpt-4-32k',
        'id': 'openai/gpt-4-32k'
    },
    {
        'name': 'claude-2',
        'id': 'anthropic/claude-2'
    },
    {
        'name': 'claude-instant-v1',
        'id': 'anthropic/claude-instant-v1'
    },
    {
        'name': 'PaLM 2 Bison',
        'id': 'google/palm-2-chat-bison'
    },
    {
        'name': 'Llama v2 13B Chat (beta)',
        'id': 'meta-llama/llama-2-13b-chat'
    }
];


/***/ }),

/***/ "./src/Options/util.ts":
/*!*****************************!*\
  !*** ./src/Options/util.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getSettings = void 0;
const webextension_polyfill_1 = __importDefault(__webpack_require__(/*! webextension-polyfill */ "./node_modules/webextension-polyfill/dist/browser-polyfill.js"));
const models_1 = __webpack_require__(/*! ./models */ "./src/Options/models.ts");
function getSettings() {
    return __awaiter(this, void 0, void 0, function* () {
        let items = yield webextension_polyfill_1.default.storage.sync.get({
            "openApiKey": '',
            "openApiEndpoint": 'https://api.openai.com',
            "unsplashApiKey": '',
            "currentLanguage": '',
            "targetLanguage": '',
            "ankiDeckName": '',
            "licenseKey": '',
            "model": models_1.models[0]['id'], "apiKeySelection": 'licenseKey'
        });
        return items;
    });
}
exports.getSettings = getSettings;


/***/ }),

/***/ "./src/background.ts":
/*!***************************!*\
  !*** ./src/background.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const webextension_polyfill_1 = __importDefault(__webpack_require__(/*! webextension-polyfill */ "./node_modules/webextension-polyfill/dist/browser-polyfill.js"));
const amplitude = __importStar(__webpack_require__(/*! @amplitude/analytics-browser */ "./node_modules/@amplitude/analytics-browser/lib/esm/index.js"));
const eventsource_parser_1 = __webpack_require__(/*! eventsource-parser */ "./node_modules/eventsource-parser/dist/index.js");
const util_1 = __webpack_require__(/*! ./util */ "./src/util.ts");
const unsplash_js_1 = __webpack_require__(/*! unsplash-js */ "./node_modules/unsplash-js/dist/unsplash-js.esm.js");
const util_2 = __webpack_require__(/*! ./Options/util */ "./src/Options/util.ts");
const util_3 = __webpack_require__(/*! ./util */ "./src/util.ts");
// content script 关闭窗口时，将此值设为 false 以中断数据渲染
// let isContinue = true
(0, util_3.getUserId)().then((userId) => {
    // 数据埋点
    amplitude.init("ed720e33b4190ef29a0718a040bbb55a", userId, {
        defaultTracking: {
            pageViews: false,
            sessions: false,
        },
    });
});
let controller = new AbortController();
const defaultOpenApiEndpoint = 'https://api.openai.com';
console.log('I am background');
webextension_polyfill_1.default.runtime.onInstalled.addListener(function () {
    console.log("插件已被安装");
    amplitude.track("install");
});
// 卸载插件后引导填写卸载原因，帮助产品优化
webextension_polyfill_1.default.runtime.setUninstallURL("https://docs.google.com/forms/d/e/1FAIpQLSdobGQN3O0Ck4fVrgfvRZMme3de-2OaEp1pFtibZkU0koc37w/viewform?usp=sf_link");
// 创建右键菜单
webextension_polyfill_1.default.contextMenus.create({
    id: "2",
    title: "Run last prompt",
    contexts: ["selection"],
}, () => {
    webextension_polyfill_1.default.runtime.lastError;
});
webextension_polyfill_1.default.contextMenus.create({
    id: "1",
    title: "Open",
    contexts: ["selection"],
}, () => {
    webextension_polyfill_1.default.runtime.lastError;
});
// 右键菜单点击事件
webextension_polyfill_1.default.contextMenus.onClicked.addListener(function (info, _tab) {
    return __awaiter(this, void 0, void 0, function* () {
        const runPrompt = info.menuItemId === '2' ? true : false;
        sendMessageToContent(runPrompt);
    });
});
// 监听快捷键
webextension_polyfill_1.default.commands.onCommand.addListener(function (command) {
    console.log('hello');
    if (command === 'RunLastPrompt') {
        // 执行相关代码
        sendMessageToContent();
    }
});
let popupPort;
// 长连接，处理 GPT 数据
webextension_polyfill_1.default.runtime.onConnect.addListener(port => {
    // 收到 content script 消息
    // console.log('连接中------------')
    if (port.name === 'fromPopupCard') {
        popupPort = port;
    }
    // amplitude.init(process.env.AMPLITUDE_KEY as string);
    // amplitude.track('executivePrompt');
    // 接收 content script 的消息
    port.onMessage.addListener((msg) => __awaiter(void 0, void 0, void 0, function* () {
        console.log('接收消息：', msg);
        // 获取 API Key 等存储的数据
        let openApiKey, apiKeySelection, model, licenseKey, currentLanguage, openApiEndpoint, targetLanguage = '';
        (0, util_2.getSettings)().then((result) => {
            apiKeySelection = result.apiKeySelection;
            licenseKey = result.licenseKey;
            openApiKey = result.openApiKey;
            openApiEndpoint = result.openApiEndpoint;
            currentLanguage = result.currentLanguage;
            targetLanguage = result.targetLanguage;
            model = result.model;
            // 请求  GPT 数据
            if (msg.type === 'getGPTMsg') {
                console.log('getGPTMsg');
                // isContinue = true 时才会渲染数据
                // isContinue = true
                // controller.abort();
                controller = new AbortController();
                let messages = msg.messages;
                if (openApiKey.length < 5 && licenseKey.length < 5) {
                    port.postMessage({ 'type': 'sendGPTData', 'status': 'erro', 'code': 'invalid_api_key', 'content': '🥲 API Key error. Please modify and try again..' });
                    return;
                }
                if (openApiEndpoint.length < 5) {
                    openApiEndpoint = defaultOpenApiEndpoint;
                }
                let headers = {};
                let body;
                // 优先使用自己的 Key
                if (apiKeySelection === 'licenseKey') {
                    // 使用许可证
                    openApiEndpoint = 'https://openrouter.ai/api/v1/chat/completions';
                    openApiKey = licenseKey;
                    headers = {
                        'Authorization': 'Bearer ' + openApiKey,
                        'Content-Type': 'application/json',
                        'HTTP-Referer': 'https://notes.dabing.one/',
                        'X-Title': 'Scouter'
                    };
                    body = JSON.stringify({
                        "model": model,
                        "messages": messages,
                        "temperature": 0.7,
                        "max_tokens": 420,
                        "top_p": 1,
                        "frequency_penalty": 0,
                        "presence_penalty": 2,
                        "stream": true
                    });
                }
                else {
                    // 使用用户自己的 Key
                    if (openApiEndpoint.indexOf('azure.com') > -1) {
                        // Azure
                        headers = { 'api-key': openApiKey, 'Content-Type': 'application/json', };
                        body = JSON.stringify({
                            "model": "gpt-35-turbo",
                            "messages": messages,
                            "temperature": 0.7,
                            "max_tokens": 420,
                            "top_p": 1,
                            "frequency_penalty": 0,
                            "presence_penalty": 2,
                            "stream": true
                        });
                    }
                    else {
                        // OpenAI
                        headers = { 'Authorization': 'Bearer ' + openApiKey, 'Content-Type': 'application/json', };
                        // 去除端点末尾的 \ 符号
                        if (openApiEndpoint.slice(-1) === "/") {
                            openApiEndpoint = openApiEndpoint.slice(0, -1);
                        }
                        openApiEndpoint += '/v1/chat/completions';
                        body = JSON.stringify({
                            "model": "gpt-3.5-turbo",
                            "messages": messages,
                            "temperature": 0.7,
                            "max_tokens": 420,
                            "top_p": 1,
                            "frequency_penalty": 0,
                            "presence_penalty": 2,
                            "stream": true
                        });
                    }
                }
                fetch(openApiEndpoint, {
                    signal: controller.signal,
                    method: "POST",
                    body: body,
                    headers: headers
                }).then((response) => __awaiter(void 0, void 0, void 0, function* () {
                    var _a;
                    port.postMessage({ 'type': 'sendGPTData', 'status': 'begin', 'content': '' });
                    if (response.status !== 200) {
                        // API KEY Error
                        response.json().then((data) => {
                            port.postMessage({ 'type': 'sendGPTData', 'status': 'erro', 'content': '🥲 ' + data.error.message, 'code': data.error.code });
                            return;
                        });
                    }
                    // 处理 server-sent events
                    const parser = (0, eventsource_parser_1.createParser)((event) => {
                        if (event.type === 'event') {
                            // console.log('createParser:');
                            try {
                                if (event.data !== '[DONE]') {
                                    let new_msg = JSON.parse(event.data)['choices'][0]['delta']['content'];
                                    if (new_msg !== undefined) {
                                        // 将数据发送给 UI 以渲染内容
                                        port.postMessage({ 'type': 'sendGPTData', 'status': 'process', 'content': JSON.parse(event.data)['choices'][0]['delta']['content'], 'chatId': JSON.parse(event.data).id });
                                    }
                                }
                            }
                            catch (_a) {
                                console.log(' createParser JSON.parse errow');
                            }
                        }
                    });
                    const reader = (_a = response.body) === null || _a === void 0 ? void 0 : _a.getReader();
                    if (reader !== undefined) {
                        try {
                            // eslint-disable-next-line no-constant-condition
                            while (true) {
                                const { done, value } = yield reader.read();
                                // const { done:boolean, value:uint8Array } = await Promise.race([reader.read(), cancelPromise]);
                                if (done) {
                                    // 数据传输结束
                                    console.log('Done');
                                    port.postMessage({ 'type': 'sendGPTData', 'status': 'end', 'content': '' });
                                    break;
                                }
                                // if (!isContinue) {
                                //   console.log('停止渲染数据')
                                //   break
                                // }
                                const str = new TextDecoder().decode(value);
                                parser.feed(str);
                            }
                        }
                        finally {
                            reader.releaseLock();
                        }
                        parser.reset();
                    }
                })).catch((error) => {
                    console.log('error');
                    console.log(error);
                    if (error.message.indexOf('aborted') >= 0) {
                        // 开启新的请求，中断旧请求
                    }
                    else {
                        const tips = error.message.indexOf('Failed to fetch') >= 0 ? '🥲An error occurred. It might be an **API endpoint error**' + '(' + openApiEndpoint + ')' + '. Please modify and try again.' : '🥲An error occurred.';
                        port.postMessage({ 'type': 'sendGPTData', 'status': 'erro', 'content': tips + '(' + error.message + ')', 'code': error.message });
                    }
                    // port.postMessage({ 'type': 'sendGPTData', 'status': 'erro', 'content': "🥲 Encountered some issues, please try again later." })
                });
            }
            // 停止渲染数据
            if (msg.type === 'StopTheConversation') {
                // isContinue = false
                controller.abort();
            }
        });
    }));
});
webextension_polyfill_1.default.runtime.onMessage.addListener(handleMessage);
function handleMessage(request, sender, sendResponse) {
    console.log("Message from the content script: " +
        request.type);
    // Define sendResponse as an async function
    const asyncSendResponse = (response) => __awaiter(this, void 0, void 0, function* () {
        try {
            yield sendResponse(response);
        }
        catch (error) {
            console.error(error);
        }
    });
    if (request.type === 'getUnsplashImages') {
        console.log('background getUnsplashImages:');
        // 获取图片
        if (request.keyWord) {
            // port.postMessage({ 'type': 'sendImgData', 'status': 'end', 'imgs': imgs })
            (0, util_1.unsplashSearchPhotos)("t8eOwEDwJEGJe7mYWDleFDBK_EM0SaF1hK_4KYfcD_8", request.keyWord).then((imgs) => {
                console.log(imgs);
                // port.postMessage({ 'type': 'sendImgData', 'status': 'end', 'imgs': imgs })
                asyncSendResponse({ type: 'sendImgData', status: 'end', 'imgs': imgs });
            }).catch((error) => {
                console.log(error);
            });
        }
        return true;
    }
    if (request.type === 'addNote') {
        console.log('addNote');
        // Unsplash
        const unsplash = (0, unsplash_js_1.createApi)({
            accessKey: "t8eOwEDwJEGJe7mYWDleFDBK_EM0SaF1hK_4KYfcD_8"
        });
        console.log('unsplash.photos.trackDownload');
        if (request.messages.unsplash_download_location !== undefined) {
            unsplash.photos.trackDownload({ downloadLocation: request.messages.unsplash_download_location, }).then((result) => console.log(result));
        }
        (0, util_1.ankiAction)(request.messages.anki_action_type, 6, request.messages.anki_arguments).then((result) => {
            console.log(`got list of decks: ${result}`);
            // 反馈处理结果
            asyncSendResponse({ type: 'addToAnki', result: 'success', data: result.result, error: result.error });
        })
            .catch((error) => {
            console.error(error);
            asyncSendResponse({ type: 'addToAnki', result: 'failure', error: error.error });
        });
        // Return true to inform sendResponse that you will be calling it asynchronously
        return true;
    }
    // 获取用户设置的牌组和模板
    if (request.type === 'setModel') {
        const isAnkiSpace = request.messages.isAnkiSpace;
        // 获取 DeckName
        (0, util_1.getDefaultDeckName)().then((result) => {
            let defaultDeckName = result.defaultDeckName;
            if (defaultDeckName === '' || defaultDeckName === undefined) {
                defaultDeckName = 'Default';
            }
            // 获取所有 Model
            (0, util_1.ankiAction)('modelNames', 6).then((result) => {
                console.log(result.result);
                if (!result.error) {
                    let defaultModelName = 'Scouter';
                    let cardTemplates = [
                        {
                            'name': 'Card1',
                            'Front': '{{Front}}',
                            'Back': `{{Front}}
              <hr id=answer>
              {{Back}}`
                        }
                    ];
                    let inOrderFields = ["Front", "Back"];
                    if (isAnkiSpace) {
                        // Anki 完形填空
                        defaultModelName = 'Scouter Cloze Text';
                        cardTemplates = [
                            {
                                'name': 'Card2',
                                'Front': '{{cloze:Text}}',
                                'Back': `{{cloze:Text}}
                        <br>{{More}}`
                            }
                        ];
                        inOrderFields = ["Text", "More"];
                    }
                    if (result.result.includes(defaultModelName)) {
                        // 如果有 Scouter Model 则获取 Model 的字段
                        (0, util_1.ankiAction)('modelFieldNames', 6, { 'modelName': defaultModelName }).then((result) => {
                            if (result.result.length < 2) {
                                // 字段少于 2 个时无法添加笔记，引导用户修改
                                asyncSendResponse({ type: 'setModel', result: 'failure', data: {}, error: 'The Scouter model in Anki needs to include at least 2 fields. Please modify and try again.' });
                            }
                            else {
                                // 反馈处理结果
                                asyncSendResponse({ type: 'setModel', result: 'success', data: { 'defaultDeckName': defaultDeckName, 'modelName': defaultModelName, 'field1': result.result[0], 'field2': result.result[1] }, error: result.error });
                            }
                        });
                    }
                    else {
                        // 如果没有 Scouter 默认的 Model，则创建
                        (0, util_1.ankiAction)('createModel', 6, {
                            'modelName': defaultModelName,
                            'inOrderFields': inOrderFields,
                            'cardTemplates': cardTemplates,
                            'isCloze': isAnkiSpace
                        }).then((result) => {
                            if (!result.error) {
                                // 反馈处理结果
                                asyncSendResponse({
                                    type: 'setModel', result: 'success', data: {
                                        'defaultDeckName': defaultDeckName,
                                        'modelName': defaultModelName,
                                        'field1': result.result.flds[0].name,
                                        'field2': result.result.flds[1].name
                                    }, error: result.error
                                });
                            }
                        });
                    }
                }
            })
                .catch((error) => {
                console.error(error);
                asyncSendResponse({ type: 'setModel', result: 'failure', error: error.error });
            });
        });
        webextension_polyfill_1.default.storage.sync.get({ 'ankiDeckName': 'Default' }).then((result) => {
        });
        return true;
    }
    if (request.type === 'guiEditNote') {
        (0, util_1.ankiAction)(request.messages.anki_action_type, 6, request.messages.anki_arguments).then((result) => {
            console.log(`got list of decks: ${result}`);
            // 反馈处理结果
            asyncSendResponse({ type: 'guiEditNote', result: 'success', data: result.result, error: result.error });
        })
            .catch((error) => {
            console.error(error);
            asyncSendResponse({ type: 'guiEditNote', result: 'failure', error: error.error });
        });
        // Return true to inform sendResponse that you will be calling it asynchronously
        return true;
    }
    if (request.type === 'ankiAction') {
        (0, util_1.ankiAction)(request.messages.anki_action_type, 6, request.messages.anki_arguments).then((result) => {
            // 反馈处理结果
            asyncSendResponse(result);
        }).catch((error) => {
            asyncSendResponse(error);
        });
        return true;
    }
    if (request.type === 'amplitudeTrack') {
        amplitude.track(request.name);
        return true;
    }
    if (request.type === 'UPDATE_POPUP_CARD') {
        popupPort.postMessage(request);
    }
}
const sendMessageToContent = (runPrompt) => {
    console.log('sendMessageToContent:');
    let needToRunPrompt = runPrompt;
    if (needToRunPrompt === undefined) {
        needToRunPrompt = true;
    }
    webextension_polyfill_1.default.tabs.query({ active: true, currentWindow: true }).then((tabs) => {
        var _a;
        console.log(tabs);
        const activeTab = tabs[0];
        let tID = (_a = activeTab.id) !== null && _a !== void 0 ? _a : -1;
        if (activeTab && activeTab.id !== undefined) {
            let b = webextension_polyfill_1.default.tabs.sendMessage(tID, { type: 'open-scouter', runPrompt: needToRunPrompt });
            // 已知情况：刚安装插件时直接使用会报错（刷新页面后使用则正常），此时需要载入 content_script.js 才行
            // b.catch(e => {
            //   console.log(e);
            //   console.log('catch');
            //   browser.scripting.executeScript({
            //     target: { tabId: tID },
            //     files: ["js/vendor.js", "js/content_script.js"],
            //   }).then(() => {
            //     console.log('chrome.scripting.executeScript');
            //   }).then(() => {
            //     browser.tabs.sendMessage(tID, { type: 'open-scouter' })
            //   })
            // })
        }
    });
};


/***/ }),

/***/ "./src/util.ts":
/*!*********************!*\
  !*** ./src/util.ts ***!
  \*********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getUserId = exports.getBalance = exports.playTextToSpeech = exports.getDefaultDeckName = exports.unsplashSearchPhotos = exports.ankiAction = void 0;
const webextension_polyfill_1 = __importDefault(__webpack_require__(/*! webextension-polyfill */ "./node_modules/webextension-polyfill/dist/browser-polyfill.js"));
const unsplash_js_1 = __webpack_require__(/*! unsplash-js */ "./node_modules/unsplash-js/dist/unsplash-js.esm.js");
const sdk = __importStar(__webpack_require__(/*! microsoft-cognitiveservices-speech-sdk */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/microsoft.cognitiveservices.speech.sdk.js"));
const uuid_1 = __webpack_require__(/*! uuid */ "./node_modules/uuid/dist/commonjs-browser/index.js");
// 将信息添加到 Anki
function ankiAction(action, version, params = {}) {
    return new Promise((resolve, reject) => {
        fetch('http://127.0.0.1:8765', {
            method: "POST",
            body: JSON.stringify({ "action": action, "version": version, "params": params })
        }).then(response => response.json()).then((data) => {
            // console.log(data);
            resolve(data);
        }).catch((error) => {
            reject({ 'result': [], 'error': 'Please open the Anki client and install the Anki-Connect plugin before trying again.' });
        });
    });
}
exports.ankiAction = ankiAction;
// 在 unsplash 中搜索照片
function unsplashSearchPhotos(API_KEY, query) {
    return new Promise((resolve, reject) => {
        const unsplash = (0, unsplash_js_1.createApi)({
            accessKey: API_KEY,
        });
        unsplash.search.getPhotos({
            query: query,
        }).then((data) => {
            // console.log(data);
            var _a, _b;
            if (((_a = data.response) === null || _a === void 0 ? void 0 : _a.results.length) === 0) {
                resolve([]);
            }
            else {
                resolve((_b = data.response) === null || _b === void 0 ? void 0 : _b.results);
            }
        }).catch((error) => {
            reject(error);
        });
    });
}
exports.unsplashSearchPhotos = unsplashSearchPhotos;
// 获取 Anki 的 Deck 名称，添加到卡片会存放到这里
function getDefaultDeckName() {
    return new Promise((resolve, reject) => {
        let defaultDeckName = '';
        // 获取用户设置的 Deck Name
        webextension_polyfill_1.default.storage.sync.get(["ankiDeckName"]).then((result) => __awaiter(this, void 0, void 0, function* () {
            // console.log('result:');
            // console.log(result);
            if (result.ankiDeckName) {
                // 用户有设置
                defaultDeckName = result.ankiDeckName;
            }
            else {
                // 用户未设置
                // 获取 Anki 的牌组列表
                defaultDeckName = yield ankiAction('deckNames', 6).then((result) => {
                    // 将第一个牌组作为默认牌组
                    return result.result[0];
                }).catch((error) => {
                    // console.log(error);
                    return '';
                });
            }
            resolve({ 'defaultDeckName': defaultDeckName });
        }));
    });
}
exports.getDefaultDeckName = getDefaultDeckName;
const playTextToSpeech = (text, voice) => {
    const audioConfig = sdk.AudioConfig.fromDefaultSpeakerOutput();
    const speechConfig = sdk.SpeechConfig.fromSubscription("51675ff213a64c3896bc95141c6c54dd", "eastus");
    speechConfig.speechSynthesisVoiceName = voice;
    const synthesizer = new sdk.SpeechSynthesizer(speechConfig, audioConfig);
    synthesizer.speakTextAsync(text, function (result) {
        if (result.reason === sdk.ResultReason.SynthesizingAudioCompleted) {
            // console.log('synthesis finished.');
        }
        else {
            console.error('Speech synthesis canceled, ' + result.errorDetails + '\nDid you set the speech resource key and region values?');
        }
        synthesizer.close();
    }, function (err) {
        // console.trace('err - ' + err);
        synthesizer.close();
    });
    // console.log('Now synthesizing...');
};
exports.playTextToSpeech = playTextToSpeech;
const getBalance = (apiKey) => {
    return new Promise((resolve, reject) => {
        const url = 'https://openrouter.ai/api/v1/auth/key';
        const headers = { 'Authorization': 'Bearer ' + apiKey, 'Content-Type': 'application/json', };
        fetch(url, {
            headers: headers
        }).then((response) => {
            response.json().then((data) => {
                resolve(data);
            });
        });
    });
};
exports.getBalance = getBalance;
const getUserId = () => {
    return new Promise((resolve, reject) => {
        chrome.storage.sync.get('userId', (result) => {
            if (chrome.runtime.lastError) {
                reject(chrome.runtime.lastError);
            }
            if (result.userId) {
                resolve(result.userId);
            }
            else {
                let uniqueId = (0, uuid_1.v4)();
                chrome.storage.sync.set({ userId: uniqueId }, () => {
                    if (chrome.runtime.lastError) {
                        reject(chrome.runtime.lastError);
                    }
                    else {
                        resolve(uniqueId);
                    }
                });
            }
        });
    });
};
exports.getUserId = getUserId;


/***/ }),

/***/ "./node_modules/unsplash-js/dist/unsplash-js.esm.js":
/*!**********************************************************!*\
  !*** ./node_modules/unsplash-js/dist/unsplash-js.esm.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Language": () => (/* binding */ Language),
/* harmony export */   "OrderBy": () => (/* binding */ OrderBy),
/* harmony export */   "_internals": () => (/* binding */ internals),
/* harmony export */   "createApi": () => (/* binding */ createApi)
/* harmony export */ });
/* harmony import */ var content_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! content-type */ "./node_modules/content-type/index.js");


function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var checkIsString = /*#__PURE__*/getRefinement(function (value) {
  return typeof value === 'string' ? value : null;
});
var isDefined = function isDefined(x) {
  return x !== null && x !== undefined;
};
function getRefinement(getB) {
  return function (a) {
    return isDefined(getB(a));
  };
}
var checkIsNonEmptyArray = function checkIsNonEmptyArray(a) {
  return a.length > 0;
};

/** Takes a dictionary containing nullish values and returns a dictionary of all the defined
 * (non-nullish) values.
 */

var compactDefined = function compactDefined(obj) {
  return Object.keys(obj).reduce(function (acc, key) {
    var _ref;

    var value = obj[key];
    return _extends({}, acc, isDefined(value) ? (_ref = {}, _ref[key] = value, _ref) : {});
  }, {});
};
function flow() {
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }

  var len = fns.length - 1;
  return function () {
    for (var _len2 = arguments.length, x = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      x[_key2] = arguments[_key2];
    }

    var y = fns[0].apply(this, x);

    for (var i = 1; i <= len; i++) {
      y = fns[i].call(this, y);
    }

    return y;
  };
}

var checkIsObject = /*#__PURE__*/getRefinement(function (response) {
  return isDefined(response) && typeof response === 'object' && !Array.isArray(response) ? response : null;
});
var checkIsErrors = /*#__PURE__*/getRefinement(function (errors) {
  return Array.isArray(errors) && errors.every(checkIsString) && checkIsNonEmptyArray(errors) ? errors : null;
});
var checkIsApiError = /*#__PURE__*/getRefinement(function (response) {
  return checkIsObject(response) && 'errors' in response && checkIsErrors(response.errors) ? {
    errors: response.errors
  } : null;
});
var getErrorForBadStatusCode = function getErrorForBadStatusCode(jsonResponse) {
  if (checkIsApiError(jsonResponse)) {
    return {
      errors: jsonResponse.errors,
      source: 'api'
    };
  } else {
    return {
      errors: ['Responded with a status code outside the 2xx range, and the response body is not recognisable.'],
      source: 'decoding'
    };
  }
};
var DecodingError = function DecodingError(message) {
  this.message = message;
};

var CONTENT_TYPE_RESPONSE_HEADER = 'content-type';
var CONTENT_TYPE_JSON = 'application/json';

var checkIsJsonResponse = function checkIsJsonResponse(response) {
  var contentTypeHeader = response.headers.get(CONTENT_TYPE_RESPONSE_HEADER);
  return isDefined(contentTypeHeader) && (0,content_type__WEBPACK_IMPORTED_MODULE_0__.parse)(contentTypeHeader).type === CONTENT_TYPE_JSON;
};
/**
 * Note: restrict the type of JSON to `AnyJson` so that `any` doesn't leak downstream.
 */


var getJsonResponse = function getJsonResponse(response) {
  if (checkIsJsonResponse(response)) {
    return response.json()["catch"](function (_err) {
      throw new DecodingError('unable to parse JSON response.');
    });
  } else {
    throw new DecodingError('expected JSON response from server.');
  }
};

var handleFetchResponse = function handleFetchResponse(handleResponse) {
  return function (response) {
    return (response.ok ? handleResponse({
      response: response
    }).then(function (handledResponse) {
      return {
        type: 'success',
        status: response.status,
        response: handledResponse,
        originalResponse: response
      };
    }) : getJsonResponse(response).then(function (jsonResponse) {
      return _extends({
        type: 'error',
        status: response.status
      }, getErrorForBadStatusCode(jsonResponse), {
        originalResponse: response
      });
    }))["catch"](function (error) {
      /**
       * We want to separate expected decoding errors from unknown ones. We do so by throwing a custom
       * `DecodingError` whenever we encounter one within `handleFetchResponse` and catch them all
       * here. This allows us to easily handle all of these errors at once. Unexpected errors are not
       * caught, so that they bubble up and fail loudly.
       *
       * Note: Ideally we'd use an Either type, but this does the job without introducing dependencies
       * like `fp-ts`.
       */
      if (error instanceof DecodingError) {
        return {
          type: 'error',
          source: 'decoding',
          status: response.status,
          originalResponse: response,
          errors: [error.message]
        };
      } else {
        throw error;
      }
    });
  };
};
var castResponse = function castResponse() {
  return function (_ref) {
    var response = _ref.response;
    return getJsonResponse(response);
  };
};

var addQueryToUrl = function addQueryToUrl(query) {
  return function (url) {
    Object.keys(query).forEach(function (queryKey) {
      return url.searchParams.set(queryKey, query[queryKey].toString());
    });
  };
};

var addPathnameToUrl = function addPathnameToUrl(pathname) {
  return function (url) {
    // When there is no existing pathname, the value is `/`. Appending would give us a URL with two
    // forward slashes. This is why we replace the value in that scenario.
    if (url.pathname === '/') {
      url.pathname = pathname;
    } else {
      url.pathname += pathname;
    }
  };
};

var buildUrl = function buildUrl(_ref) {
  var pathname = _ref.pathname,
      query = _ref.query;
  return function (apiUrl) {
    var url = new URL(apiUrl);
    addPathnameToUrl(pathname)(url);
    addQueryToUrl(query)(url);
    return url.toString();
  };
};

var getQueryFromSearchParams = function getQueryFromSearchParams(searchParams) {
  var query = {};
  searchParams.forEach(function (value, key) {
    query[key] = value;
  });
  return query;
};

var parseQueryAndPathname = function parseQueryAndPathname(url) {
  var _URL = new URL(url),
      pathname = _URL.pathname,
      searchParams = _URL.searchParams;

  var query = getQueryFromSearchParams(searchParams);
  return {
    query: query,
    pathname: pathname === '/' ? undefined : pathname
  };
};

/**
 * helper used to type-check the arguments, and add default params for all requests
 */

var createRequestHandler = function createRequestHandler(fn) {
  return function (a, additionalFetchOptions) {
    if (additionalFetchOptions === void 0) {
      additionalFetchOptions = {};
    }

    var _fn = fn(a),
        headers = _fn.headers,
        query = _fn.query,
        baseReqParams = _objectWithoutPropertiesLoose(_fn, ["headers", "query"]);

    return _extends({}, baseReqParams, additionalFetchOptions, {
      query: query,
      headers: _extends({}, headers, additionalFetchOptions.headers)
    });
  };
};
var makeEndpoint = function makeEndpoint(endpoint) {
  return endpoint;
};
var initMakeRequest = function initMakeRequest(_ref) {
  var accessKey = _ref.accessKey,
      _ref$apiVersion = _ref.apiVersion,
      apiVersion = _ref$apiVersion === void 0 ? 'v1' : _ref$apiVersion,
      _ref$apiUrl = _ref.apiUrl,
      apiUrl = _ref$apiUrl === void 0 ? 'https://api.unsplash.com' : _ref$apiUrl,
      generalHeaders = _ref.headers,
      providedFetch = _ref.fetch,
      generalFetchOptions = _objectWithoutPropertiesLoose(_ref, ["accessKey", "apiVersion", "apiUrl", "headers", "fetch"]);

  return function (_ref2) {
    var handleResponse = _ref2.handleResponse,
        handleRequest = _ref2.handleRequest;
    return flow(handleRequest, function (_ref3) {
      var pathname = _ref3.pathname,
          query = _ref3.query,
          _ref3$method = _ref3.method,
          method = _ref3$method === void 0 ? 'GET' : _ref3$method,
          endpointHeaders = _ref3.headers,
          body = _ref3.body,
          signal = _ref3.signal;
      var url = buildUrl({
        pathname: pathname,
        query: query
      })(apiUrl);

      var fetchOptions = _extends({
        method: method,
        headers: _extends({}, generalHeaders, endpointHeaders, {
          'Accept-Version': apiVersion
        }, isDefined(accessKey) ? {
          Authorization: "Client-ID " + accessKey
        } : {}),
        body: body,
        signal: signal
      }, generalFetchOptions);

      var fetchToUse = providedFetch != null ? providedFetch : fetch;
      return fetchToUse(url, fetchOptions).then(handleFetchResponse(handleResponse));
    });
  };
};

var TOTAL_RESPONSE_HEADER = 'x-total';

var getTotalFromApiFeedResponse = function getTotalFromApiFeedResponse(response) {
  var totalsStr = response.headers.get(TOTAL_RESPONSE_HEADER);

  if (isDefined(totalsStr)) {
    var total = parseInt(totalsStr);

    if (Number.isInteger(total)) {
      return total;
    } else {
      throw new DecodingError("expected " + TOTAL_RESPONSE_HEADER + " header to be valid integer.");
    }
  } else {
    throw new DecodingError("expected " + TOTAL_RESPONSE_HEADER + " header to exist.");
  }
};

var handleFeedResponse = function handleFeedResponse() {
  return function (_ref) {
    var response = _ref.response;
    return castResponse()({
      response: response
    }).then(function (results) {
      return {
        results: results,
        total: getTotalFromApiFeedResponse(response)
      };
    });
  };
};

var getCollections = function getCollections(collectionIds) {
  return isDefined(collectionIds) ? {
    collections: collectionIds.join()
  } : {};
};
var getTopics = function getTopics(topicIds) {
  return isDefined(topicIds) ? {
    topics: topicIds.join()
  } : {};
};
var getFeedParams = function getFeedParams(_ref) {
  var page = _ref.page,
      perPage = _ref.perPage,
      orderBy = _ref.orderBy;
  return compactDefined({
    per_page: perPage,
    order_by: orderBy,
    page: page
  });
};

var COLLECTIONS_PATH_PREFIX = '/collections';
var getPhotos = /*#__PURE__*/function () {
  var getPathname = function getPathname(_ref) {
    var collectionId = _ref.collectionId;
    return COLLECTIONS_PATH_PREFIX + "/" + collectionId + "/photos";
  };

  return makeEndpoint({
    getPathname: getPathname,
    handleRequest: createRequestHandler(function (_ref2) {
      var collectionId = _ref2.collectionId,
          orientation = _ref2.orientation,
          paginationParams = _objectWithoutPropertiesLoose(_ref2, ["collectionId", "orientation"]);

      return {
        pathname: getPathname({
          collectionId: collectionId
        }),
        query: compactDefined(_extends({}, getFeedParams(paginationParams), {
          orientation: orientation
        }))
      };
    }),
    handleResponse: handleFeedResponse()
  });
}();
var get = /*#__PURE__*/function () {
  var getPathname = function getPathname(_ref3) {
    var collectionId = _ref3.collectionId;
    return COLLECTIONS_PATH_PREFIX + "/" + collectionId;
  };

  return makeEndpoint({
    getPathname: getPathname,
    handleRequest: createRequestHandler(function (_ref4) {
      var collectionId = _ref4.collectionId;
      return {
        pathname: getPathname({
          collectionId: collectionId
        }),
        query: {}
      };
    }),
    handleResponse: castResponse()
  });
}();
var list = /*#__PURE__*/function () {
  var getPathname = function getPathname() {
    return COLLECTIONS_PATH_PREFIX;
  };

  return makeEndpoint({
    getPathname: getPathname,
    handleRequest: createRequestHandler(function (paginationParams) {
      if (paginationParams === void 0) {
        paginationParams = {};
      }

      return {
        pathname: getPathname(),
        query: getFeedParams(paginationParams)
      };
    }),
    handleResponse: handleFeedResponse()
  });
}();
var getRelated = /*#__PURE__*/function () {
  var getPathname = function getPathname(_ref5) {
    var collectionId = _ref5.collectionId;
    return COLLECTIONS_PATH_PREFIX + "/" + collectionId + "/related";
  };

  return makeEndpoint({
    getPathname: getPathname,
    handleRequest: createRequestHandler(function (_ref6) {
      var collectionId = _ref6.collectionId;
      return {
        pathname: getPathname({
          collectionId: collectionId
        }),
        query: {}
      };
    }),
    handleResponse: castResponse()
  });
}();

var index = {
  __proto__: null,
  getPhotos: getPhotos,
  get: get,
  list: list,
  getRelated: getRelated
};

var PHOTOS_PATH_PREFIX = '/photos';
var list$1 = /*#__PURE__*/function () {
  var _getPathname = function getPathname() {
    return PHOTOS_PATH_PREFIX;
  };

  return makeEndpoint({
    // Wrapper uses type trick to allow 0 args
    getPathname: function getPathname(_params) {
      return _getPathname();
    },
    handleRequest: createRequestHandler(function (feedParams) {
      if (feedParams === void 0) {
        feedParams = {};
      }

      return {
        pathname: PHOTOS_PATH_PREFIX,
        query: compactDefined(getFeedParams(feedParams))
      };
    }),
    handleResponse: handleFeedResponse()
  });
}();
var get$1 = /*#__PURE__*/function () {
  var getPathname = function getPathname(_ref) {
    var photoId = _ref.photoId;
    return PHOTOS_PATH_PREFIX + "/" + photoId;
  };

  return makeEndpoint({
    getPathname: getPathname,
    handleRequest: createRequestHandler(function (_ref2) {
      var photoId = _ref2.photoId;
      return {
        pathname: getPathname({
          photoId: photoId
        }),
        query: {}
      };
    }),
    handleResponse: castResponse()
  });
}();
var getStats = /*#__PURE__*/function () {
  var getPathname = function getPathname(_ref3) {
    var photoId = _ref3.photoId;
    return PHOTOS_PATH_PREFIX + "/" + photoId + "/statistics";
  };

  return makeEndpoint({
    getPathname: getPathname,
    handleRequest: createRequestHandler(function (_ref4) {
      var photoId = _ref4.photoId;
      return {
        pathname: getPathname({
          photoId: photoId
        }),
        query: {}
      };
    }),
    handleResponse: castResponse()
  });
}();
var getRandom = /*#__PURE__*/function () {
  var getPathname = function getPathname() {
    return PHOTOS_PATH_PREFIX + "/random";
  };

  return makeEndpoint({
    getPathname: getPathname,
    handleRequest: createRequestHandler(function (_temp) {
      var _ref5 = _temp === void 0 ? {} : _temp,
          collectionIds = _ref5.collectionIds,
          contentFilter = _ref5.contentFilter,
          topicIds = _ref5.topicIds,
          queryParams = _objectWithoutPropertiesLoose(_ref5, ["collectionIds", "contentFilter", "topicIds"]);

      return {
        pathname: getPathname(),
        query: compactDefined(_extends({}, queryParams, {
          content_filter: contentFilter
        }, getCollections(collectionIds), getTopics(topicIds))),
        headers: {
          /**
           * Avoid response caching
           */
          'cache-control': 'no-cache'
        }
      };
    }),
    handleResponse: castResponse()
  });
}();
var trackDownload = {
  handleRequest: /*#__PURE__*/createRequestHandler(function (_ref6) {
    var downloadLocation = _ref6.downloadLocation;

    var _parseQueryAndPathnam = parseQueryAndPathname(downloadLocation),
        pathname = _parseQueryAndPathnam.pathname,
        query = _parseQueryAndPathnam.query;

    if (!isDefined(pathname)) {
      throw new Error('Could not parse pathname from url.');
    }

    return {
      pathname: pathname,
      query: compactDefined(query)
    };
  }),
  handleResponse: /*#__PURE__*/castResponse()
};

var index$1 = {
  __proto__: null,
  list: list$1,
  get: get$1,
  getStats: getStats,
  getRandom: getRandom,
  trackDownload: trackDownload
};

var SEARCH_PATH_PREFIX = "/search";
var getPhotos$1 = /*#__PURE__*/function () {
  var _getPathname = function getPathname() {
    return SEARCH_PATH_PREFIX + "/photos";
  };

  return makeEndpoint({
    // Wrapper uses type trick to allow 0 args
    getPathname: function getPathname(_params) {
      return _getPathname();
    },
    handleRequest: createRequestHandler(function (_ref) {
      var query = _ref.query,
          page = _ref.page,
          perPage = _ref.perPage,
          orderBy = _ref.orderBy,
          collectionIds = _ref.collectionIds,
          lang = _ref.lang,
          contentFilter = _ref.contentFilter,
          filters = _objectWithoutPropertiesLoose(_ref, ["query", "page", "perPage", "orderBy", "collectionIds", "lang", "contentFilter"]);

      return {
        pathname: _getPathname(),
        query: compactDefined(_extends({
          query: query,
          content_filter: contentFilter,
          lang: lang,
          order_by: orderBy
        }, getFeedParams({
          page: page,
          perPage: perPage
        }), getCollections(collectionIds), filters))
      };
    }),
    handleResponse: castResponse()
  });
}();
var getCollections$1 = /*#__PURE__*/function () {
  var _getPathname2 = function getPathname() {
    return SEARCH_PATH_PREFIX + "/collections";
  };

  return makeEndpoint({
    // Wrapper uses type trick to allow 0 args
    getPathname: function getPathname(_params) {
      return _getPathname2();
    },
    handleRequest: createRequestHandler(function (_ref2) {
      var query = _ref2.query,
          paginationParams = _objectWithoutPropertiesLoose(_ref2, ["query"]);

      return {
        pathname: _getPathname2(),
        query: _extends({
          query: query
        }, getFeedParams(paginationParams))
      };
    }),
    handleResponse: castResponse()
  });
}();
var getUsers = /*#__PURE__*/function () {
  var _getPathname3 = function getPathname() {
    return SEARCH_PATH_PREFIX + "/users";
  };

  return makeEndpoint({
    // Wrapper uses type trick to allow 0 args
    getPathname: function getPathname(_params) {
      return _getPathname3();
    },
    handleRequest: createRequestHandler(function (_ref3) {
      var query = _ref3.query,
          paginationParams = _objectWithoutPropertiesLoose(_ref3, ["query"]);

      return {
        pathname: _getPathname3(),
        query: _extends({
          query: query
        }, getFeedParams(paginationParams))
      };
    }),
    handleResponse: castResponse()
  });
}();

var index$2 = {
  __proto__: null,
  getPhotos: getPhotos$1,
  getCollections: getCollections$1,
  getUsers: getUsers
};

var USERS_PATH_PREFIX = '/users';
var get$2 = /*#__PURE__*/function () {
  var getPathname = function getPathname(_ref) {
    var username = _ref.username;
    return USERS_PATH_PREFIX + "/" + username;
  };

  return makeEndpoint({
    getPathname: getPathname,
    handleRequest: createRequestHandler(function (_ref2) {
      var username = _ref2.username;
      return {
        pathname: getPathname({
          username: username
        }),
        query: {}
      };
    }),
    handleResponse: castResponse()
  });
}();
var getPhotos$2 = /*#__PURE__*/function () {
  var getPathname = function getPathname(_ref3) {
    var username = _ref3.username;
    return USERS_PATH_PREFIX + "/" + username + "/photos";
  };

  return makeEndpoint({
    getPathname: getPathname,
    handleRequest: createRequestHandler(function (_ref4) {
      var username = _ref4.username,
          stats = _ref4.stats,
          orientation = _ref4.orientation,
          paginationParams = _objectWithoutPropertiesLoose(_ref4, ["username", "stats", "orientation"]);

      return {
        pathname: getPathname({
          username: username
        }),
        query: compactDefined(_extends({}, getFeedParams(paginationParams), {
          orientation: orientation,
          stats: stats
        }))
      };
    }),
    handleResponse: handleFeedResponse()
  });
}();
var getLikes = /*#__PURE__*/function () {
  var getPathname = function getPathname(_ref5) {
    var username = _ref5.username;
    return USERS_PATH_PREFIX + "/" + username + "/likes";
  };

  return makeEndpoint({
    getPathname: getPathname,
    handleRequest: createRequestHandler(function (_ref6) {
      var username = _ref6.username,
          orientation = _ref6.orientation,
          paginationParams = _objectWithoutPropertiesLoose(_ref6, ["username", "orientation"]);

      return {
        pathname: getPathname({
          username: username
        }),
        query: compactDefined(_extends({}, getFeedParams(paginationParams), {
          orientation: orientation
        }))
      };
    }),
    handleResponse: handleFeedResponse()
  });
}();
var getCollections$2 = /*#__PURE__*/function () {
  var getPathname = function getPathname(_ref7) {
    var username = _ref7.username;
    return USERS_PATH_PREFIX + "/" + username + "/collections";
  };

  return makeEndpoint({
    getPathname: getPathname,
    handleRequest: createRequestHandler(function (_ref8) {
      var username = _ref8.username,
          paginationParams = _objectWithoutPropertiesLoose(_ref8, ["username"]);

      return {
        pathname: getPathname({
          username: username
        }),
        query: getFeedParams(paginationParams)
      };
    }),
    handleResponse: handleFeedResponse()
  });
}();

var index$3 = {
  __proto__: null,
  get: get$2,
  getPhotos: getPhotos$2,
  getLikes: getLikes,
  getCollections: getCollections$2
};

var BASE_TOPIC_PATH = '/topics';

var getTopicPath = function getTopicPath(_ref) {
  var topicIdOrSlug = _ref.topicIdOrSlug;
  return BASE_TOPIC_PATH + "/" + topicIdOrSlug;
};

var list$2 = /*#__PURE__*/makeEndpoint({
  getPathname: getTopicPath,
  handleRequest: function handleRequest(_ref2) {
    var page = _ref2.page,
        perPage = _ref2.perPage,
        orderBy = _ref2.orderBy,
        topicIdsOrSlugs = _ref2.topicIdsOrSlugs;
    return {
      pathname: BASE_TOPIC_PATH,
      query: compactDefined(_extends({}, getFeedParams({
        page: page,
        perPage: perPage
      }), {
        ids: topicIdsOrSlugs == null ? void 0 : topicIdsOrSlugs.join(','),
        order_by: orderBy
      }))
    };
  },
  handleResponse: /*#__PURE__*/handleFeedResponse()
});
var get$3 = /*#__PURE__*/makeEndpoint({
  getPathname: getTopicPath,
  handleRequest: function handleRequest(_ref3) {
    var topicIdOrSlug = _ref3.topicIdOrSlug;
    return {
      pathname: getTopicPath({
        topicIdOrSlug: topicIdOrSlug
      }),
      query: {}
    };
  },
  handleResponse: /*#__PURE__*/castResponse()
});
var getPhotos$3 = /*#__PURE__*/function () {
  var getPathname = /*#__PURE__*/flow(getTopicPath, function (topicPath) {
    return topicPath + "/photos";
  });
  return makeEndpoint({
    getPathname: getPathname,
    handleRequest: function handleRequest(_ref4) {
      var topicIdOrSlug = _ref4.topicIdOrSlug,
          orientation = _ref4.orientation,
          feedParams = _objectWithoutPropertiesLoose(_ref4, ["topicIdOrSlug", "orientation"]);

      return {
        pathname: getPathname({
          topicIdOrSlug: topicIdOrSlug
        }),
        query: compactDefined(_extends({}, getFeedParams(feedParams), {
          orientation: orientation
        }))
      };
    },
    handleResponse: handleFeedResponse()
  });
}();

var index$4 = {
  __proto__: null,
  list: list$2,
  get: get$3,
  getPhotos: getPhotos$3
};

var trackNonHotLinkedPhotoView = function trackNonHotLinkedPhotoView(_ref) {
  var appId = _ref.appId;
  return function (_ref2) {
    var photoId = _ref2.photoId;
    var ids = !Array.isArray(photoId) ? [photoId] : photoId;

    if (ids.length > 20) {
      throw new Error('You cannot track more than 20 photos at once. Please try again with fewer photos.');
    }

    return fetch("views.unsplash.com/v?photo_id=" + ids.join() + "&app_id=" + appId);
  };
};



var internals = {
  __proto__: null,
  collections: index,
  photos: index$1,
  search: index$2,
  users: index$3,
  topics: index$4,
  trackNonHotLinkedPhotoView: trackNonHotLinkedPhotoView
};

var Language;

(function (Language) {
  Language["Afrikaans"] = "af";
  Language["Amharic"] = "am";
  Language["Arabic"] = "ar";
  Language["Azerbaijani"] = "az";
  Language["Belarusian"] = "be";
  Language["Bulgarian"] = "bg";
  Language["Bengali"] = "bn";
  Language["Bosnian"] = "bs";
  Language["Catalan"] = "ca";
  Language["Cebuano"] = "ceb";
  Language["Corsican"] = "co";
  Language["Czech"] = "cs";
  Language["Welsh"] = "cy";
  Language["Danish"] = "da";
  Language["German"] = "de";
  Language["Greek"] = "el";
  Language["English"] = "en";
  Language["Esperanto"] = "eo";
  Language["Spanish"] = "es";
  Language["Estonian"] = "et";
  Language["Basque"] = "eu";
  Language["Persian"] = "fa";
  Language["Finnish"] = "fi";
  Language["French"] = "fr";
  Language["Frisian"] = "fy";
  Language["Irish"] = "ga";
  Language["ScotsGaelic"] = "gd";
  Language["Galician"] = "gl";
  Language["Gujarati"] = "gu";
  Language["Hausa"] = "ha";
  Language["Hawaiian"] = "haw";
  Language["Hindi"] = "hi";
  Language["Hmong"] = "hmn";
  Language["Croatian"] = "hr";
  Language["HaitianCreole"] = "ht";
  Language["Hungarian"] = "hu";
  Language["Armenian"] = "hy";
  Language["Indonesian"] = "id";
  Language["Igbo"] = "ig";
  Language["Icelandic"] = "is";
  Language["Italian"] = "it";
  Language["Hebrew"] = "iw";
  Language["Japanese"] = "ja";
  Language["Javanese"] = "jw";
  Language["Georgian"] = "ka";
  Language["Kazakh"] = "kk";
  Language["Khmer"] = "km";
  Language["Kannada"] = "kn";
  Language["Korean"] = "ko";
  Language["Kurdish"] = "ku";
  Language["Kyrgyz"] = "ky";
  Language["Latin"] = "la";
  Language["Luxembourgish"] = "lb";
  Language["Lao"] = "lo";
  Language["Lithuanian"] = "lt";
  Language["Latvian"] = "lv";
  Language["Malagasy"] = "mg";
  Language["Maori"] = "mi";
  Language["Macedonian"] = "mk";
  Language["Malayalam"] = "ml";
  Language["Mongolian"] = "mn";
  Language["Marathi"] = "mr";
  Language["Malay"] = "ms";
  Language["Maltese"] = "mt";
  Language["Myanmar"] = "my";
  Language["Nepali"] = "ne";
  Language["Dutch"] = "nl";
  Language["Norwegian"] = "no";
  Language["Nyanja"] = "ny";
  Language["Oriya"] = "or";
  Language["Punjabi"] = "pa";
  Language["Polish"] = "pl";
  Language["Pashto"] = "ps";
  Language["Portuguese"] = "pt";
  Language["Romanian"] = "ro";
  Language["Russian"] = "ru";
  Language["Kinyarwanda"] = "rw";
  Language["Sindhi"] = "sd";
  Language["Sinhala"] = "si";
  Language["Slovak"] = "sk";
  Language["Slovenian"] = "sl";
  Language["Samoan"] = "sm";
  Language["Shona"] = "sn";
  Language["Somali"] = "so";
  Language["Albanian"] = "sq";
  Language["Serbian"] = "sr";
  Language["Sesotho"] = "st";
  Language["Sundanese"] = "su";
  Language["Swedish"] = "sv";
  Language["Swahili"] = "sw";
  Language["Tamil"] = "ta";
  Language["Telugu"] = "te";
  Language["Tajik"] = "tg";
  Language["Thai"] = "th";
  Language["Turkmen"] = "tk";
  Language["Filipino"] = "tl";
  Language["Turkish"] = "tr";
  Language["Tatar"] = "tt";
  Language["Uighur"] = "ug";
  Language["Ukrainian"] = "uk";
  Language["Urdu"] = "ur";
  Language["Uzbek"] = "uz";
  Language["Vietnamese"] = "vi";
  Language["Xhosa"] = "xh";
  Language["Yiddish"] = "yi";
  Language["Yoruba"] = "yo";
  Language["ChineseSimplified"] = "zh";
  Language["ChineseTraditional"] = "zh-TW";
  Language["Zulu"] = "zu";
})(Language || (Language = {}));

var OrderBy;

(function (OrderBy) {
  OrderBy["LATEST"] = "latest";
  OrderBy["POPULAR"] = "popular";
  OrderBy["VIEWS"] = "views";
  OrderBy["DOWNLOADS"] = "downloads";
  OrderBy["OLDEST"] = "oldest";
})(OrderBy || (OrderBy = {}));

var createApi = /*#__PURE__*/flow(initMakeRequest, function (makeRequest) {
  return {
    photos: {
      get: makeRequest(get$1),
      list: makeRequest(list$1),
      getStats: makeRequest(getStats),
      getRandom: makeRequest(getRandom),
      trackDownload: makeRequest(trackDownload)
    },
    users: {
      getPhotos: makeRequest(getPhotos$2),
      getCollections: makeRequest(getCollections$2),
      getLikes: makeRequest(getLikes),
      get: makeRequest(get$2)
    },
    search: {
      getCollections: makeRequest(getCollections$1),
      getPhotos: makeRequest(getPhotos$1),
      getUsers: makeRequest(getUsers)
    },
    collections: {
      getPhotos: makeRequest(getPhotos),
      get: makeRequest(get),
      list: makeRequest(list),
      getRelated: makeRequest(getRelated)
    },
    topics: {
      list: makeRequest(list$2),
      get: makeRequest(get$3),
      getPhotos: makeRequest(getPhotos$3)
    }
  };
});


//# sourceMappingURL=unsplash-js.esm.js.map


/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "NIL", ({
  enumerable: true,
  get: function get() {
    return _nil.default;
  }
}));
Object.defineProperty(exports, "parse", ({
  enumerable: true,
  get: function get() {
    return _parse.default;
  }
}));
Object.defineProperty(exports, "stringify", ({
  enumerable: true,
  get: function get() {
    return _stringify.default;
  }
}));
Object.defineProperty(exports, "v1", ({
  enumerable: true,
  get: function get() {
    return _v.default;
  }
}));
Object.defineProperty(exports, "v3", ({
  enumerable: true,
  get: function get() {
    return _v2.default;
  }
}));
Object.defineProperty(exports, "v4", ({
  enumerable: true,
  get: function get() {
    return _v3.default;
  }
}));
Object.defineProperty(exports, "v5", ({
  enumerable: true,
  get: function get() {
    return _v4.default;
  }
}));
Object.defineProperty(exports, "validate", ({
  enumerable: true,
  get: function get() {
    return _validate.default;
  }
}));
Object.defineProperty(exports, "version", ({
  enumerable: true,
  get: function get() {
    return _version.default;
  }
}));

var _v = _interopRequireDefault(__webpack_require__(/*! ./v1.js */ "./node_modules/uuid/dist/commonjs-browser/v1.js"));

var _v2 = _interopRequireDefault(__webpack_require__(/*! ./v3.js */ "./node_modules/uuid/dist/commonjs-browser/v3.js"));

var _v3 = _interopRequireDefault(__webpack_require__(/*! ./v4.js */ "./node_modules/uuid/dist/commonjs-browser/v4.js"));

var _v4 = _interopRequireDefault(__webpack_require__(/*! ./v5.js */ "./node_modules/uuid/dist/commonjs-browser/v5.js"));

var _nil = _interopRequireDefault(__webpack_require__(/*! ./nil.js */ "./node_modules/uuid/dist/commonjs-browser/nil.js"));

var _version = _interopRequireDefault(__webpack_require__(/*! ./version.js */ "./node_modules/uuid/dist/commonjs-browser/version.js"));

var _validate = _interopRequireDefault(__webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/commonjs-browser/validate.js"));

var _stringify = _interopRequireDefault(__webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/commonjs-browser/stringify.js"));

var _parse = _interopRequireDefault(__webpack_require__(/*! ./parse.js */ "./node_modules/uuid/dist/commonjs-browser/parse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/md5.js":
/*!********************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/md5.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);

    for (let i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }

  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */


function md5ToHexEncodedArray(input) {
  const output = [];
  const length32 = input.length * 32;
  const hexTab = '0123456789abcdef';

  for (let i = 0; i < length32; i += 8) {
    const x = input[i >> 5] >>> i % 32 & 0xff;
    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }

  return output;
}
/**
 * Calculate output length with padding and bit length
 */


function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */


function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  let a = 1732584193;
  let b = -271733879;
  let c = -1732584194;
  let d = 271733878;

  for (let i = 0; i < x.length; i += 16) {
    const olda = a;
    const oldb = b;
    const oldc = c;
    const oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }

  return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */


function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }

  const length8 = input.length * 8;
  const output = new Uint32Array(getOutputLength(length8));

  for (let i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }

  return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */


function safeAdd(x, y) {
  const lsw = (x & 0xffff) + (y & 0xffff);
  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */


function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */


function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}

function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}

var _default = md5;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/native.js":
/*!***********************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/native.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var _default = {
  randomUUID
};
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/nil.js":
/*!********************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/nil.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = '00000000-0000-0000-0000-000000000000';
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/parse.js":
/*!**********************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/parse.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/commonjs-browser/validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  let v;
  const arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

var _default = parse;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/regex.js":
/*!**********************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/regex.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/rng.js":
/*!********************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/rng.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = rng;
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
let getRandomValues;
const rnds8 = new Uint8Array(16);

function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/sha1.js":
/*!*********************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/sha1.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;

    case 1:
      return x ^ y ^ z;

    case 2:
      return x & y ^ x & z ^ y & z;

    case 3:
      return x ^ y ^ z;
  }
}

function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}

function sha1(bytes) {
  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

  if (typeof bytes === 'string') {
    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];

    for (let i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
  }

  bytes.push(0x80);
  const l = bytes.length / 4 + 2;
  const N = Math.ceil(l / 16);
  const M = new Array(N);

  for (let i = 0; i < N; ++i) {
    const arr = new Uint32Array(16);

    for (let j = 0; j < 16; ++j) {
      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
    }

    M[i] = arr;
  }

  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

  for (let i = 0; i < N; ++i) {
    const W = new Uint32Array(80);

    for (let t = 0; t < 16; ++t) {
      W[t] = M[i][t];
    }

    for (let t = 16; t < 80; ++t) {
      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
    }

    let a = H[0];
    let b = H[1];
    let c = H[2];
    let d = H[3];
    let e = H[4];

    for (let t = 0; t < 80; ++t) {
      const s = Math.floor(t / 20);
      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }

    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }

  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}

var _default = sha1;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/stringify.js":
/*!**************************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/stringify.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
exports.unsafeStringify = unsafeStringify;

var _validate = _interopRequireDefault(__webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/commonjs-browser/validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).slice(1));
}

function unsafeStringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

function stringify(arr, offset = 0) {
  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

var _default = stringify;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/v1.js":
/*!*******************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/v1.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _rng = _interopRequireDefault(__webpack_require__(/*! ./rng.js */ "./node_modules/uuid/dist/commonjs-browser/rng.js"));

var _stringify = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/commonjs-browser/stringify.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
let _nodeId;

let _clockseq; // Previous uuid creation time


let _lastMSecs = 0;
let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || _rng.default)();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || (0, _stringify.unsafeStringify)(b);
}

var _default = v1;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/v3.js":
/*!*******************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/v3.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _v = _interopRequireDefault(__webpack_require__(/*! ./v35.js */ "./node_modules/uuid/dist/commonjs-browser/v35.js"));

var _md = _interopRequireDefault(__webpack_require__(/*! ./md5.js */ "./node_modules/uuid/dist/commonjs-browser/md5.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v3 = (0, _v.default)('v3', 0x30, _md.default);
var _default = v3;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/v35.js":
/*!********************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/v35.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.URL = exports.DNS = void 0;
exports["default"] = v35;

var _stringify = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/commonjs-browser/stringify.js");

var _parse = _interopRequireDefault(__webpack_require__(/*! ./parse.js */ "./node_modules/uuid/dist/commonjs-browser/parse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  const bytes = [];

  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
exports.DNS = DNS;
const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
exports.URL = URL;

function v35(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    var _namespace;

    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = (0, _parse.default)(namespace);
    }

    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return (0, _stringify.unsafeStringify)(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/v4.js":
/*!*******************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/v4.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _native = _interopRequireDefault(__webpack_require__(/*! ./native.js */ "./node_modules/uuid/dist/commonjs-browser/native.js"));

var _rng = _interopRequireDefault(__webpack_require__(/*! ./rng.js */ "./node_modules/uuid/dist/commonjs-browser/rng.js"));

var _stringify = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/commonjs-browser/stringify.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function v4(options, buf, offset) {
  if (_native.default.randomUUID && !buf && !options) {
    return _native.default.randomUUID();
  }

  options = options || {};

  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0, _stringify.unsafeStringify)(rnds);
}

var _default = v4;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/v5.js":
/*!*******************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/v5.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _v = _interopRequireDefault(__webpack_require__(/*! ./v35.js */ "./node_modules/uuid/dist/commonjs-browser/v35.js"));

var _sha = _interopRequireDefault(__webpack_require__(/*! ./sha1.js */ "./node_modules/uuid/dist/commonjs-browser/sha1.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v5 = (0, _v.default)('v5', 0x50, _sha.default);
var _default = v5;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/validate.js":
/*!*************************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/validate.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _regex = _interopRequireDefault(__webpack_require__(/*! ./regex.js */ "./node_modules/uuid/dist/commonjs-browser/regex.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validate(uuid) {
  return typeof uuid === 'string' && _regex.default.test(uuid);
}

var _default = validate;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/version.js":
/*!************************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/version.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/commonjs-browser/validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function version(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.slice(14, 15), 16);
}

var _default = version;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/native.js":
/*!******************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/native.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  randomUUID
});

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/regex.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/regex.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/rng.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/rng.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ rng)
/* harmony export */ });
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
let getRandomValues;
const rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/stringify.js":
/*!*********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/stringify.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "unsafeStringify": () => (/* binding */ unsafeStringify)
/* harmony export */ });
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/esm-browser/validate.js");

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).slice(1));
}

function unsafeStringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

function stringify(arr, offset = 0) {
  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stringify);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v4.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v4.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _native_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./native.js */ "./node_modules/uuid/dist/esm-browser/native.js");
/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rng.js */ "./node_modules/uuid/dist/esm-browser/rng.js");
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/esm-browser/stringify.js");




function v4(options, buf, offset) {
  if (_native_js__WEBPACK_IMPORTED_MODULE_0__["default"].randomUUID && !buf && !options) {
    return _native_js__WEBPACK_IMPORTED_MODULE_0__["default"].randomUUID();
  }

  options = options || {};
  const rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_1__["default"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_2__.unsafeStringify)(rnds);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v4);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/validate.js":
/*!********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/validate.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ "./node_modules/uuid/dist/esm-browser/regex.js");


function validate(uuid) {
  return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__["default"].test(uuid);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validate);

/***/ }),

/***/ "./node_modules/webextension-polyfill/dist/browser-polyfill.js":
/*!*********************************************************************!*\
  !*** ./node_modules/webextension-polyfill/dist/browser-polyfill.js ***!
  \*********************************************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else { var mod; }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (module) {
  /* webextension-polyfill - v0.10.0 - Fri Aug 12 2022 19:42:44 */

  /* -*- Mode: indent-tabs-mode: nil; js-indent-level: 2 -*- */

  /* vim: set sts=2 sw=2 et tw=80: */

  /* This Source Code Form is subject to the terms of the Mozilla Public
   * License, v. 2.0. If a copy of the MPL was not distributed with this
   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
  "use strict";

  if (!globalThis.chrome?.runtime?.id) {
    throw new Error("This script should only be loaded in a browser extension.");
  }

  if (typeof globalThis.browser === "undefined" || Object.getPrototypeOf(globalThis.browser) !== Object.prototype) {
    const CHROME_SEND_MESSAGE_CALLBACK_NO_RESPONSE_MESSAGE = "The message port closed before a response was received."; // Wrapping the bulk of this polyfill in a one-time-use function is a minor
    // optimization for Firefox. Since Spidermonkey does not fully parse the
    // contents of a function until the first time it's called, and since it will
    // never actually need to be called, this allows the polyfill to be included
    // in Firefox nearly for free.

    const wrapAPIs = extensionAPIs => {
      // NOTE: apiMetadata is associated to the content of the api-metadata.json file
      // at build time by replacing the following "include" with the content of the
      // JSON file.
      const apiMetadata = {
        "alarms": {
          "clear": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "clearAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "get": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "getAll": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "bookmarks": {
          "create": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "get": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getChildren": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getRecent": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getSubTree": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getTree": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "move": {
            "minArgs": 2,
            "maxArgs": 2
          },
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeTree": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "search": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "update": {
            "minArgs": 2,
            "maxArgs": 2
          }
        },
        "browserAction": {
          "disable": {
            "minArgs": 0,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "enable": {
            "minArgs": 0,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "getBadgeBackgroundColor": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getBadgeText": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getPopup": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getTitle": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "openPopup": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "setBadgeBackgroundColor": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "setBadgeText": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "setIcon": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "setPopup": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "setTitle": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          }
        },
        "browsingData": {
          "remove": {
            "minArgs": 2,
            "maxArgs": 2
          },
          "removeCache": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeCookies": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeDownloads": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeFormData": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeHistory": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeLocalStorage": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removePasswords": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removePluginData": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "settings": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "commands": {
          "getAll": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "contextMenus": {
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "update": {
            "minArgs": 2,
            "maxArgs": 2
          }
        },
        "cookies": {
          "get": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getAll": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getAllCookieStores": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "set": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "devtools": {
          "inspectedWindow": {
            "eval": {
              "minArgs": 1,
              "maxArgs": 2,
              "singleCallbackArg": false
            }
          },
          "panels": {
            "create": {
              "minArgs": 3,
              "maxArgs": 3,
              "singleCallbackArg": true
            },
            "elements": {
              "createSidebarPane": {
                "minArgs": 1,
                "maxArgs": 1
              }
            }
          }
        },
        "downloads": {
          "cancel": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "download": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "erase": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getFileIcon": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "open": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "pause": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeFile": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "resume": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "search": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "show": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          }
        },
        "extension": {
          "isAllowedFileSchemeAccess": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "isAllowedIncognitoAccess": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "history": {
          "addUrl": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "deleteAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "deleteRange": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "deleteUrl": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getVisits": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "search": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "i18n": {
          "detectLanguage": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getAcceptLanguages": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "identity": {
          "launchWebAuthFlow": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "idle": {
          "queryState": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "management": {
          "get": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "getSelf": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "setEnabled": {
            "minArgs": 2,
            "maxArgs": 2
          },
          "uninstallSelf": {
            "minArgs": 0,
            "maxArgs": 1
          }
        },
        "notifications": {
          "clear": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "create": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "getAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "getPermissionLevel": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "update": {
            "minArgs": 2,
            "maxArgs": 2
          }
        },
        "pageAction": {
          "getPopup": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getTitle": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "hide": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "setIcon": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "setPopup": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "setTitle": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "show": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          }
        },
        "permissions": {
          "contains": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "request": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "runtime": {
          "getBackgroundPage": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "getPlatformInfo": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "openOptionsPage": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "requestUpdateCheck": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "sendMessage": {
            "minArgs": 1,
            "maxArgs": 3
          },
          "sendNativeMessage": {
            "minArgs": 2,
            "maxArgs": 2
          },
          "setUninstallURL": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "sessions": {
          "getDevices": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "getRecentlyClosed": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "restore": {
            "minArgs": 0,
            "maxArgs": 1
          }
        },
        "storage": {
          "local": {
            "clear": {
              "minArgs": 0,
              "maxArgs": 0
            },
            "get": {
              "minArgs": 0,
              "maxArgs": 1
            },
            "getBytesInUse": {
              "minArgs": 0,
              "maxArgs": 1
            },
            "remove": {
              "minArgs": 1,
              "maxArgs": 1
            },
            "set": {
              "minArgs": 1,
              "maxArgs": 1
            }
          },
          "managed": {
            "get": {
              "minArgs": 0,
              "maxArgs": 1
            },
            "getBytesInUse": {
              "minArgs": 0,
              "maxArgs": 1
            }
          },
          "sync": {
            "clear": {
              "minArgs": 0,
              "maxArgs": 0
            },
            "get": {
              "minArgs": 0,
              "maxArgs": 1
            },
            "getBytesInUse": {
              "minArgs": 0,
              "maxArgs": 1
            },
            "remove": {
              "minArgs": 1,
              "maxArgs": 1
            },
            "set": {
              "minArgs": 1,
              "maxArgs": 1
            }
          }
        },
        "tabs": {
          "captureVisibleTab": {
            "minArgs": 0,
            "maxArgs": 2
          },
          "create": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "detectLanguage": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "discard": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "duplicate": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "executeScript": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "get": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getCurrent": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "getZoom": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "getZoomSettings": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "goBack": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "goForward": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "highlight": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "insertCSS": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "move": {
            "minArgs": 2,
            "maxArgs": 2
          },
          "query": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "reload": {
            "minArgs": 0,
            "maxArgs": 2
          },
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeCSS": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "sendMessage": {
            "minArgs": 2,
            "maxArgs": 3
          },
          "setZoom": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "setZoomSettings": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "update": {
            "minArgs": 1,
            "maxArgs": 2
          }
        },
        "topSites": {
          "get": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "webNavigation": {
          "getAllFrames": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getFrame": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "webRequest": {
          "handlerBehaviorChanged": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "windows": {
          "create": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "get": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "getAll": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "getCurrent": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "getLastFocused": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "update": {
            "minArgs": 2,
            "maxArgs": 2
          }
        }
      };

      if (Object.keys(apiMetadata).length === 0) {
        throw new Error("api-metadata.json has not been included in browser-polyfill");
      }
      /**
       * A WeakMap subclass which creates and stores a value for any key which does
       * not exist when accessed, but behaves exactly as an ordinary WeakMap
       * otherwise.
       *
       * @param {function} createItem
       *        A function which will be called in order to create the value for any
       *        key which does not exist, the first time it is accessed. The
       *        function receives, as its only argument, the key being created.
       */


      class DefaultWeakMap extends WeakMap {
        constructor(createItem, items = undefined) {
          super(items);
          this.createItem = createItem;
        }

        get(key) {
          if (!this.has(key)) {
            this.set(key, this.createItem(key));
          }

          return super.get(key);
        }

      }
      /**
       * Returns true if the given object is an object with a `then` method, and can
       * therefore be assumed to behave as a Promise.
       *
       * @param {*} value The value to test.
       * @returns {boolean} True if the value is thenable.
       */


      const isThenable = value => {
        return value && typeof value === "object" && typeof value.then === "function";
      };
      /**
       * Creates and returns a function which, when called, will resolve or reject
       * the given promise based on how it is called:
       *
       * - If, when called, `chrome.runtime.lastError` contains a non-null object,
       *   the promise is rejected with that value.
       * - If the function is called with exactly one argument, the promise is
       *   resolved to that value.
       * - Otherwise, the promise is resolved to an array containing all of the
       *   function's arguments.
       *
       * @param {object} promise
       *        An object containing the resolution and rejection functions of a
       *        promise.
       * @param {function} promise.resolve
       *        The promise's resolution function.
       * @param {function} promise.reject
       *        The promise's rejection function.
       * @param {object} metadata
       *        Metadata about the wrapped method which has created the callback.
       * @param {boolean} metadata.singleCallbackArg
       *        Whether or not the promise is resolved with only the first
       *        argument of the callback, alternatively an array of all the
       *        callback arguments is resolved. By default, if the callback
       *        function is invoked with only a single argument, that will be
       *        resolved to the promise, while all arguments will be resolved as
       *        an array if multiple are given.
       *
       * @returns {function}
       *        The generated callback function.
       */


      const makeCallback = (promise, metadata) => {
        return (...callbackArgs) => {
          if (extensionAPIs.runtime.lastError) {
            promise.reject(new Error(extensionAPIs.runtime.lastError.message));
          } else if (metadata.singleCallbackArg || callbackArgs.length <= 1 && metadata.singleCallbackArg !== false) {
            promise.resolve(callbackArgs[0]);
          } else {
            promise.resolve(callbackArgs);
          }
        };
      };

      const pluralizeArguments = numArgs => numArgs == 1 ? "argument" : "arguments";
      /**
       * Creates a wrapper function for a method with the given name and metadata.
       *
       * @param {string} name
       *        The name of the method which is being wrapped.
       * @param {object} metadata
       *        Metadata about the method being wrapped.
       * @param {integer} metadata.minArgs
       *        The minimum number of arguments which must be passed to the
       *        function. If called with fewer than this number of arguments, the
       *        wrapper will raise an exception.
       * @param {integer} metadata.maxArgs
       *        The maximum number of arguments which may be passed to the
       *        function. If called with more than this number of arguments, the
       *        wrapper will raise an exception.
       * @param {boolean} metadata.singleCallbackArg
       *        Whether or not the promise is resolved with only the first
       *        argument of the callback, alternatively an array of all the
       *        callback arguments is resolved. By default, if the callback
       *        function is invoked with only a single argument, that will be
       *        resolved to the promise, while all arguments will be resolved as
       *        an array if multiple are given.
       *
       * @returns {function(object, ...*)}
       *       The generated wrapper function.
       */


      const wrapAsyncFunction = (name, metadata) => {
        return function asyncFunctionWrapper(target, ...args) {
          if (args.length < metadata.minArgs) {
            throw new Error(`Expected at least ${metadata.minArgs} ${pluralizeArguments(metadata.minArgs)} for ${name}(), got ${args.length}`);
          }

          if (args.length > metadata.maxArgs) {
            throw new Error(`Expected at most ${metadata.maxArgs} ${pluralizeArguments(metadata.maxArgs)} for ${name}(), got ${args.length}`);
          }

          return new Promise((resolve, reject) => {
            if (metadata.fallbackToNoCallback) {
              // This API method has currently no callback on Chrome, but it return a promise on Firefox,
              // and so the polyfill will try to call it with a callback first, and it will fallback
              // to not passing the callback if the first call fails.
              try {
                target[name](...args, makeCallback({
                  resolve,
                  reject
                }, metadata));
              } catch (cbError) {
                console.warn(`${name} API method doesn't seem to support the callback parameter, ` + "falling back to call it without a callback: ", cbError);
                target[name](...args); // Update the API method metadata, so that the next API calls will not try to
                // use the unsupported callback anymore.

                metadata.fallbackToNoCallback = false;
                metadata.noCallback = true;
                resolve();
              }
            } else if (metadata.noCallback) {
              target[name](...args);
              resolve();
            } else {
              target[name](...args, makeCallback({
                resolve,
                reject
              }, metadata));
            }
          });
        };
      };
      /**
       * Wraps an existing method of the target object, so that calls to it are
       * intercepted by the given wrapper function. The wrapper function receives,
       * as its first argument, the original `target` object, followed by each of
       * the arguments passed to the original method.
       *
       * @param {object} target
       *        The original target object that the wrapped method belongs to.
       * @param {function} method
       *        The method being wrapped. This is used as the target of the Proxy
       *        object which is created to wrap the method.
       * @param {function} wrapper
       *        The wrapper function which is called in place of a direct invocation
       *        of the wrapped method.
       *
       * @returns {Proxy<function>}
       *        A Proxy object for the given method, which invokes the given wrapper
       *        method in its place.
       */


      const wrapMethod = (target, method, wrapper) => {
        return new Proxy(method, {
          apply(targetMethod, thisObj, args) {
            return wrapper.call(thisObj, target, ...args);
          }

        });
      };

      let hasOwnProperty = Function.call.bind(Object.prototype.hasOwnProperty);
      /**
       * Wraps an object in a Proxy which intercepts and wraps certain methods
       * based on the given `wrappers` and `metadata` objects.
       *
       * @param {object} target
       *        The target object to wrap.
       *
       * @param {object} [wrappers = {}]
       *        An object tree containing wrapper functions for special cases. Any
       *        function present in this object tree is called in place of the
       *        method in the same location in the `target` object tree. These
       *        wrapper methods are invoked as described in {@see wrapMethod}.
       *
       * @param {object} [metadata = {}]
       *        An object tree containing metadata used to automatically generate
       *        Promise-based wrapper functions for asynchronous. Any function in
       *        the `target` object tree which has a corresponding metadata object
       *        in the same location in the `metadata` tree is replaced with an
       *        automatically-generated wrapper function, as described in
       *        {@see wrapAsyncFunction}
       *
       * @returns {Proxy<object>}
       */

      const wrapObject = (target, wrappers = {}, metadata = {}) => {
        let cache = Object.create(null);
        let handlers = {
          has(proxyTarget, prop) {
            return prop in target || prop in cache;
          },

          get(proxyTarget, prop, receiver) {
            if (prop in cache) {
              return cache[prop];
            }

            if (!(prop in target)) {
              return undefined;
            }

            let value = target[prop];

            if (typeof value === "function") {
              // This is a method on the underlying object. Check if we need to do
              // any wrapping.
              if (typeof wrappers[prop] === "function") {
                // We have a special-case wrapper for this method.
                value = wrapMethod(target, target[prop], wrappers[prop]);
              } else if (hasOwnProperty(metadata, prop)) {
                // This is an async method that we have metadata for. Create a
                // Promise wrapper for it.
                let wrapper = wrapAsyncFunction(prop, metadata[prop]);
                value = wrapMethod(target, target[prop], wrapper);
              } else {
                // This is a method that we don't know or care about. Return the
                // original method, bound to the underlying object.
                value = value.bind(target);
              }
            } else if (typeof value === "object" && value !== null && (hasOwnProperty(wrappers, prop) || hasOwnProperty(metadata, prop))) {
              // This is an object that we need to do some wrapping for the children
              // of. Create a sub-object wrapper for it with the appropriate child
              // metadata.
              value = wrapObject(value, wrappers[prop], metadata[prop]);
            } else if (hasOwnProperty(metadata, "*")) {
              // Wrap all properties in * namespace.
              value = wrapObject(value, wrappers[prop], metadata["*"]);
            } else {
              // We don't need to do any wrapping for this property,
              // so just forward all access to the underlying object.
              Object.defineProperty(cache, prop, {
                configurable: true,
                enumerable: true,

                get() {
                  return target[prop];
                },

                set(value) {
                  target[prop] = value;
                }

              });
              return value;
            }

            cache[prop] = value;
            return value;
          },

          set(proxyTarget, prop, value, receiver) {
            if (prop in cache) {
              cache[prop] = value;
            } else {
              target[prop] = value;
            }

            return true;
          },

          defineProperty(proxyTarget, prop, desc) {
            return Reflect.defineProperty(cache, prop, desc);
          },

          deleteProperty(proxyTarget, prop) {
            return Reflect.deleteProperty(cache, prop);
          }

        }; // Per contract of the Proxy API, the "get" proxy handler must return the
        // original value of the target if that value is declared read-only and
        // non-configurable. For this reason, we create an object with the
        // prototype set to `target` instead of using `target` directly.
        // Otherwise we cannot return a custom object for APIs that
        // are declared read-only and non-configurable, such as `chrome.devtools`.
        //
        // The proxy handlers themselves will still use the original `target`
        // instead of the `proxyTarget`, so that the methods and properties are
        // dereferenced via the original targets.

        let proxyTarget = Object.create(target);
        return new Proxy(proxyTarget, handlers);
      };
      /**
       * Creates a set of wrapper functions for an event object, which handles
       * wrapping of listener functions that those messages are passed.
       *
       * A single wrapper is created for each listener function, and stored in a
       * map. Subsequent calls to `addListener`, `hasListener`, or `removeListener`
       * retrieve the original wrapper, so that  attempts to remove a
       * previously-added listener work as expected.
       *
       * @param {DefaultWeakMap<function, function>} wrapperMap
       *        A DefaultWeakMap object which will create the appropriate wrapper
       *        for a given listener function when one does not exist, and retrieve
       *        an existing one when it does.
       *
       * @returns {object}
       */


      const wrapEvent = wrapperMap => ({
        addListener(target, listener, ...args) {
          target.addListener(wrapperMap.get(listener), ...args);
        },

        hasListener(target, listener) {
          return target.hasListener(wrapperMap.get(listener));
        },

        removeListener(target, listener) {
          target.removeListener(wrapperMap.get(listener));
        }

      });

      const onRequestFinishedWrappers = new DefaultWeakMap(listener => {
        if (typeof listener !== "function") {
          return listener;
        }
        /**
         * Wraps an onRequestFinished listener function so that it will return a
         * `getContent()` property which returns a `Promise` rather than using a
         * callback API.
         *
         * @param {object} req
         *        The HAR entry object representing the network request.
         */


        return function onRequestFinished(req) {
          const wrappedReq = wrapObject(req, {}
          /* wrappers */
          , {
            getContent: {
              minArgs: 0,
              maxArgs: 0
            }
          });
          listener(wrappedReq);
        };
      });
      const onMessageWrappers = new DefaultWeakMap(listener => {
        if (typeof listener !== "function") {
          return listener;
        }
        /**
         * Wraps a message listener function so that it may send responses based on
         * its return value, rather than by returning a sentinel value and calling a
         * callback. If the listener function returns a Promise, the response is
         * sent when the promise either resolves or rejects.
         *
         * @param {*} message
         *        The message sent by the other end of the channel.
         * @param {object} sender
         *        Details about the sender of the message.
         * @param {function(*)} sendResponse
         *        A callback which, when called with an arbitrary argument, sends
         *        that value as a response.
         * @returns {boolean}
         *        True if the wrapped listener returned a Promise, which will later
         *        yield a response. False otherwise.
         */


        return function onMessage(message, sender, sendResponse) {
          let didCallSendResponse = false;
          let wrappedSendResponse;
          let sendResponsePromise = new Promise(resolve => {
            wrappedSendResponse = function (response) {
              didCallSendResponse = true;
              resolve(response);
            };
          });
          let result;

          try {
            result = listener(message, sender, wrappedSendResponse);
          } catch (err) {
            result = Promise.reject(err);
          }

          const isResultThenable = result !== true && isThenable(result); // If the listener didn't returned true or a Promise, or called
          // wrappedSendResponse synchronously, we can exit earlier
          // because there will be no response sent from this listener.

          if (result !== true && !isResultThenable && !didCallSendResponse) {
            return false;
          } // A small helper to send the message if the promise resolves
          // and an error if the promise rejects (a wrapped sendMessage has
          // to translate the message into a resolved promise or a rejected
          // promise).


          const sendPromisedResult = promise => {
            promise.then(msg => {
              // send the message value.
              sendResponse(msg);
            }, error => {
              // Send a JSON representation of the error if the rejected value
              // is an instance of error, or the object itself otherwise.
              let message;

              if (error && (error instanceof Error || typeof error.message === "string")) {
                message = error.message;
              } else {
                message = "An unexpected error occurred";
              }

              sendResponse({
                __mozWebExtensionPolyfillReject__: true,
                message
              });
            }).catch(err => {
              // Print an error on the console if unable to send the response.
              console.error("Failed to send onMessage rejected reply", err);
            });
          }; // If the listener returned a Promise, send the resolved value as a
          // result, otherwise wait the promise related to the wrappedSendResponse
          // callback to resolve and send it as a response.


          if (isResultThenable) {
            sendPromisedResult(result);
          } else {
            sendPromisedResult(sendResponsePromise);
          } // Let Chrome know that the listener is replying.


          return true;
        };
      });

      const wrappedSendMessageCallback = ({
        reject,
        resolve
      }, reply) => {
        if (extensionAPIs.runtime.lastError) {
          // Detect when none of the listeners replied to the sendMessage call and resolve
          // the promise to undefined as in Firefox.
          // See https://github.com/mozilla/webextension-polyfill/issues/130
          if (extensionAPIs.runtime.lastError.message === CHROME_SEND_MESSAGE_CALLBACK_NO_RESPONSE_MESSAGE) {
            resolve();
          } else {
            reject(new Error(extensionAPIs.runtime.lastError.message));
          }
        } else if (reply && reply.__mozWebExtensionPolyfillReject__) {
          // Convert back the JSON representation of the error into
          // an Error instance.
          reject(new Error(reply.message));
        } else {
          resolve(reply);
        }
      };

      const wrappedSendMessage = (name, metadata, apiNamespaceObj, ...args) => {
        if (args.length < metadata.minArgs) {
          throw new Error(`Expected at least ${metadata.minArgs} ${pluralizeArguments(metadata.minArgs)} for ${name}(), got ${args.length}`);
        }

        if (args.length > metadata.maxArgs) {
          throw new Error(`Expected at most ${metadata.maxArgs} ${pluralizeArguments(metadata.maxArgs)} for ${name}(), got ${args.length}`);
        }

        return new Promise((resolve, reject) => {
          const wrappedCb = wrappedSendMessageCallback.bind(null, {
            resolve,
            reject
          });
          args.push(wrappedCb);
          apiNamespaceObj.sendMessage(...args);
        });
      };

      const staticWrappers = {
        devtools: {
          network: {
            onRequestFinished: wrapEvent(onRequestFinishedWrappers)
          }
        },
        runtime: {
          onMessage: wrapEvent(onMessageWrappers),
          onMessageExternal: wrapEvent(onMessageWrappers),
          sendMessage: wrappedSendMessage.bind(null, "sendMessage", {
            minArgs: 1,
            maxArgs: 3
          })
        },
        tabs: {
          sendMessage: wrappedSendMessage.bind(null, "sendMessage", {
            minArgs: 2,
            maxArgs: 3
          })
        }
      };
      const settingMetadata = {
        clear: {
          minArgs: 1,
          maxArgs: 1
        },
        get: {
          minArgs: 1,
          maxArgs: 1
        },
        set: {
          minArgs: 1,
          maxArgs: 1
        }
      };
      apiMetadata.privacy = {
        network: {
          "*": settingMetadata
        },
        services: {
          "*": settingMetadata
        },
        websites: {
          "*": settingMetadata
        }
      };
      return wrapObject(extensionAPIs, staticWrappers, apiMetadata);
    }; // The build process adds a UMD wrapper around this file, which makes the
    // `module` variable available.


    module.exports = wrapAPIs(chrome);
  } else {
    module.exports = globalThis.browser;
  }
});
//# sourceMappingURL=browser-polyfill.js.map


/***/ }),

/***/ "?6483":
/*!****************************!*\
  !*** agent-base (ignored) ***!
  \****************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?0825":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?72ad":
/*!***********************************!*\
  !*** https-proxy-agent (ignored) ***!
  \***********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?a1bf":
/*!*********************!*\
  !*** net (ignored) ***!
  \*********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?14d6":
/*!*********************!*\
  !*** tls (ignored) ***!
  \*********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?e42a":
/*!********************!*\
  !*** ws (ignored) ***!
  \********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?9463":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "./node_modules/tslib/tslib.es6.mjs":
/*!******************************************!*\
  !*** ./node_modules/tslib/tslib.es6.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__addDisposableResource": () => (/* binding */ __addDisposableResource),
/* harmony export */   "__assign": () => (/* binding */ __assign),
/* harmony export */   "__asyncDelegator": () => (/* binding */ __asyncDelegator),
/* harmony export */   "__asyncGenerator": () => (/* binding */ __asyncGenerator),
/* harmony export */   "__asyncValues": () => (/* binding */ __asyncValues),
/* harmony export */   "__await": () => (/* binding */ __await),
/* harmony export */   "__awaiter": () => (/* binding */ __awaiter),
/* harmony export */   "__classPrivateFieldGet": () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   "__classPrivateFieldIn": () => (/* binding */ __classPrivateFieldIn),
/* harmony export */   "__classPrivateFieldSet": () => (/* binding */ __classPrivateFieldSet),
/* harmony export */   "__createBinding": () => (/* binding */ __createBinding),
/* harmony export */   "__decorate": () => (/* binding */ __decorate),
/* harmony export */   "__disposeResources": () => (/* binding */ __disposeResources),
/* harmony export */   "__esDecorate": () => (/* binding */ __esDecorate),
/* harmony export */   "__exportStar": () => (/* binding */ __exportStar),
/* harmony export */   "__extends": () => (/* binding */ __extends),
/* harmony export */   "__generator": () => (/* binding */ __generator),
/* harmony export */   "__importDefault": () => (/* binding */ __importDefault),
/* harmony export */   "__importStar": () => (/* binding */ __importStar),
/* harmony export */   "__makeTemplateObject": () => (/* binding */ __makeTemplateObject),
/* harmony export */   "__metadata": () => (/* binding */ __metadata),
/* harmony export */   "__param": () => (/* binding */ __param),
/* harmony export */   "__propKey": () => (/* binding */ __propKey),
/* harmony export */   "__read": () => (/* binding */ __read),
/* harmony export */   "__rest": () => (/* binding */ __rest),
/* harmony export */   "__runInitializers": () => (/* binding */ __runInitializers),
/* harmony export */   "__setFunctionName": () => (/* binding */ __setFunctionName),
/* harmony export */   "__spread": () => (/* binding */ __spread),
/* harmony export */   "__spreadArray": () => (/* binding */ __spreadArray),
/* harmony export */   "__spreadArrays": () => (/* binding */ __spreadArrays),
/* harmony export */   "__values": () => (/* binding */ __values),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */

var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() { this.constructor = d; }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
  __assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
  }
  return __assign.apply(this, arguments);
}

function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
      }
  return t;
}

function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
  return function (target, key) { decorator(target, key, paramIndex); }
}

function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
      var context = {};
      for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
      for (var p in contextIn.access) context.access[p] = contextIn.access[p];
      context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
      var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
      if (kind === "accessor") {
          if (result === void 0) continue;
          if (result === null || typeof result !== "object") throw new TypeError("Object expected");
          if (_ = accept(result.get)) descriptor.get = _;
          if (_ = accept(result.set)) descriptor.set = _;
          if (_ = accept(result.init)) initializers.unshift(_);
      }
      else if (_ = accept(result)) {
          if (kind === "field") initializers.unshift(_);
          else descriptor[key] = _;
      }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
};

function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
};

function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
};

function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};

function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
  return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
      function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
  function verb(n) { return function (v) { return step([n, v]); }; }
  function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
              case 0: case 1: t = op; break;
              case 4: _.label++; return { value: op[1], done: false };
              case 5: _.label++; y = op[1]; op = [0]; continue;
              case 7: op = _.ops.pop(); _.trys.pop(); continue;
              default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                  if (t[2]) _.ops.pop();
                  _.trys.pop(); continue;
          }
          op = body.call(thisArg, _);
      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
  }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
  }
  Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
      next: function () {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
      }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  }
  catch (error) { e = { error: error }; }
  finally {
      try {
          if (r && !r.done && (m = i["return"])) m.call(i);
      }
      finally { if (e) throw e.error; }
  }
  return ar;
}

/** @deprecated */
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
      ar = ar.concat(__read(arguments[i]));
  return ar;
}

/** @deprecated */
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
  return r;
}

function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
      }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
  function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
  function fulfill(value) { resume("next", value); }
  function reject(value) { resume("throw", value); }
  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
  return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
  Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
  o["default"] = v;
};

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
}

function __importDefault(mod) {
  return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}

function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object") throw new TypeError("Object expected.");
    var dispose;
    if (async) {
        if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
        dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
        if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
        dispose = value[Symbol.dispose];
    }
    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
    env.stack.push({ value: value, dispose: dispose, async: async });
  }
  else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}

var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  function next() {
    while (env.stack.length) {
      var rec = env.stack.pop();
      try {
        var result = rec.dispose && rec.dispose.call(rec.value);
        if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });
      }
      catch (e) {
          fail(e);
      }
    }
    if (env.hasError) throw env.error;
  }
  return next();
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  __extends,
  __assign,
  __rest,
  __decorate,
  __param,
  __metadata,
  __awaiter,
  __generator,
  __createBinding,
  __exportStar,
  __values,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn,
  __addDisposableResource,
  __disposeResources,
});


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/background.ts");
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,